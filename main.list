
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 21 6b 00 00 6d 6b 00 00 6d 6b 00 00     .P. !k..mk..mk..
      10:	6d 6b 00 00 6d 6b 00 00 6d 6b 00 00 00 00 00 00     mk..mk..mk......
	...
      2c:	99 4c 00 00 6d 6b 00 00 00 00 00 00 a5 4d 00 00     .L..mk.......M..
      3c:	e1 4d 00 00 6d 6b 00 00 6d 6b 00 00 6d 6b 00 00     .M..mk..mk..mk..
      4c:	6d 6b 00 00 6d 6b 00 00 6d 6b 00 00 6d 6b 00 00     mk..mk..mk..mk..
      5c:	6d 6b 00 00 6d 6b 00 00 6d 6b 00 00 6d 6b 00 00     mk..mk..mk..mk..
      6c:	6d 6b 00 00 6d 6b 00 00 6d 6b 00 00 6d 6b 00 00     mk..mk..mk..mk..
      7c:	6d 6b 00 00 6d 6b 00 00 6d 6b 00 00 6d 6b 00 00     mk..mk..mk..mk..
      8c:	6d 6b 00 00 6d 6b 00 00 6d 6b 00 00 6d 6b 00 00     mk..mk..mk..mk..
      9c:	6d 6b 00 00 6d 6b 00 00 6d 6b 00 00 6d 6b 00 00     mk..mk..mk..mk..
      ac:	6d 6b 00 00 6d 6b 00 00 6d 6b 00 00 6d 6b 00 00     mk..mk..mk..mk..
      bc:	6d 6b 00 00 6d 6b 00 00 6d 6b 00 00 6d 6b 00 00     mk..mk..mk..mk..
      cc:	6d 6b 00 00 6d 6b 00 00 6d 6b 00 00 51 64 00 00     mk..mk..mk..Qd..
      dc:	6d 6b 00 00 6d 6b 00 00 6d 6b 00 00 6d 6b 00 00     mk..mk..mk..mk..
	...
     108:	5f f8 08 f1                                         _...

0000010c <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     10c:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, psp\n\t"
     110:	f3ef 8409 	mrs	r4, PSP
     114:	4620      	mov	r0, r4
     116:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     118:	4623      	mov	r3, r4
}
     11a:	4618      	mov	r0, r3

0000011c <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     11c:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     11e:	f383 8809 	msr	PSP, r3
     122:	4770      	bx	lr

00000124 <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     124:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t"
     128:	f3ef 8408 	mrs	r4, MSP
     12c:	4620      	mov	r0, r4
     12e:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     130:	4623      	mov	r3, r4
}
     132:	4618      	mov	r0, r3

00000134 <__set_MSP>:
 * Assign the value mainStackPointer to the MSP
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     134:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     136:	f383 8808 	msr	MSP, r3
     13a:	4770      	bx	lr

0000013c <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     13c:	b490      	push	{r4, r7}
     13e:	b082      	sub	sp, #8
     140:	af00      	add	r7, sp, #0
  uint32_t result=0;
     142:	f04f 0300 	mov.w	r3, #0
     146:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     148:	f3ef 8412 	mrs	r4, BASEPRI_MAX
     14c:	607c      	str	r4, [r7, #4]
  return(result);
     14e:	687b      	ldr	r3, [r7, #4]
}
     150:	4618      	mov	r0, r3
     152:	f107 0708 	add.w	r7, r7, #8
     156:	46bd      	mov	sp, r7
     158:	bc90      	pop	{r4, r7}
     15a:	4770      	bx	lr

0000015c <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     15c:	b480      	push	{r7}
     15e:	b083      	sub	sp, #12
     160:	af00      	add	r7, sp, #0
     162:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     164:	687b      	ldr	r3, [r7, #4]
     166:	f383 8811 	msr	BASEPRI, r3
}
     16a:	f107 070c 	add.w	r7, r7, #12
     16e:	46bd      	mov	sp, r7
     170:	bc80      	pop	{r7}
     172:	4770      	bx	lr

00000174 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     174:	b490      	push	{r4, r7}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
  uint32_t result=0;
     17a:	f04f 0300 	mov.w	r3, #0
     17e:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     180:	f3ef 8410 	mrs	r4, PRIMASK
     184:	607c      	str	r4, [r7, #4]
  return(result);
     186:	687b      	ldr	r3, [r7, #4]
}
     188:	4618      	mov	r0, r3
     18a:	f107 0708 	add.w	r7, r7, #8
     18e:	46bd      	mov	sp, r7
     190:	bc90      	pop	{r4, r7}
     192:	4770      	bx	lr

00000194 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     194:	b480      	push	{r7}
     196:	b083      	sub	sp, #12
     198:	af00      	add	r7, sp, #0
     19a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     19c:	687b      	ldr	r3, [r7, #4]
     19e:	f383 8810 	msr	PRIMASK, r3
}
     1a2:	f107 070c 	add.w	r7, r7, #12
     1a6:	46bd      	mov	sp, r7
     1a8:	bc80      	pop	{r7}
     1aa:	4770      	bx	lr

000001ac <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     1ac:	b490      	push	{r4, r7}
     1ae:	b082      	sub	sp, #8
     1b0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1b2:	f04f 0300 	mov.w	r3, #0
     1b6:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     1b8:	f3ef 8413 	mrs	r4, FAULTMASK
     1bc:	607c      	str	r4, [r7, #4]
  return(result);
     1be:	687b      	ldr	r3, [r7, #4]
}
     1c0:	4618      	mov	r0, r3
     1c2:	f107 0708 	add.w	r7, r7, #8
     1c6:	46bd      	mov	sp, r7
     1c8:	bc90      	pop	{r4, r7}
     1ca:	4770      	bx	lr

000001cc <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     1cc:	b480      	push	{r7}
     1ce:	b083      	sub	sp, #12
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	f383 8813 	msr	FAULTMASK, r3
}
     1da:	f107 070c 	add.w	r7, r7, #12
     1de:	46bd      	mov	sp, r7
     1e0:	bc80      	pop	{r7}
     1e2:	4770      	bx	lr

000001e4 <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     1e4:	b490      	push	{r4, r7}
     1e6:	b082      	sub	sp, #8
     1e8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     1ea:	f04f 0300 	mov.w	r3, #0
     1ee:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     1f0:	f3ef 8414 	mrs	r4, CONTROL
     1f4:	607c      	str	r4, [r7, #4]
  return(result);
     1f6:	687b      	ldr	r3, [r7, #4]
}
     1f8:	4618      	mov	r0, r3
     1fa:	f107 0708 	add.w	r7, r7, #8
     1fe:	46bd      	mov	sp, r7
     200:	bc90      	pop	{r4, r7}
     202:	4770      	bx	lr

00000204 <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     204:	b480      	push	{r7}
     206:	b083      	sub	sp, #12
     208:	af00      	add	r7, sp, #0
     20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     20c:	687b      	ldr	r3, [r7, #4]
     20e:	f383 8814 	msr	CONTROL, r3
}
     212:	f107 070c 	add.w	r7, r7, #12
     216:	46bd      	mov	sp, r7
     218:	bc80      	pop	{r7}
     21a:	4770      	bx	lr

0000021c <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     21c:	b490      	push	{r4, r7}
     21e:	b084      	sub	sp, #16
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     224:	f04f 0300 	mov.w	r3, #0
     228:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     22a:	687b      	ldr	r3, [r7, #4]
     22c:	ba1c      	rev	r4, r3
     22e:	60fc      	str	r4, [r7, #12]
  return(result);
     230:	68fb      	ldr	r3, [r7, #12]
}
     232:	4618      	mov	r0, r3
     234:	f107 0710 	add.w	r7, r7, #16
     238:	46bd      	mov	sp, r7
     23a:	bc90      	pop	{r4, r7}
     23c:	4770      	bx	lr
     23e:	bf00      	nop

00000240 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     240:	b490      	push	{r4, r7}
     242:	b084      	sub	sp, #16
     244:	af00      	add	r7, sp, #0
     246:	4603      	mov	r3, r0
     248:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     24a:	f04f 0300 	mov.w	r3, #0
     24e:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     250:	88fb      	ldrh	r3, [r7, #6]
     252:	ba5c      	rev16	r4, r3
     254:	60fc      	str	r4, [r7, #12]
  return(result);
     256:	68fb      	ldr	r3, [r7, #12]
}
     258:	4618      	mov	r0, r3
     25a:	f107 0710 	add.w	r7, r7, #16
     25e:	46bd      	mov	sp, r7
     260:	bc90      	pop	{r4, r7}
     262:	4770      	bx	lr

00000264 <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     264:	b490      	push	{r4, r7}
     266:	b084      	sub	sp, #16
     268:	af00      	add	r7, sp, #0
     26a:	4603      	mov	r3, r0
     26c:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     26e:	f04f 0300 	mov.w	r3, #0
     272:	60fb      	str	r3, [r7, #12]

  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     274:	88fb      	ldrh	r3, [r7, #6]
     276:	badc      	revsh	r4, r3
     278:	60fc      	str	r4, [r7, #12]
  return(result);
     27a:	68fb      	ldr	r3, [r7, #12]
}
     27c:	4618      	mov	r0, r3
     27e:	f107 0710 	add.w	r7, r7, #16
     282:	46bd      	mov	sp, r7
     284:	bc90      	pop	{r4, r7}
     286:	4770      	bx	lr

00000288 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     288:	b490      	push	{r4, r7}
     28a:	b084      	sub	sp, #16
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     290:	f04f 0300 	mov.w	r3, #0
     294:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     296:	687b      	ldr	r3, [r7, #4]
     298:	fa93 f4a3 	rbit	r4, r3
     29c:	60fc      	str	r4, [r7, #12]
   return(result);
     29e:	68fb      	ldr	r3, [r7, #12]
}
     2a0:	4618      	mov	r0, r3
     2a2:	f107 0710 	add.w	r7, r7, #16
     2a6:	46bd      	mov	sp, r7
     2a8:	bc90      	pop	{r4, r7}
     2aa:	4770      	bx	lr

000002ac <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     2ac:	b490      	push	{r4, r7}
     2ae:	b084      	sub	sp, #16
     2b0:	af00      	add	r7, sp, #0
     2b2:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     2b4:	f04f 0300 	mov.w	r3, #0
     2b8:	73fb      	strb	r3, [r7, #15]

   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     2ba:	687b      	ldr	r3, [r7, #4]
     2bc:	e8d3 4f4f 	ldrexb	r4, [r3]
     2c0:	73fc      	strb	r4, [r7, #15]
   return(result);
     2c2:	7bfb      	ldrb	r3, [r7, #15]
}
     2c4:	4618      	mov	r0, r3
     2c6:	f107 0710 	add.w	r7, r7, #16
     2ca:	46bd      	mov	sp, r7
     2cc:	bc90      	pop	{r4, r7}
     2ce:	4770      	bx	lr

000002d0 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     2d0:	b490      	push	{r4, r7}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     2d8:	f04f 0300 	mov.w	r3, #0
     2dc:	81fb      	strh	r3, [r7, #14]

   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     2de:	687b      	ldr	r3, [r7, #4]
     2e0:	e8d3 4f5f 	ldrexh	r4, [r3]
     2e4:	81fc      	strh	r4, [r7, #14]
   return(result);
     2e6:	89fb      	ldrh	r3, [r7, #14]
}
     2e8:	4618      	mov	r0, r3
     2ea:	f107 0710 	add.w	r7, r7, #16
     2ee:	46bd      	mov	sp, r7
     2f0:	bc90      	pop	{r4, r7}
     2f2:	4770      	bx	lr

000002f4 <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     2f4:	b490      	push	{r4, r7}
     2f6:	b084      	sub	sp, #16
     2f8:	af00      	add	r7, sp, #0
     2fa:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     2fc:	f04f 0300 	mov.w	r3, #0
     300:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     302:	687b      	ldr	r3, [r7, #4]
     304:	e853 4f00 	ldrex	r4, [r3]
     308:	60fc      	str	r4, [r7, #12]
   return(result);
     30a:	68fb      	ldr	r3, [r7, #12]
}
     30c:	4618      	mov	r0, r3
     30e:	f107 0710 	add.w	r7, r7, #16
     312:	46bd      	mov	sp, r7
     314:	bc90      	pop	{r4, r7}
     316:	4770      	bx	lr

00000318 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     318:	b490      	push	{r4, r7}
     31a:	b084      	sub	sp, #16
     31c:	af00      	add	r7, sp, #0
     31e:	4603      	mov	r3, r0
     320:	6039      	str	r1, [r7, #0]
     322:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     324:	f04f 0300 	mov.w	r3, #0
     328:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strexb %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     32a:	683b      	ldr	r3, [r7, #0]
     32c:	79fa      	ldrb	r2, [r7, #7]
     32e:	e8c3 2f44 	strexb	r4, r2, [r3]
     332:	60fc      	str	r4, [r7, #12]
   return(result);
     334:	68fb      	ldr	r3, [r7, #12]
}
     336:	4618      	mov	r0, r3
     338:	f107 0710 	add.w	r7, r7, #16
     33c:	46bd      	mov	sp, r7
     33e:	bc90      	pop	{r4, r7}
     340:	4770      	bx	lr
     342:	bf00      	nop

00000344 <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     344:	b490      	push	{r4, r7}
     346:	b084      	sub	sp, #16
     348:	af00      	add	r7, sp, #0
     34a:	4603      	mov	r3, r0
     34c:	6039      	str	r1, [r7, #0]
     34e:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     350:	f04f 0300 	mov.w	r3, #0
     354:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strexh %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     356:	683b      	ldr	r3, [r7, #0]
     358:	88fa      	ldrh	r2, [r7, #6]
     35a:	e8c3 2f54 	strexh	r4, r2, [r3]
     35e:	60fc      	str	r4, [r7, #12]
   return(result);
     360:	68fb      	ldr	r3, [r7, #12]
}
     362:	4618      	mov	r0, r3
     364:	f107 0710 	add.w	r7, r7, #16
     368:	46bd      	mov	sp, r7
     36a:	bc90      	pop	{r4, r7}
     36c:	4770      	bx	lr
     36e:	bf00      	nop

00000370 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     370:	b490      	push	{r4, r7}
     372:	b084      	sub	sp, #16
     374:	af00      	add	r7, sp, #0
     376:	6078      	str	r0, [r7, #4]
     378:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     37a:	f04f 0300 	mov.w	r3, #0
     37e:	60fb      	str	r3, [r7, #12]

   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     380:	683b      	ldr	r3, [r7, #0]
     382:	687a      	ldr	r2, [r7, #4]
     384:	e843 2400 	strex	r4, r2, [r3]
     388:	60fc      	str	r4, [r7, #12]
   return(result);
     38a:	68fb      	ldr	r3, [r7, #12]
}
     38c:	4618      	mov	r0, r3
     38e:	f107 0710 	add.w	r7, r7, #16
     392:	46bd      	mov	sp, r7
     394:	bc90      	pop	{r4, r7}
     396:	4770      	bx	lr

00000398 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     398:	b580      	push	{r7, lr}
     39a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     39c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3ac:	6812      	ldr	r2, [r2, #0]
     3ae:	f042 0201 	orr.w	r2, r2, #1
     3b2:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     3b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3c4:	6859      	ldr	r1, [r3, #4]
     3c6:	f04f 0300 	mov.w	r3, #0
     3ca:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     3ce:	400b      	ands	r3, r1
     3d0:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     3d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3de:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3e2:	6812      	ldr	r2, [r2, #0]
     3e4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     3e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     3ec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     3ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     3f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     3f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     3fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
     3fe:	6812      	ldr	r2, [r2, #0]
     400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     404:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     40a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     40e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     412:	f2c4 0202 	movt	r2, #16386	; 0x4002
     416:	6852      	ldr	r2, [r2, #4]
     418:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     41c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     41e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     422:	f2c4 0302 	movt	r3, #16386	; 0x4002
     426:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     42a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     42c:	f000 f8ac 	bl	588 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     430:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     434:	f2ce 0300 	movt	r3, #57344	; 0xe000
     438:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     43c:	609a      	str	r2, [r3, #8]
#endif
}
     43e:	bd80      	pop	{r7, pc}

00000440 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     440:	b480      	push	{r7}
     442:	b085      	sub	sp, #20
     444:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     446:	f04f 0300 	mov.w	r3, #0
     44a:	60fb      	str	r3, [r7, #12]
     44c:	f04f 0300 	mov.w	r3, #0
     450:	60bb      	str	r3, [r7, #8]
     452:	f04f 0300 	mov.w	r3, #0
     456:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     45c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     460:	685b      	ldr	r3, [r3, #4]
     462:	f003 030c 	and.w	r3, r3, #12
     466:	60fb      	str	r3, [r7, #12]

  switch (tmp)
     468:	68fb      	ldr	r3, [r7, #12]
     46a:	2b04      	cmp	r3, #4
     46c:	d00d      	beq.n	48a <SystemCoreClockUpdate+0x4a>
     46e:	2b08      	cmp	r3, #8
     470:	d015      	beq.n	49e <SystemCoreClockUpdate+0x5e>
     472:	2b00      	cmp	r3, #0
     474:	d15c      	bne.n	530 <_binary_test_romfs_bin_size+0x7d>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     476:	f240 0300 	movw	r3, #0
     47a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     47e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     482:	f2c0 027a 	movt	r2, #122	; 0x7a
     486:	601a      	str	r2, [r3, #0]
      break;
     488:	e05c      	b.n	544 <_binary_test_romfs_bin_size+0x91>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     48a:	f240 0300 	movw	r3, #0
     48e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     492:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     496:	f2c0 027a 	movt	r2, #122	; 0x7a
     49a:	601a      	str	r2, [r3, #0]
      break;
     49c:	e052      	b.n	544 <_binary_test_romfs_bin_size+0x91>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4a6:	685b      	ldr	r3, [r3, #4]
     4a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     4ac:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     4ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4b6:	685b      	ldr	r3, [r3, #4]
     4b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     4bc:	607b      	str	r3, [r7, #4]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     4be:	68bb      	ldr	r3, [r7, #8]
     4c0:	ea4f 4393 	mov.w	r3, r3, lsr #18
     4c4:	f103 0302 	add.w	r3, r3, #2
     4c8:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
     4ca:	687b      	ldr	r3, [r7, #4]
     4cc:	2b00      	cmp	r3, #0
     4ce:	d10c      	bne.n	4ea <_binary_test_romfs_bin_size+0x37>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     4d0:	68ba      	ldr	r2, [r7, #8]
     4d2:	f44f 6310 	mov.w	r3, #2304	; 0x900
     4d6:	f2c0 033d 	movt	r3, #61	; 0x3d
     4da:	fb03 f202 	mul.w	r2, r3, r2
     4de:	f240 0300 	movw	r3, #0
     4e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4e6:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     4e8:	e02c      	b.n	544 <_binary_test_romfs_bin_size+0x91>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     4ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     4ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
     4f2:	685b      	ldr	r3, [r3, #4]
     4f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     4f8:	2b00      	cmp	r3, #0
     4fa:	d00c      	beq.n	516 <_binary_test_romfs_bin_size+0x63>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     4fc:	68ba      	ldr	r2, [r7, #8]
     4fe:	f44f 6310 	mov.w	r3, #2304	; 0x900
     502:	f2c0 033d 	movt	r3, #61	; 0x3d
     506:	fb03 f202 	mul.w	r2, r3, r2
     50a:	f240 0300 	movw	r3, #0
     50e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     512:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     514:	e016      	b.n	544 <_binary_test_romfs_bin_size+0x91>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     516:	68ba      	ldr	r2, [r7, #8]
     518:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     51c:	f2c0 037a 	movt	r3, #122	; 0x7a
     520:	fb03 f202 	mul.w	r2, r3, r2
     524:	f240 0300 	movw	r3, #0
     528:	f2c2 0300 	movt	r3, #8192	; 0x2000
     52c:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2;
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     52e:	e009      	b.n	544 <_binary_test_romfs_bin_size+0x91>

    default:
      SystemCoreClock = HSI_VALUE;
     530:	f240 0300 	movw	r3, #0
     534:	f2c2 0300 	movt	r3, #8192	; 0x2000
     538:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     53c:	f2c0 027a 	movt	r2, #122	; 0x7a
     540:	601a      	str	r2, [r3, #0]
      break;
     542:	bf00      	nop
  }

  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     548:	f2c4 0302 	movt	r3, #16386	; 0x4002
     54c:	685b      	ldr	r3, [r3, #4]
     54e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     552:	ea4f 1213 	mov.w	r2, r3, lsr #4
     556:	f240 0304 	movw	r3, #4
     55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     55e:	5c9b      	ldrb	r3, [r3, r2]
     560:	b2db      	uxtb	r3, r3
     562:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
     564:	f240 0300 	movw	r3, #0
     568:	f2c2 0300 	movt	r3, #8192	; 0x2000
     56c:	681a      	ldr	r2, [r3, #0]
     56e:	68fb      	ldr	r3, [r7, #12]
     570:	fa22 f203 	lsr.w	r2, r2, r3
     574:	f240 0300 	movw	r3, #0
     578:	f2c2 0300 	movt	r3, #8192	; 0x2000
     57c:	601a      	str	r2, [r3, #0]
}
     57e:	f107 0714 	add.w	r7, r7, #20
     582:	46bd      	mov	sp, r7
     584:	bc80      	pop	{r7}
     586:	4770      	bx	lr

00000588 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     588:	b580      	push	{r7, lr}
     58a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     58c:	f000 f802 	bl	594 <SetSysClockTo72>
#endif

 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */
}
     590:	bd80      	pop	{r7, pc}
     592:	bf00      	nop

00000594 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     594:	b480      	push	{r7}
     596:	b083      	sub	sp, #12
     598:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     59a:	f04f 0300 	mov.w	r3, #0
     59e:	607b      	str	r3, [r7, #4]
     5a0:	f04f 0300 	mov.w	r3, #0
     5a4:	603b      	str	r3, [r7, #0]

  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     5a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     5b6:	6812      	ldr	r2, [r2, #0]
     5b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     5bc:	601a      	str	r2, [r3, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     5be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5cc:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
     5ce:	687b      	ldr	r3, [r7, #4]
     5d0:	f103 0301 	add.w	r3, r3, #1
     5d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     5d6:	683b      	ldr	r3, [r7, #0]
     5d8:	2b00      	cmp	r3, #0
     5da:	d103      	bne.n	5e4 <SetSysClockTo72+0x50>
     5dc:	687b      	ldr	r3, [r7, #4]
     5de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     5e2:	d1ec      	bne.n	5be <SetSysClockTo72+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     5e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     5e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     5ec:	681b      	ldr	r3, [r3, #0]
     5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     5f2:	2b00      	cmp	r3, #0
     5f4:	d003      	beq.n	5fe <SetSysClockTo72+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
     5f6:	f04f 0301 	mov.w	r3, #1
     5fa:	603b      	str	r3, [r7, #0]
     5fc:	e002      	b.n	604 <SetSysClockTo72+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     5fe:	f04f 0300 	mov.w	r3, #0
     602:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
     604:	683b      	ldr	r3, [r7, #0]
     606:	2b01      	cmp	r3, #1
     608:	f040 8094 	bne.w	734 <SetSysClockTo72+0x1a0>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     60c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     610:	f2c4 0302 	movt	r3, #16386	; 0x4002
     614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     618:	f2c4 0202 	movt	r2, #16386	; 0x4002
     61c:	6812      	ldr	r2, [r2, #0]
     61e:	f042 0210 	orr.w	r2, r2, #16
     622:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     628:	f2c4 0302 	movt	r3, #16386	; 0x4002
     62c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     630:	f2c4 0202 	movt	r2, #16386	; 0x4002
     634:	6812      	ldr	r2, [r2, #0]
     636:	f022 0203 	bic.w	r2, r2, #3
     63a:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;
     63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     640:	f2c4 0302 	movt	r3, #16386	; 0x4002
     644:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     648:	f2c4 0202 	movt	r2, #16386	; 0x4002
     64c:	6812      	ldr	r2, [r2, #0]
     64e:	f042 0202 	orr.w	r2, r2, #2
     652:	601a      	str	r2, [r3, #0]


    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     658:	f2c4 0302 	movt	r3, #16386	; 0x4002
     65c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     660:	f2c4 0202 	movt	r2, #16386	; 0x4002
     664:	6852      	ldr	r2, [r2, #4]
     666:	605a      	str	r2, [r3, #4]

    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     66c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     674:	f2c4 0202 	movt	r2, #16386	; 0x4002
     678:	6852      	ldr	r2, [r2, #4]
     67a:	605a      	str	r2, [r3, #4]

    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     67c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     680:	f2c4 0302 	movt	r3, #16386	; 0x4002
     684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     688:	f2c4 0202 	movt	r2, #16386	; 0x4002
     68c:	6852      	ldr	r2, [r2, #4]
     68e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     692:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 |
                            RCC_CFGR_PLLMULL9);
#else
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     698:	f2c4 0302 	movt	r3, #16386	; 0x4002
     69c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6a4:	6852      	ldr	r2, [r2, #4]
     6a6:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     6aa:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     6ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6bc:	6852      	ldr	r2, [r2, #4]
     6be:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     6c2:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     6d4:	6812      	ldr	r2, [r2, #0]
     6d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     6da:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     6dc:	bf00      	nop
     6de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6e6:	681b      	ldr	r3, [r3, #0]
     6e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     6ec:	2b00      	cmp	r3, #0
     6ee:	d0f6      	beq.n	6de <SetSysClockTo72+0x14a>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     6f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     6f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     6f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     700:	6852      	ldr	r2, [r2, #4]
     702:	f022 0203 	bic.w	r2, r2, #3
     706:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
     708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     70c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     714:	f2c4 0202 	movt	r2, #16386	; 0x4002
     718:	6852      	ldr	r2, [r2, #4]
     71a:	f042 0202 	orr.w	r2, r2, #2
     71e:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     720:	bf00      	nop
     722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     726:	f2c4 0302 	movt	r3, #16386	; 0x4002
     72a:	685b      	ldr	r3, [r3, #4]
     72c:	f003 030c 	and.w	r3, r3, #12
     730:	2b08      	cmp	r3, #8
     732:	d1f6      	bne.n	722 <SetSysClockTo72+0x18e>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
     734:	f107 070c 	add.w	r7, r7, #12
     738:	46bd      	mov	sp, r7
     73a:	bc80      	pop	{r7}
     73c:	4770      	bx	lr
     73e:	bf00      	nop
     740:	00007173 	.word	0x00007173
     744:	20000000 	.word	0x20000000
     748:	20000030 	.word	0x20000030
     74c:	20000038 	.word	0x20000038
     750:	20004a48 	.word	0x20004a48

00000754 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
     754:	b480      	push	{r7}
     756:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     75c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     764:	f2c4 0202 	movt	r2, #16386	; 0x4002
     768:	6812      	ldr	r2, [r2, #0]
     76a:	f042 0201 	orr.w	r2, r2, #1
     76e:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     770:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     774:	f2c4 0202 	movt	r2, #16386	; 0x4002
     778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     77c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     780:	6859      	ldr	r1, [r3, #4]
     782:	f04f 0300 	mov.w	r3, #0
     786:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     78a:	400b      	ands	r3, r1
     78c:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     792:	f2c4 0302 	movt	r3, #16386	; 0x4002
     796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     79a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     79e:	6812      	ldr	r2, [r2, #0]
     7a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     7a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     7a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     7aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7ba:	6812      	ldr	r2, [r2, #0]
     7bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     7c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     7c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
     7d2:	6852      	ldr	r2, [r2, #4]
     7d4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     7d8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     7da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7de:	f2c4 0302 	movt	r3, #16386	; 0x4002
     7e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     7e6:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
     7e8:	46bd      	mov	sp, r7
     7ea:	bc80      	pop	{r7}
     7ec:	4770      	bx	lr
     7ee:	bf00      	nop

000007f0 <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
     7f0:	b480      	push	{r7}
     7f2:	b083      	sub	sp, #12
     7f4:	af00      	add	r7, sp, #0
     7f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
     7f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     7fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
     800:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     804:	f2c4 0202 	movt	r2, #16386	; 0x4002
     808:	6812      	ldr	r2, [r2, #0]
     80a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     80e:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
     810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     814:	f2c4 0302 	movt	r3, #16386	; 0x4002
     818:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     81c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     820:	6812      	ldr	r2, [r2, #0]
     822:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     826:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
     828:	687b      	ldr	r3, [r7, #4]
     82a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
     82e:	d003      	beq.n	838 <RCC_HSEConfig+0x48>
     830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
     834:	d00d      	beq.n	852 <RCC_HSEConfig+0x62>
     836:	e019      	b.n	86c <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
     838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     83c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     844:	f2c4 0202 	movt	r2, #16386	; 0x4002
     848:	6812      	ldr	r2, [r2, #0]
     84a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     84e:	601a      	str	r2, [r3, #0]
      break;
     850:	e00d      	b.n	86e <RCC_HSEConfig+0x7e>

    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
     852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     856:	f2c4 0302 	movt	r3, #16386	; 0x4002
     85a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     85e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     862:	6812      	ldr	r2, [r2, #0]
     864:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
     868:	601a      	str	r2, [r3, #0]
      break;
     86a:	e000      	b.n	86e <RCC_HSEConfig+0x7e>

    default:
      break;
     86c:	bf00      	nop
  }
}
     86e:	f107 070c 	add.w	r7, r7, #12
     872:	46bd      	mov	sp, r7
     874:	bc80      	pop	{r7}
     876:	4770      	bx	lr

00000878 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
     878:	b580      	push	{r7, lr}
     87a:	b082      	sub	sp, #8
     87c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
     87e:	f04f 0300 	mov.w	r3, #0
     882:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
     884:	f04f 0300 	mov.w	r3, #0
     888:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
     88a:	f04f 0300 	mov.w	r3, #0
     88e:	71bb      	strb	r3, [r7, #6]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
     890:	f04f 0031 	mov.w	r0, #49	; 0x31
     894:	f000 fbce 	bl	1034 <RCC_GetFlagStatus>
     898:	4603      	mov	r3, r0
     89a:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;
     89c:	683b      	ldr	r3, [r7, #0]
     89e:	f103 0301 	add.w	r3, r3, #1
     8a2:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
     8a4:	683b      	ldr	r3, [r7, #0]
     8a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     8aa:	d002      	beq.n	8b2 <RCC_WaitForHSEStartUp+0x3a>
     8ac:	79bb      	ldrb	r3, [r7, #6]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d0ee      	beq.n	890 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
     8b2:	f04f 0031 	mov.w	r0, #49	; 0x31
     8b6:	f000 fbbd 	bl	1034 <RCC_GetFlagStatus>
     8ba:	4603      	mov	r3, r0
     8bc:	2b00      	cmp	r3, #0
     8be:	d003      	beq.n	8c8 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
     8c0:	f04f 0301 	mov.w	r3, #1
     8c4:	71fb      	strb	r3, [r7, #7]
     8c6:	e002      	b.n	8ce <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
     8c8:	f04f 0300 	mov.w	r3, #0
     8cc:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
     8ce:	79fb      	ldrb	r3, [r7, #7]
}
     8d0:	4618      	mov	r0, r3
     8d2:	f107 0708 	add.w	r7, r7, #8
     8d6:	46bd      	mov	sp, r7
     8d8:	bd80      	pop	{r7, pc}
     8da:	bf00      	nop

000008dc <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
     8dc:	b480      	push	{r7}
     8de:	b085      	sub	sp, #20
     8e0:	af00      	add	r7, sp, #0
     8e2:	4603      	mov	r3, r0
     8e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
     8e6:	f04f 0300 	mov.w	r3, #0
     8ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
     8ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     8f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     8f4:	681b      	ldr	r3, [r3, #0]
     8f6:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
     8f8:	68fb      	ldr	r3, [r7, #12]
     8fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
     8fe:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
     900:	79fb      	ldrb	r3, [r7, #7]
     902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     906:	68fa      	ldr	r2, [r7, #12]
     908:	4313      	orrs	r3, r2
     90a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
     90c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     910:	f2c4 0302 	movt	r3, #16386	; 0x4002
     914:	68fa      	ldr	r2, [r7, #12]
     916:	601a      	str	r2, [r3, #0]
}
     918:	f107 0714 	add.w	r7, r7, #20
     91c:	46bd      	mov	sp, r7
     91e:	bc80      	pop	{r7}
     920:	4770      	bx	lr
     922:	bf00      	nop

00000924 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
     924:	b480      	push	{r7}
     926:	b083      	sub	sp, #12
     928:	af00      	add	r7, sp, #0
     92a:	4603      	mov	r3, r0
     92c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
     92e:	f04f 0300 	mov.w	r3, #0
     932:	f2c4 2342 	movt	r3, #16962	; 0x4242
     936:	79fa      	ldrb	r2, [r7, #7]
     938:	601a      	str	r2, [r3, #0]
}
     93a:	f107 070c 	add.w	r7, r7, #12
     93e:	46bd      	mov	sp, r7
     940:	bc80      	pop	{r7}
     942:	4770      	bx	lr

00000944 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
     944:	b480      	push	{r7}
     946:	b085      	sub	sp, #20
     948:	af00      	add	r7, sp, #0
     94a:	6078      	str	r0, [r7, #4]
     94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     94e:	f04f 0300 	mov.w	r3, #0
     952:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
     954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     958:	f2c4 0302 	movt	r3, #16386	; 0x4002
     95c:	685b      	ldr	r3, [r3, #4]
     95e:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
     960:	68fb      	ldr	r3, [r7, #12]
     962:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
     966:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
     968:	687a      	ldr	r2, [r7, #4]
     96a:	683b      	ldr	r3, [r7, #0]
     96c:	4313      	orrs	r3, r2
     96e:	68fa      	ldr	r2, [r7, #12]
     970:	4313      	orrs	r3, r2
     972:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     978:	f2c4 0302 	movt	r3, #16386	; 0x4002
     97c:	68fa      	ldr	r2, [r7, #12]
     97e:	605a      	str	r2, [r3, #4]
}
     980:	f107 0714 	add.w	r7, r7, #20
     984:	46bd      	mov	sp, r7
     986:	bc80      	pop	{r7}
     988:	4770      	bx	lr
     98a:	bf00      	nop

0000098c <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
     98c:	b480      	push	{r7}
     98e:	b083      	sub	sp, #12
     990:	af00      	add	r7, sp, #0
     992:	4603      	mov	r3, r0
     994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
     996:	f04f 0360 	mov.w	r3, #96	; 0x60
     99a:	f2c4 2342 	movt	r3, #16962	; 0x4242
     99e:	79fa      	ldrb	r2, [r7, #7]
     9a0:	601a      	str	r2, [r3, #0]
}
     9a2:	f107 070c 	add.w	r7, r7, #12
     9a6:	46bd      	mov	sp, r7
     9a8:	bc80      	pop	{r7}
     9aa:	4770      	bx	lr

000009ac <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
     9ac:	b480      	push	{r7}
     9ae:	b085      	sub	sp, #20
     9b0:	af00      	add	r7, sp, #0
     9b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     9b4:	f04f 0300 	mov.w	r3, #0
     9b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
     9ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9be:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9c2:	685b      	ldr	r3, [r3, #4]
     9c4:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	f023 0303 	bic.w	r3, r3, #3
     9cc:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
     9ce:	68fa      	ldr	r2, [r7, #12]
     9d0:	687b      	ldr	r3, [r7, #4]
     9d2:	4313      	orrs	r3, r2
     9d4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     9d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9da:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9de:	68fa      	ldr	r2, [r7, #12]
     9e0:	605a      	str	r2, [r3, #4]
}
     9e2:	f107 0714 	add.w	r7, r7, #20
     9e6:	46bd      	mov	sp, r7
     9e8:	bc80      	pop	{r7}
     9ea:	4770      	bx	lr

000009ec <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
     9ec:	b480      	push	{r7}
     9ee:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
     9f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9f8:	685b      	ldr	r3, [r3, #4]
     9fa:	b2db      	uxtb	r3, r3
     9fc:	f003 030c 	and.w	r3, r3, #12
     a00:	b2db      	uxtb	r3, r3
}
     a02:	4618      	mov	r0, r3
     a04:	46bd      	mov	sp, r7
     a06:	bc80      	pop	{r7}
     a08:	4770      	bx	lr
     a0a:	bf00      	nop

00000a0c <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
     a0c:	b480      	push	{r7}
     a0e:	b085      	sub	sp, #20
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a14:	f04f 0300 	mov.w	r3, #0
     a18:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
     a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a22:	685b      	ldr	r3, [r3, #4]
     a24:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
     a26:	68fb      	ldr	r3, [r7, #12]
     a28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
     a2c:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
     a2e:	68fa      	ldr	r2, [r7, #12]
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	4313      	orrs	r3, r2
     a34:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a3e:	68fa      	ldr	r2, [r7, #12]
     a40:	605a      	str	r2, [r3, #4]
}
     a42:	f107 0714 	add.w	r7, r7, #20
     a46:	46bd      	mov	sp, r7
     a48:	bc80      	pop	{r7}
     a4a:	4770      	bx	lr

00000a4c <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
     a4c:	b480      	push	{r7}
     a4e:	b085      	sub	sp, #20
     a50:	af00      	add	r7, sp, #0
     a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a54:	f04f 0300 	mov.w	r3, #0
     a58:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a62:	685b      	ldr	r3, [r3, #4]
     a64:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     a6c:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
     a6e:	68fa      	ldr	r2, [r7, #12]
     a70:	687b      	ldr	r3, [r7, #4]
     a72:	4313      	orrs	r3, r2
     a74:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a7e:	68fa      	ldr	r2, [r7, #12]
     a80:	605a      	str	r2, [r3, #4]
}
     a82:	f107 0714 	add.w	r7, r7, #20
     a86:	46bd      	mov	sp, r7
     a88:	bc80      	pop	{r7}
     a8a:	4770      	bx	lr

00000a8c <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
     a8c:	b480      	push	{r7}
     a8e:	b085      	sub	sp, #20
     a90:	af00      	add	r7, sp, #0
     a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     a94:	f04f 0300 	mov.w	r3, #0
     a98:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
     a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     aa2:	685b      	ldr	r3, [r3, #4]
     aa4:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
     aa6:	68fb      	ldr	r3, [r7, #12]
     aa8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
     aac:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     ab4:	68fa      	ldr	r2, [r7, #12]
     ab6:	4313      	orrs	r3, r2
     ab8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     abe:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ac2:	68fa      	ldr	r2, [r7, #12]
     ac4:	605a      	str	r2, [r3, #4]
}
     ac6:	f107 0714 	add.w	r7, r7, #20
     aca:	46bd      	mov	sp, r7
     acc:	bc80      	pop	{r7}
     ace:	4770      	bx	lr

00000ad0 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
     ad0:	b480      	push	{r7}
     ad2:	b083      	sub	sp, #12
     ad4:	af00      	add	r7, sp, #0
     ad6:	4602      	mov	r2, r0
     ad8:	460b      	mov	r3, r1
     ada:	71fa      	strb	r2, [r7, #7]
     adc:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ade:	79bb      	ldrb	r3, [r7, #6]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d00e      	beq.n	b02 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
     ae4:	f241 0309 	movw	r3, #4105	; 0x1009
     ae8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     aec:	f241 0209 	movw	r2, #4105	; 0x1009
     af0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     af4:	7812      	ldrb	r2, [r2, #0]
     af6:	b2d1      	uxtb	r1, r2
     af8:	79fa      	ldrb	r2, [r7, #7]
     afa:	430a      	orrs	r2, r1
     afc:	b2d2      	uxtb	r2, r2
     afe:	701a      	strb	r2, [r3, #0]
     b00:	e010      	b.n	b24 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
     b02:	f241 0309 	movw	r3, #4105	; 0x1009
     b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b0a:	f241 0209 	movw	r2, #4105	; 0x1009
     b0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b12:	7812      	ldrb	r2, [r2, #0]
     b14:	b2d1      	uxtb	r1, r2
     b16:	79fa      	ldrb	r2, [r7, #7]
     b18:	ea6f 0202 	mvn.w	r2, r2
     b1c:	b2d2      	uxtb	r2, r2
     b1e:	400a      	ands	r2, r1
     b20:	b2d2      	uxtb	r2, r2
     b22:	701a      	strb	r2, [r3, #0]
  }
}
     b24:	f107 070c 	add.w	r7, r7, #12
     b28:	46bd      	mov	sp, r7
     b2a:	bc80      	pop	{r7}
     b2c:	4770      	bx	lr
     b2e:	bf00      	nop

00000b30 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
     b30:	b480      	push	{r7}
     b32:	b083      	sub	sp, #12
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
     b38:	f04f 03d8 	mov.w	r3, #216	; 0xd8
     b3c:	f2c4 2342 	movt	r3, #16962	; 0x4242
     b40:	687a      	ldr	r2, [r7, #4]
     b42:	601a      	str	r2, [r3, #0]
}
     b44:	f107 070c 	add.w	r7, r7, #12
     b48:	46bd      	mov	sp, r7
     b4a:	bc80      	pop	{r7}
     b4c:	4770      	bx	lr
     b4e:	bf00      	nop

00000b50 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
     b50:	b480      	push	{r7}
     b52:	b085      	sub	sp, #20
     b54:	af00      	add	r7, sp, #0
     b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
     b58:	f04f 0300 	mov.w	r3, #0
     b5c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
     b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b62:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b66:	685b      	ldr	r3, [r3, #4]
     b68:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
     b6a:	68fb      	ldr	r3, [r7, #12]
     b6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     b70:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
     b72:	68fa      	ldr	r2, [r7, #12]
     b74:	687b      	ldr	r3, [r7, #4]
     b76:	4313      	orrs	r3, r2
     b78:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
     b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b82:	68fa      	ldr	r2, [r7, #12]
     b84:	605a      	str	r2, [r3, #4]
}
     b86:	f107 0714 	add.w	r7, r7, #20
     b8a:	46bd      	mov	sp, r7
     b8c:	bc80      	pop	{r7}
     b8e:	4770      	bx	lr

00000b90 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
     b90:	b480      	push	{r7}
     b92:	b083      	sub	sp, #12
     b94:	af00      	add	r7, sp, #0
     b96:	4603      	mov	r3, r0
     b98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     b9a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     b9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ba2:	f04f 0200 	mov.w	r2, #0
     ba6:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
     ba8:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bb0:	f04f 0200 	mov.w	r2, #0
     bb4:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
     bb6:	79fb      	ldrb	r3, [r7, #7]
     bb8:	2b01      	cmp	r3, #1
     bba:	d002      	beq.n	bc2 <RCC_LSEConfig+0x32>
     bbc:	2b04      	cmp	r3, #4
     bbe:	d008      	beq.n	bd2 <RCC_LSEConfig+0x42>
     bc0:	e00f      	b.n	be2 <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
     bc2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bca:	f04f 0201 	mov.w	r2, #1
     bce:	701a      	strb	r2, [r3, #0]
      break;
     bd0:	e008      	b.n	be4 <RCC_LSEConfig+0x54>

    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
     bd2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
     bd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bda:	f04f 0205 	mov.w	r2, #5
     bde:	701a      	strb	r2, [r3, #0]
      break;
     be0:	e000      	b.n	be4 <RCC_LSEConfig+0x54>

    default:
      break;
     be2:	bf00      	nop
  }
}
     be4:	f107 070c 	add.w	r7, r7, #12
     be8:	46bd      	mov	sp, r7
     bea:	bc80      	pop	{r7}
     bec:	4770      	bx	lr
     bee:	bf00      	nop

00000bf0 <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
     bf0:	b480      	push	{r7}
     bf2:	b083      	sub	sp, #12
     bf4:	af00      	add	r7, sp, #0
     bf6:	4603      	mov	r3, r0
     bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
     bfa:	f44f 6390 	mov.w	r3, #1152	; 0x480
     bfe:	f2c4 2342 	movt	r3, #16962	; 0x4242
     c02:	79fa      	ldrb	r2, [r7, #7]
     c04:	601a      	str	r2, [r3, #0]
}
     c06:	f107 070c 	add.w	r7, r7, #12
     c0a:	46bd      	mov	sp, r7
     c0c:	bc80      	pop	{r7}
     c0e:	4770      	bx	lr

00000c10 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
     c10:	b480      	push	{r7}
     c12:	b083      	sub	sp, #12
     c14:	af00      	add	r7, sp, #0
     c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
     c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c24:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c28:	6a11      	ldr	r1, [r2, #32]
     c2a:	687a      	ldr	r2, [r7, #4]
     c2c:	430a      	orrs	r2, r1
     c2e:	621a      	str	r2, [r3, #32]
}
     c30:	f107 070c 	add.w	r7, r7, #12
     c34:	46bd      	mov	sp, r7
     c36:	bc80      	pop	{r7}
     c38:	4770      	bx	lr
     c3a:	bf00      	nop

00000c3c <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
     c3c:	b480      	push	{r7}
     c3e:	b083      	sub	sp, #12
     c40:	af00      	add	r7, sp, #0
     c42:	4603      	mov	r3, r0
     c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
     c46:	f240 433c 	movw	r3, #1084	; 0x43c
     c4a:	f2c4 2342 	movt	r3, #16962	; 0x4242
     c4e:	79fa      	ldrb	r2, [r7, #7]
     c50:	601a      	str	r2, [r3, #0]
}
     c52:	f107 070c 	add.w	r7, r7, #12
     c56:	46bd      	mov	sp, r7
     c58:	bc80      	pop	{r7}
     c5a:	4770      	bx	lr

00000c5c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using
  *         fractional value for HSE crystal.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
     c5c:	b480      	push	{r7}
     c5e:	b087      	sub	sp, #28
     c60:	af00      	add	r7, sp, #0
     c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
     c64:	f04f 0300 	mov.w	r3, #0
     c68:	617b      	str	r3, [r7, #20]
     c6a:	f04f 0300 	mov.w	r3, #0
     c6e:	613b      	str	r3, [r7, #16]
     c70:	f04f 0300 	mov.w	r3, #0
     c74:	60fb      	str	r3, [r7, #12]
     c76:	f04f 0300 	mov.w	r3, #0
     c7a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
     c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c80:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c84:	685b      	ldr	r3, [r3, #4]
     c86:	f003 030c 	and.w	r3, r3, #12
     c8a:	617b      	str	r3, [r7, #20]

  switch (tmp)
     c8c:	697b      	ldr	r3, [r7, #20]
     c8e:	2b04      	cmp	r3, #4
     c90:	d00a      	beq.n	ca8 <RCC_GetClocksFreq+0x4c>
     c92:	2b08      	cmp	r3, #8
     c94:	d00f      	beq.n	cb6 <RCC_GetClocksFreq+0x5a>
     c96:	2b00      	cmp	r3, #0
     c98:	d14d      	bne.n	d36 <RCC_GetClocksFreq+0xda>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     c9a:	687a      	ldr	r2, [r7, #4]
     c9c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     ca0:	f2c0 037a 	movt	r3, #122	; 0x7a
     ca4:	6013      	str	r3, [r2, #0]
      break;
     ca6:	e04d      	b.n	d44 <RCC_GetClocksFreq+0xe8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
     ca8:	687a      	ldr	r2, [r7, #4]
     caa:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     cae:	f2c0 037a 	movt	r3, #122	; 0x7a
     cb2:	6013      	str	r3, [r2, #0]
      break;
     cb4:	e046      	b.n	d44 <RCC_GetClocksFreq+0xe8>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
     cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cba:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cbe:	685b      	ldr	r3, [r3, #4]
     cc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     cc4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
     cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cca:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cce:	685b      	ldr	r3, [r3, #4]
     cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     cd4:	60fb      	str	r3, [r7, #12]

#ifndef STM32F10X_CL
      pllmull = ( pllmull >> 18) + 2;
     cd6:	693b      	ldr	r3, [r7, #16]
     cd8:	ea4f 4393 	mov.w	r3, r3, lsr #18
     cdc:	f103 0302 	add.w	r3, r3, #2
     ce0:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	2b00      	cmp	r3, #0
     ce6:	d109      	bne.n	cfc <RCC_GetClocksFreq+0xa0>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
     ce8:	693a      	ldr	r2, [r7, #16]
     cea:	f44f 6310 	mov.w	r3, #2304	; 0x900
     cee:	f2c0 033d 	movt	r3, #61	; 0x3d
     cf2:	fb03 f202 	mul.w	r2, r3, r2
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     cfa:	e023      	b.n	d44 <RCC_GetClocksFreq+0xe8>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
     cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d00:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d04:	685b      	ldr	r3, [r3, #4]
     d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     d0a:	2b00      	cmp	r3, #0
     d0c:	d009      	beq.n	d22 <RCC_GetClocksFreq+0xc6>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
     d0e:	693a      	ldr	r2, [r7, #16]
     d10:	f44f 6310 	mov.w	r3, #2304	; 0x900
     d14:	f2c0 033d 	movt	r3, #61	; 0x3d
     d18:	fb03 f202 	mul.w	r2, r3, r2
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     d20:	e010      	b.n	d44 <RCC_GetClocksFreq+0xe8>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
     d22:	693a      	ldr	r2, [r7, #16]
     d24:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     d28:	f2c0 037a 	movt	r3, #122	; 0x7a
     d2c:	fb03 f202 	mul.w	r2, r3, r2
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2;
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;
        }
      }
#endif /* STM32F10X_CL */
      break;
     d34:	e006      	b.n	d44 <RCC_GetClocksFreq+0xe8>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
     d36:	687a      	ldr	r2, [r7, #4]
     d38:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     d3c:	f2c0 037a 	movt	r3, #122	; 0x7a
     d40:	6013      	str	r3, [r2, #0]
      break;
     d42:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
     d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d48:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d4c:	685b      	ldr	r3, [r3, #4]
     d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     d52:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
     d54:	697b      	ldr	r3, [r7, #20]
     d56:	ea4f 1313 	mov.w	r3, r3, lsr #4
     d5a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d5c:	f240 0314 	movw	r3, #20
     d60:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d64:	697a      	ldr	r2, [r7, #20]
     d66:	189b      	adds	r3, r3, r2
     d68:	781b      	ldrb	r3, [r3, #0]
     d6a:	b2db      	uxtb	r3, r3
     d6c:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
     d6e:	687b      	ldr	r3, [r7, #4]
     d70:	681a      	ldr	r2, [r3, #0]
     d72:	68bb      	ldr	r3, [r7, #8]
     d74:	fa22 f203 	lsr.w	r2, r2, r3
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
     d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d80:	f2c4 0302 	movt	r3, #16386	; 0x4002
     d84:	685b      	ldr	r3, [r3, #4]
     d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     d8a:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
     d8c:	697b      	ldr	r3, [r7, #20]
     d8e:	ea4f 2313 	mov.w	r3, r3, lsr #8
     d92:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     d94:	f240 0314 	movw	r3, #20
     d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d9c:	697a      	ldr	r2, [r7, #20]
     d9e:	189b      	adds	r3, r3, r2
     da0:	781b      	ldrb	r3, [r3, #0]
     da2:	b2db      	uxtb	r3, r3
     da4:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	685a      	ldr	r2, [r3, #4]
     daa:	68bb      	ldr	r3, [r7, #8]
     dac:	fa22 f203 	lsr.w	r2, r2, r3
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
     db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     db8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     dbc:	685b      	ldr	r3, [r3, #4]
     dbe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
     dc2:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
     dc4:	697b      	ldr	r3, [r7, #20]
     dc6:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     dca:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
     dcc:	f240 0314 	movw	r3, #20
     dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     dd4:	697a      	ldr	r2, [r7, #20]
     dd6:	189b      	adds	r3, r3, r2
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	b2db      	uxtb	r3, r3
     ddc:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	685a      	ldr	r2, [r3, #4]
     de2:	68bb      	ldr	r3, [r7, #8]
     de4:	fa22 f203 	lsr.w	r2, r2, r3
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
     dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     df4:	685b      	ldr	r3, [r3, #4]
     df6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
     dfa:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
     dfc:	697b      	ldr	r3, [r7, #20]
     dfe:	ea4f 3393 	mov.w	r3, r3, lsr #14
     e02:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
     e04:	f240 0324 	movw	r3, #36	; 0x24
     e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e0c:	697a      	ldr	r2, [r7, #20]
     e0e:	189b      	adds	r3, r3, r2
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	b2db      	uxtb	r3, r3
     e14:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	68da      	ldr	r2, [r3, #12]
     e1a:	68bb      	ldr	r3, [r7, #8]
     e1c:	fbb2 f2f3 	udiv	r2, r2, r3
     e20:	687b      	ldr	r3, [r7, #4]
     e22:	611a      	str	r2, [r3, #16]
}
     e24:	f107 071c 	add.w	r7, r7, #28
     e28:	46bd      	mov	sp, r7
     e2a:	bc80      	pop	{r7}
     e2c:	4770      	bx	lr
     e2e:	bf00      	nop

00000e30 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
     e30:	b480      	push	{r7}
     e32:	b083      	sub	sp, #12
     e34:	af00      	add	r7, sp, #0
     e36:	6078      	str	r0, [r7, #4]
     e38:	460b      	mov	r3, r1
     e3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
     e3c:	78fb      	ldrb	r3, [r7, #3]
     e3e:	2b00      	cmp	r3, #0
     e40:	d00c      	beq.n	e5c <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
     e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e46:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e4e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e52:	6951      	ldr	r1, [r2, #20]
     e54:	687a      	ldr	r2, [r7, #4]
     e56:	430a      	orrs	r2, r1
     e58:	615a      	str	r2, [r3, #20]
     e5a:	e00d      	b.n	e78 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
     e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e60:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     e68:	f2c4 0202 	movt	r2, #16386	; 0x4002
     e6c:	6951      	ldr	r1, [r2, #20]
     e6e:	687a      	ldr	r2, [r7, #4]
     e70:	ea6f 0202 	mvn.w	r2, r2
     e74:	400a      	ands	r2, r1
     e76:	615a      	str	r2, [r3, #20]
  }
}
     e78:	f107 070c 	add.w	r7, r7, #12
     e7c:	46bd      	mov	sp, r7
     e7e:	bc80      	pop	{r7}
     e80:	4770      	bx	lr
     e82:	bf00      	nop

00000e84 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     e84:	b480      	push	{r7}
     e86:	b083      	sub	sp, #12
     e88:	af00      	add	r7, sp, #0
     e8a:	6078      	str	r0, [r7, #4]
     e8c:	460b      	mov	r3, r1
     e8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     e90:	78fb      	ldrb	r3, [r7, #3]
     e92:	2b00      	cmp	r3, #0
     e94:	d00c      	beq.n	eb0 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
     e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     e9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ea2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ea6:	6991      	ldr	r1, [r2, #24]
     ea8:	687a      	ldr	r2, [r7, #4]
     eaa:	430a      	orrs	r2, r1
     eac:	619a      	str	r2, [r3, #24]
     eae:	e00d      	b.n	ecc <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
     eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     eb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     eb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ebc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     ec0:	6991      	ldr	r1, [r2, #24]
     ec2:	687a      	ldr	r2, [r7, #4]
     ec4:	ea6f 0202 	mvn.w	r2, r2
     ec8:	400a      	ands	r2, r1
     eca:	619a      	str	r2, [r3, #24]
  }
}
     ecc:	f107 070c 	add.w	r7, r7, #12
     ed0:	46bd      	mov	sp, r7
     ed2:	bc80      	pop	{r7}
     ed4:	4770      	bx	lr
     ed6:	bf00      	nop

00000ed8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     ed8:	b480      	push	{r7}
     eda:	b083      	sub	sp, #12
     edc:	af00      	add	r7, sp, #0
     ede:	6078      	str	r0, [r7, #4]
     ee0:	460b      	mov	r3, r1
     ee2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ee4:	78fb      	ldrb	r3, [r7, #3]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d00c      	beq.n	f04 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
     eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ef2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ef6:	f2c4 0202 	movt	r2, #16386	; 0x4002
     efa:	69d1      	ldr	r1, [r2, #28]
     efc:	687a      	ldr	r2, [r7, #4]
     efe:	430a      	orrs	r2, r1
     f00:	61da      	str	r2, [r3, #28]
     f02:	e00d      	b.n	f20 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
     f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f08:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f10:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f14:	69d1      	ldr	r1, [r2, #28]
     f16:	687a      	ldr	r2, [r7, #4]
     f18:	ea6f 0202 	mvn.w	r2, r2
     f1c:	400a      	ands	r2, r1
     f1e:	61da      	str	r2, [r3, #28]
  }
}
     f20:	f107 070c 	add.w	r7, r7, #12
     f24:	46bd      	mov	sp, r7
     f26:	bc80      	pop	{r7}
     f28:	4770      	bx	lr
     f2a:	bf00      	nop

00000f2c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
     f2c:	b480      	push	{r7}
     f2e:	b083      	sub	sp, #12
     f30:	af00      	add	r7, sp, #0
     f32:	6078      	str	r0, [r7, #4]
     f34:	460b      	mov	r3, r1
     f36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     f38:	78fb      	ldrb	r3, [r7, #3]
     f3a:	2b00      	cmp	r3, #0
     f3c:	d00c      	beq.n	f58 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
     f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f42:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f4a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f4e:	68d1      	ldr	r1, [r2, #12]
     f50:	687a      	ldr	r2, [r7, #4]
     f52:	430a      	orrs	r2, r1
     f54:	60da      	str	r2, [r3, #12]
     f56:	e00d      	b.n	f74 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
     f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f64:	f2c4 0202 	movt	r2, #16386	; 0x4002
     f68:	68d1      	ldr	r1, [r2, #12]
     f6a:	687a      	ldr	r2, [r7, #4]
     f6c:	ea6f 0202 	mvn.w	r2, r2
     f70:	400a      	ands	r2, r1
     f72:	60da      	str	r2, [r3, #12]
  }
}
     f74:	f107 070c 	add.w	r7, r7, #12
     f78:	46bd      	mov	sp, r7
     f7a:	bc80      	pop	{r7}
     f7c:	4770      	bx	lr
     f7e:	bf00      	nop

00000f80 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
     f80:	b480      	push	{r7}
     f82:	b083      	sub	sp, #12
     f84:	af00      	add	r7, sp, #0
     f86:	6078      	str	r0, [r7, #4]
     f88:	460b      	mov	r3, r1
     f8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     f8c:	78fb      	ldrb	r3, [r7, #3]
     f8e:	2b00      	cmp	r3, #0
     f90:	d00c      	beq.n	fac <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
     f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     f96:	f2c4 0302 	movt	r3, #16386	; 0x4002
     f9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     f9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fa2:	6911      	ldr	r1, [r2, #16]
     fa4:	687a      	ldr	r2, [r7, #4]
     fa6:	430a      	orrs	r2, r1
     fa8:	611a      	str	r2, [r3, #16]
     faa:	e00d      	b.n	fc8 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
     fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     fb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     fb8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     fbc:	6911      	ldr	r1, [r2, #16]
     fbe:	687a      	ldr	r2, [r7, #4]
     fc0:	ea6f 0202 	mvn.w	r2, r2
     fc4:	400a      	ands	r2, r1
     fc6:	611a      	str	r2, [r3, #16]
  }
}
     fc8:	f107 070c 	add.w	r7, r7, #12
     fcc:	46bd      	mov	sp, r7
     fce:	bc80      	pop	{r7}
     fd0:	4770      	bx	lr
     fd2:	bf00      	nop

00000fd4 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
     fd4:	b480      	push	{r7}
     fd6:	b083      	sub	sp, #12
     fd8:	af00      	add	r7, sp, #0
     fda:	4603      	mov	r3, r0
     fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
     fde:	f44f 6388 	mov.w	r3, #1088	; 0x440
     fe2:	f2c4 2342 	movt	r3, #16962	; 0x4242
     fe6:	79fa      	ldrb	r2, [r7, #7]
     fe8:	601a      	str	r2, [r3, #0]
}
     fea:	f107 070c 	add.w	r7, r7, #12
     fee:	46bd      	mov	sp, r7
     ff0:	bc80      	pop	{r7}
     ff2:	4770      	bx	lr

00000ff4 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
     ff4:	b480      	push	{r7}
     ff6:	b083      	sub	sp, #12
     ff8:	af00      	add	r7, sp, #0
     ffa:	4603      	mov	r3, r0
     ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
     ffe:	f04f 034c 	mov.w	r3, #76	; 0x4c
    1002:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1006:	79fa      	ldrb	r2, [r7, #7]
    1008:	601a      	str	r2, [r3, #0]
}
    100a:	f107 070c 	add.w	r7, r7, #12
    100e:	46bd      	mov	sp, r7
    1010:	bc80      	pop	{r7}
    1012:	4770      	bx	lr

00001014 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    1014:	b480      	push	{r7}
    1016:	b083      	sub	sp, #12
    1018:	af00      	add	r7, sp, #0
    101a:	4603      	mov	r3, r0
    101c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    101e:	f241 0307 	movw	r3, #4103	; 0x1007
    1022:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1026:	79fa      	ldrb	r2, [r7, #7]
    1028:	701a      	strb	r2, [r3, #0]
}
    102a:	f107 070c 	add.w	r7, r7, #12
    102e:	46bd      	mov	sp, r7
    1030:	bc80      	pop	{r7}
    1032:	4770      	bx	lr

00001034 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    1034:	b480      	push	{r7}
    1036:	b087      	sub	sp, #28
    1038:	af00      	add	r7, sp, #0
    103a:	4603      	mov	r3, r0
    103c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    103e:	f04f 0300 	mov.w	r3, #0
    1042:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    1044:	f04f 0300 	mov.w	r3, #0
    1048:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    104a:	f04f 0300 	mov.w	r3, #0
    104e:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    1050:	79fb      	ldrb	r3, [r7, #7]
    1052:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1056:	b2db      	uxtb	r3, r3
    1058:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    105a:	68fb      	ldr	r3, [r7, #12]
    105c:	2b01      	cmp	r3, #1
    105e:	d106      	bne.n	106e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
    1060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1064:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1068:	681b      	ldr	r3, [r3, #0]
    106a:	617b      	str	r3, [r7, #20]
    106c:	e00f      	b.n	108e <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    106e:	68fb      	ldr	r3, [r7, #12]
    1070:	2b02      	cmp	r3, #2
    1072:	d106      	bne.n	1082 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
    1074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1078:	f2c4 0302 	movt	r3, #16386	; 0x4002
    107c:	6a1b      	ldr	r3, [r3, #32]
    107e:	617b      	str	r3, [r7, #20]
    1080:	e005      	b.n	108e <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    1082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1086:	f2c4 0302 	movt	r3, #16386	; 0x4002
    108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    108c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    108e:	79fb      	ldrb	r3, [r7, #7]
    1090:	f003 031f 	and.w	r3, r3, #31
    1094:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    1096:	68fb      	ldr	r3, [r7, #12]
    1098:	697a      	ldr	r2, [r7, #20]
    109a:	fa22 f303 	lsr.w	r3, r2, r3
    109e:	f003 0301 	and.w	r3, r3, #1
    10a2:	b2db      	uxtb	r3, r3
    10a4:	2b00      	cmp	r3, #0
    10a6:	d003      	beq.n	10b0 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
    10a8:	f04f 0301 	mov.w	r3, #1
    10ac:	74fb      	strb	r3, [r7, #19]
    10ae:	e002      	b.n	10b6 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
    10b0:	f04f 0300 	mov.w	r3, #0
    10b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    10b6:	7cfb      	ldrb	r3, [r7, #19]
}
    10b8:	4618      	mov	r0, r3
    10ba:	f107 071c 	add.w	r7, r7, #28
    10be:	46bd      	mov	sp, r7
    10c0:	bc80      	pop	{r7}
    10c2:	4770      	bx	lr

000010c4 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    10c4:	b480      	push	{r7}
    10c6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    10c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    10d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
    10d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    10da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    10de:	625a      	str	r2, [r3, #36]	; 0x24
}
    10e0:	46bd      	mov	sp, r7
    10e2:	bc80      	pop	{r7}
    10e4:	4770      	bx	lr
    10e6:	bf00      	nop

000010e8 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    10e8:	b480      	push	{r7}
    10ea:	b085      	sub	sp, #20
    10ec:	af00      	add	r7, sp, #0
    10ee:	4603      	mov	r3, r0
    10f0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    10f2:	f04f 0300 	mov.w	r3, #0
    10f6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    10f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1100:	689a      	ldr	r2, [r3, #8]
    1102:	79fb      	ldrb	r3, [r7, #7]
    1104:	4013      	ands	r3, r2
    1106:	2b00      	cmp	r3, #0
    1108:	d003      	beq.n	1112 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
    110a:	f04f 0301 	mov.w	r3, #1
    110e:	73fb      	strb	r3, [r7, #15]
    1110:	e002      	b.n	1118 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    1112:	f04f 0300 	mov.w	r3, #0
    1116:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1118:	7bfb      	ldrb	r3, [r7, #15]
}
    111a:	4618      	mov	r0, r3
    111c:	f107 0714 	add.w	r7, r7, #20
    1120:	46bd      	mov	sp, r7
    1122:	bc80      	pop	{r7}
    1124:	4770      	bx	lr
    1126:	bf00      	nop

00001128 <RCC_ClearITPendingBit>:
  *
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1128:	b480      	push	{r7}
    112a:	b083      	sub	sp, #12
    112c:	af00      	add	r7, sp, #0
    112e:	4603      	mov	r3, r0
    1130:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    1132:	f241 030a 	movw	r3, #4106	; 0x100a
    1136:	f2c4 0302 	movt	r3, #16386	; 0x4002
    113a:	79fa      	ldrb	r2, [r7, #7]
    113c:	701a      	strb	r2, [r3, #0]
}
    113e:	f107 070c 	add.w	r7, r7, #12
    1142:	46bd      	mov	sp, r7
    1144:	bc80      	pop	{r7}
    1146:	4770      	bx	lr

00001148 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1148:	b580      	push	{r7, lr}
    114a:	b082      	sub	sp, #8
    114c:	af00      	add	r7, sp, #0
    114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1150:	687a      	ldr	r2, [r7, #4]
    1152:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1156:	f2c4 0301 	movt	r3, #16385	; 0x4001
    115a:	429a      	cmp	r2, r3
    115c:	d10c      	bne.n	1178 <GPIO_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    115e:	f04f 0004 	mov.w	r0, #4
    1162:	f04f 0101 	mov.w	r1, #1
    1166:	f7ff fee1 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    116a:	f04f 0004 	mov.w	r0, #4
    116e:	f04f 0100 	mov.w	r1, #0
    1172:	f7ff fedb 	bl	f2c <RCC_APB2PeriphResetCmd>
    1176:	e076      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOB)
    1178:	687a      	ldr	r2, [r7, #4]
    117a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    117e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1182:	429a      	cmp	r2, r3
    1184:	d10c      	bne.n	11a0 <GPIO_DeInit+0x58>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1186:	f04f 0008 	mov.w	r0, #8
    118a:	f04f 0101 	mov.w	r1, #1
    118e:	f7ff fecd 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    1192:	f04f 0008 	mov.w	r0, #8
    1196:	f04f 0100 	mov.w	r1, #0
    119a:	f7ff fec7 	bl	f2c <RCC_APB2PeriphResetCmd>
    119e:	e062      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOC)
    11a0:	687a      	ldr	r2, [r7, #4]
    11a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    11a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11aa:	429a      	cmp	r2, r3
    11ac:	d10c      	bne.n	11c8 <GPIO_DeInit+0x80>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    11ae:	f04f 0010 	mov.w	r0, #16
    11b2:	f04f 0101 	mov.w	r1, #1
    11b6:	f7ff feb9 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    11ba:	f04f 0010 	mov.w	r0, #16
    11be:	f04f 0100 	mov.w	r1, #0
    11c2:	f7ff feb3 	bl	f2c <RCC_APB2PeriphResetCmd>
    11c6:	e04e      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOD)
    11c8:	687a      	ldr	r2, [r7, #4]
    11ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    11ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11d2:	429a      	cmp	r2, r3
    11d4:	d10c      	bne.n	11f0 <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    11d6:	f04f 0020 	mov.w	r0, #32
    11da:	f04f 0101 	mov.w	r1, #1
    11de:	f7ff fea5 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    11e2:	f04f 0020 	mov.w	r0, #32
    11e6:	f04f 0100 	mov.w	r1, #0
    11ea:	f7ff fe9f 	bl	f2c <RCC_APB2PeriphResetCmd>
    11ee:	e03a      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOE)
    11f0:	687a      	ldr	r2, [r7, #4]
    11f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    11f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    11fa:	429a      	cmp	r2, r3
    11fc:	d10c      	bne.n	1218 <GPIO_DeInit+0xd0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    11fe:	f04f 0040 	mov.w	r0, #64	; 0x40
    1202:	f04f 0101 	mov.w	r1, #1
    1206:	f7ff fe91 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    120a:	f04f 0040 	mov.w	r0, #64	; 0x40
    120e:	f04f 0100 	mov.w	r1, #0
    1212:	f7ff fe8b 	bl	f2c <RCC_APB2PeriphResetCmd>
    1216:	e026      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOF)
    1218:	687a      	ldr	r2, [r7, #4]
    121a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    121e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1222:	429a      	cmp	r2, r3
    1224:	d10c      	bne.n	1240 <GPIO_DeInit+0xf8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1226:	f04f 0080 	mov.w	r0, #128	; 0x80
    122a:	f04f 0101 	mov.w	r1, #1
    122e:	f7ff fe7d 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    1232:	f04f 0080 	mov.w	r0, #128	; 0x80
    1236:	f04f 0100 	mov.w	r1, #0
    123a:	f7ff fe77 	bl	f2c <RCC_APB2PeriphResetCmd>
    123e:	e012      	b.n	1266 <GPIO_DeInit+0x11e>
  }
  else
  {
    if (GPIOx == GPIOG)
    1240:	687a      	ldr	r2, [r7, #4]
    1242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1246:	f2c4 0301 	movt	r3, #16385	; 0x4001
    124a:	429a      	cmp	r2, r3
    124c:	d10b      	bne.n	1266 <GPIO_DeInit+0x11e>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    124e:	f44f 7080 	mov.w	r0, #256	; 0x100
    1252:	f04f 0101 	mov.w	r1, #1
    1256:	f7ff fe69 	bl	f2c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    125a:	f44f 7080 	mov.w	r0, #256	; 0x100
    125e:	f04f 0100 	mov.w	r1, #0
    1262:	f7ff fe63 	bl	f2c <RCC_APB2PeriphResetCmd>
    }
  }
}
    1266:	f107 0708 	add.w	r7, r7, #8
    126a:	46bd      	mov	sp, r7
    126c:	bd80      	pop	{r7, pc}
    126e:	bf00      	nop

00001270 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1270:	b580      	push	{r7, lr}
    1272:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1274:	f04f 0001 	mov.w	r0, #1
    1278:	f04f 0101 	mov.w	r1, #1
    127c:	f7ff fe56 	bl	f2c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    1280:	f04f 0001 	mov.w	r0, #1
    1284:	f04f 0100 	mov.w	r1, #0
    1288:	f7ff fe50 	bl	f2c <RCC_APB2PeriphResetCmd>
}
    128c:	bd80      	pop	{r7, pc}
    128e:	bf00      	nop

00001290 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1290:	b480      	push	{r7}
    1292:	b089      	sub	sp, #36	; 0x24
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
    1298:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    129a:	f04f 0300 	mov.w	r3, #0
    129e:	61fb      	str	r3, [r7, #28]
    12a0:	f04f 0300 	mov.w	r3, #0
    12a4:	613b      	str	r3, [r7, #16]
    12a6:	f04f 0300 	mov.w	r3, #0
    12aa:	61bb      	str	r3, [r7, #24]
    12ac:	f04f 0300 	mov.w	r3, #0
    12b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    12b2:	f04f 0300 	mov.w	r3, #0
    12b6:	617b      	str	r3, [r7, #20]
    12b8:	f04f 0300 	mov.w	r3, #0
    12bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    12be:	683b      	ldr	r3, [r7, #0]
    12c0:	78db      	ldrb	r3, [r3, #3]
    12c2:	f003 030f 	and.w	r3, r3, #15
    12c6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    12c8:	683b      	ldr	r3, [r7, #0]
    12ca:	78db      	ldrb	r3, [r3, #3]
    12cc:	f003 0310 	and.w	r3, r3, #16
    12d0:	2b00      	cmp	r3, #0
    12d2:	d004      	beq.n	12de <GPIO_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    12d4:	683b      	ldr	r3, [r7, #0]
    12d6:	789b      	ldrb	r3, [r3, #2]
    12d8:	69fa      	ldr	r2, [r7, #28]
    12da:	4313      	orrs	r3, r2
    12dc:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    12de:	683b      	ldr	r3, [r7, #0]
    12e0:	881b      	ldrh	r3, [r3, #0]
    12e2:	b2db      	uxtb	r3, r3
    12e4:	2b00      	cmp	r3, #0
    12e6:	d04e      	beq.n	1386 <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
    12e8:	687b      	ldr	r3, [r7, #4]
    12ea:	681b      	ldr	r3, [r3, #0]
    12ec:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    12ee:	f04f 0300 	mov.w	r3, #0
    12f2:	61bb      	str	r3, [r7, #24]
    12f4:	e041      	b.n	137a <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
    12f6:	69bb      	ldr	r3, [r7, #24]
    12f8:	f04f 0201 	mov.w	r2, #1
    12fc:	fa02 f303 	lsl.w	r3, r2, r3
    1300:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1302:	683b      	ldr	r3, [r7, #0]
    1304:	881b      	ldrh	r3, [r3, #0]
    1306:	461a      	mov	r2, r3
    1308:	68fb      	ldr	r3, [r7, #12]
    130a:	4013      	ands	r3, r2
    130c:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    130e:	693a      	ldr	r2, [r7, #16]
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	429a      	cmp	r2, r3
    1314:	d12d      	bne.n	1372 <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
    1316:	69bb      	ldr	r3, [r7, #24]
    1318:	ea4f 0383 	mov.w	r3, r3, lsl #2
    131c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    131e:	68fb      	ldr	r3, [r7, #12]
    1320:	f04f 020f 	mov.w	r2, #15
    1324:	fa02 f303 	lsl.w	r3, r2, r3
    1328:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    132a:	68bb      	ldr	r3, [r7, #8]
    132c:	ea6f 0303 	mvn.w	r3, r3
    1330:	697a      	ldr	r2, [r7, #20]
    1332:	4013      	ands	r3, r2
    1334:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	69fa      	ldr	r2, [r7, #28]
    133a:	fa02 f303 	lsl.w	r3, r2, r3
    133e:	697a      	ldr	r2, [r7, #20]
    1340:	4313      	orrs	r3, r2
    1342:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1344:	683b      	ldr	r3, [r7, #0]
    1346:	78db      	ldrb	r3, [r3, #3]
    1348:	2b28      	cmp	r3, #40	; 0x28
    134a:	d107      	bne.n	135c <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    134c:	69bb      	ldr	r3, [r7, #24]
    134e:	f04f 0201 	mov.w	r2, #1
    1352:	fa02 f203 	lsl.w	r2, r2, r3
    1356:	687b      	ldr	r3, [r7, #4]
    1358:	615a      	str	r2, [r3, #20]
    135a:	e00a      	b.n	1372 <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    135c:	683b      	ldr	r3, [r7, #0]
    135e:	78db      	ldrb	r3, [r3, #3]
    1360:	2b48      	cmp	r3, #72	; 0x48
    1362:	d106      	bne.n	1372 <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1364:	69bb      	ldr	r3, [r7, #24]
    1366:	f04f 0201 	mov.w	r2, #1
    136a:	fa02 f203 	lsl.w	r2, r2, r3
    136e:	687b      	ldr	r3, [r7, #4]
    1370:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1372:	69bb      	ldr	r3, [r7, #24]
    1374:	f103 0301 	add.w	r3, r3, #1
    1378:	61bb      	str	r3, [r7, #24]
    137a:	69bb      	ldr	r3, [r7, #24]
    137c:	2b07      	cmp	r3, #7
    137e:	d9ba      	bls.n	12f6 <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1380:	687b      	ldr	r3, [r7, #4]
    1382:	697a      	ldr	r2, [r7, #20]
    1384:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    1386:	683b      	ldr	r3, [r7, #0]
    1388:	881b      	ldrh	r3, [r3, #0]
    138a:	2bff      	cmp	r3, #255	; 0xff
    138c:	d953      	bls.n	1436 <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	685b      	ldr	r3, [r3, #4]
    1392:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1394:	f04f 0300 	mov.w	r3, #0
    1398:	61bb      	str	r3, [r7, #24]
    139a:	e046      	b.n	142a <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    139c:	69bb      	ldr	r3, [r7, #24]
    139e:	f103 0308 	add.w	r3, r3, #8
    13a2:	f04f 0201 	mov.w	r2, #1
    13a6:	fa02 f303 	lsl.w	r3, r2, r3
    13aa:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    13ac:	683b      	ldr	r3, [r7, #0]
    13ae:	881b      	ldrh	r3, [r3, #0]
    13b0:	461a      	mov	r2, r3
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	4013      	ands	r3, r2
    13b6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    13b8:	693a      	ldr	r2, [r7, #16]
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	429a      	cmp	r2, r3
    13be:	d130      	bne.n	1422 <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
    13c0:	69bb      	ldr	r3, [r7, #24]
    13c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    13c6:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	f04f 020f 	mov.w	r2, #15
    13ce:	fa02 f303 	lsl.w	r3, r2, r3
    13d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    13d4:	68bb      	ldr	r3, [r7, #8]
    13d6:	ea6f 0303 	mvn.w	r3, r3
    13da:	697a      	ldr	r2, [r7, #20]
    13dc:	4013      	ands	r3, r2
    13de:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    13e0:	68fb      	ldr	r3, [r7, #12]
    13e2:	69fa      	ldr	r2, [r7, #28]
    13e4:	fa02 f303 	lsl.w	r3, r2, r3
    13e8:	697a      	ldr	r2, [r7, #20]
    13ea:	4313      	orrs	r3, r2
    13ec:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    13ee:	683b      	ldr	r3, [r7, #0]
    13f0:	78db      	ldrb	r3, [r3, #3]
    13f2:	2b28      	cmp	r3, #40	; 0x28
    13f4:	d108      	bne.n	1408 <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    13f6:	69bb      	ldr	r3, [r7, #24]
    13f8:	f103 0308 	add.w	r3, r3, #8
    13fc:	f04f 0201 	mov.w	r2, #1
    1400:	fa02 f203 	lsl.w	r2, r2, r3
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1408:	683b      	ldr	r3, [r7, #0]
    140a:	78db      	ldrb	r3, [r3, #3]
    140c:	2b48      	cmp	r3, #72	; 0x48
    140e:	d108      	bne.n	1422 <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1410:	69bb      	ldr	r3, [r7, #24]
    1412:	f103 0308 	add.w	r3, r3, #8
    1416:	f04f 0201 	mov.w	r2, #1
    141a:	fa02 f203 	lsl.w	r2, r2, r3
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1422:	69bb      	ldr	r3, [r7, #24]
    1424:	f103 0301 	add.w	r3, r3, #1
    1428:	61bb      	str	r3, [r7, #24]
    142a:	69bb      	ldr	r3, [r7, #24]
    142c:	2b07      	cmp	r3, #7
    142e:	d9b5      	bls.n	139c <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	697a      	ldr	r2, [r7, #20]
    1434:	605a      	str	r2, [r3, #4]
  }
}
    1436:	f107 0724 	add.w	r7, r7, #36	; 0x24
    143a:	46bd      	mov	sp, r7
    143c:	bc80      	pop	{r7}
    143e:	4770      	bx	lr

00001440 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1440:	b480      	push	{r7}
    1442:	b083      	sub	sp, #12
    1444:	af00      	add	r7, sp, #0
    1446:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1448:	687b      	ldr	r3, [r7, #4]
    144a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    144e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1450:	687b      	ldr	r3, [r7, #4]
    1452:	f04f 0202 	mov.w	r2, #2
    1456:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1458:	687b      	ldr	r3, [r7, #4]
    145a:	f04f 0204 	mov.w	r2, #4
    145e:	70da      	strb	r2, [r3, #3]
}
    1460:	f107 070c 	add.w	r7, r7, #12
    1464:	46bd      	mov	sp, r7
    1466:	bc80      	pop	{r7}
    1468:	4770      	bx	lr
    146a:	bf00      	nop

0000146c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    146c:	b480      	push	{r7}
    146e:	b085      	sub	sp, #20
    1470:	af00      	add	r7, sp, #0
    1472:	6078      	str	r0, [r7, #4]
    1474:	460b      	mov	r3, r1
    1476:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1478:	f04f 0300 	mov.w	r3, #0
    147c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	689a      	ldr	r2, [r3, #8]
    1482:	887b      	ldrh	r3, [r7, #2]
    1484:	4013      	ands	r3, r2
    1486:	2b00      	cmp	r3, #0
    1488:	d003      	beq.n	1492 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    148a:	f04f 0301 	mov.w	r3, #1
    148e:	73fb      	strb	r3, [r7, #15]
    1490:	e002      	b.n	1498 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1492:	f04f 0300 	mov.w	r3, #0
    1496:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1498:	7bfb      	ldrb	r3, [r7, #15]
}
    149a:	4618      	mov	r0, r3
    149c:	f107 0714 	add.w	r7, r7, #20
    14a0:	46bd      	mov	sp, r7
    14a2:	bc80      	pop	{r7}
    14a4:	4770      	bx	lr
    14a6:	bf00      	nop

000014a8 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    14a8:	b480      	push	{r7}
    14aa:	b083      	sub	sp, #12
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	689b      	ldr	r3, [r3, #8]
    14b4:	b29b      	uxth	r3, r3
}
    14b6:	4618      	mov	r0, r3
    14b8:	f107 070c 	add.w	r7, r7, #12
    14bc:	46bd      	mov	sp, r7
    14be:	bc80      	pop	{r7}
    14c0:	4770      	bx	lr
    14c2:	bf00      	nop

000014c4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    14c4:	b480      	push	{r7}
    14c6:	b085      	sub	sp, #20
    14c8:	af00      	add	r7, sp, #0
    14ca:	6078      	str	r0, [r7, #4]
    14cc:	460b      	mov	r3, r1
    14ce:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    14d0:	f04f 0300 	mov.w	r3, #0
    14d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    14d6:	687b      	ldr	r3, [r7, #4]
    14d8:	68da      	ldr	r2, [r3, #12]
    14da:	887b      	ldrh	r3, [r7, #2]
    14dc:	4013      	ands	r3, r2
    14de:	2b00      	cmp	r3, #0
    14e0:	d003      	beq.n	14ea <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    14e2:	f04f 0301 	mov.w	r3, #1
    14e6:	73fb      	strb	r3, [r7, #15]
    14e8:	e002      	b.n	14f0 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    14ea:	f04f 0300 	mov.w	r3, #0
    14ee:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    14f0:	7bfb      	ldrb	r3, [r7, #15]
}
    14f2:	4618      	mov	r0, r3
    14f4:	f107 0714 	add.w	r7, r7, #20
    14f8:	46bd      	mov	sp, r7
    14fa:	bc80      	pop	{r7}
    14fc:	4770      	bx	lr
    14fe:	bf00      	nop

00001500 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1500:	b480      	push	{r7}
    1502:	b083      	sub	sp, #12
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	68db      	ldr	r3, [r3, #12]
    150c:	b29b      	uxth	r3, r3
}
    150e:	4618      	mov	r0, r3
    1510:	f107 070c 	add.w	r7, r7, #12
    1514:	46bd      	mov	sp, r7
    1516:	bc80      	pop	{r7}
    1518:	4770      	bx	lr
    151a:	bf00      	nop

0000151c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    151c:	b480      	push	{r7}
    151e:	b083      	sub	sp, #12
    1520:	af00      	add	r7, sp, #0
    1522:	6078      	str	r0, [r7, #4]
    1524:	460b      	mov	r3, r1
    1526:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    1528:	887a      	ldrh	r2, [r7, #2]
    152a:	687b      	ldr	r3, [r7, #4]
    152c:	611a      	str	r2, [r3, #16]
}
    152e:	f107 070c 	add.w	r7, r7, #12
    1532:	46bd      	mov	sp, r7
    1534:	bc80      	pop	{r7}
    1536:	4770      	bx	lr

00001538 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1538:	b480      	push	{r7}
    153a:	b083      	sub	sp, #12
    153c:	af00      	add	r7, sp, #0
    153e:	6078      	str	r0, [r7, #4]
    1540:	460b      	mov	r3, r1
    1542:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    1544:	887a      	ldrh	r2, [r7, #2]
    1546:	687b      	ldr	r3, [r7, #4]
    1548:	615a      	str	r2, [r3, #20]
}
    154a:	f107 070c 	add.w	r7, r7, #12
    154e:	46bd      	mov	sp, r7
    1550:	bc80      	pop	{r7}
    1552:	4770      	bx	lr

00001554 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    1554:	b480      	push	{r7}
    1556:	b083      	sub	sp, #12
    1558:	af00      	add	r7, sp, #0
    155a:	6078      	str	r0, [r7, #4]
    155c:	4613      	mov	r3, r2
    155e:	460a      	mov	r2, r1
    1560:	807a      	strh	r2, [r7, #2]
    1562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    1564:	787b      	ldrb	r3, [r7, #1]
    1566:	2b00      	cmp	r3, #0
    1568:	d003      	beq.n	1572 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    156a:	887a      	ldrh	r2, [r7, #2]
    156c:	687b      	ldr	r3, [r7, #4]
    156e:	611a      	str	r2, [r3, #16]
    1570:	e002      	b.n	1578 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    1572:	887a      	ldrh	r2, [r7, #2]
    1574:	687b      	ldr	r3, [r7, #4]
    1576:	615a      	str	r2, [r3, #20]
  }
}
    1578:	f107 070c 	add.w	r7, r7, #12
    157c:	46bd      	mov	sp, r7
    157e:	bc80      	pop	{r7}
    1580:	4770      	bx	lr
    1582:	bf00      	nop

00001584 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1584:	b480      	push	{r7}
    1586:	b083      	sub	sp, #12
    1588:	af00      	add	r7, sp, #0
    158a:	6078      	str	r0, [r7, #4]
    158c:	460b      	mov	r3, r1
    158e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    1590:	887a      	ldrh	r2, [r7, #2]
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	60da      	str	r2, [r3, #12]
}
    1596:	f107 070c 	add.w	r7, r7, #12
    159a:	46bd      	mov	sp, r7
    159c:	bc80      	pop	{r7}
    159e:	4770      	bx	lr

000015a0 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    15a0:	b480      	push	{r7}
    15a2:	b085      	sub	sp, #20
    15a4:	af00      	add	r7, sp, #0
    15a6:	6078      	str	r0, [r7, #4]
    15a8:	460b      	mov	r3, r1
    15aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    15ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    15b0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    15b2:	887b      	ldrh	r3, [r7, #2]
    15b4:	68fa      	ldr	r2, [r7, #12]
    15b6:	4313      	orrs	r3, r2
    15b8:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    15ba:	687b      	ldr	r3, [r7, #4]
    15bc:	68fa      	ldr	r2, [r7, #12]
    15be:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    15c0:	887a      	ldrh	r2, [r7, #2]
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    15c6:	687b      	ldr	r3, [r7, #4]
    15c8:	68fa      	ldr	r2, [r7, #12]
    15ca:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	699b      	ldr	r3, [r3, #24]
    15d0:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	699b      	ldr	r3, [r3, #24]
    15d6:	60fb      	str	r3, [r7, #12]
}
    15d8:	f107 0714 	add.w	r7, r7, #20
    15dc:	46bd      	mov	sp, r7
    15de:	bc80      	pop	{r7}
    15e0:	4770      	bx	lr
    15e2:	bf00      	nop

000015e4 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    15e4:	b480      	push	{r7}
    15e6:	b085      	sub	sp, #20
    15e8:	af00      	add	r7, sp, #0
    15ea:	4602      	mov	r2, r0
    15ec:	460b      	mov	r3, r1
    15ee:	71fa      	strb	r2, [r7, #7]
    15f0:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    15f2:	f04f 0300 	mov.w	r3, #0
    15f6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    15f8:	f04f 0300 	mov.w	r3, #0
    15fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1600:	681b      	ldr	r3, [r3, #0]
    1602:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1604:	68fa      	ldr	r2, [r7, #12]
    1606:	f64f 7380 	movw	r3, #65408	; 0xff80
    160a:	4013      	ands	r3, r2
    160c:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    160e:	79fb      	ldrb	r3, [r7, #7]
    1610:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1614:	68fa      	ldr	r2, [r7, #12]
    1616:	4313      	orrs	r3, r2
    1618:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    161a:	79bb      	ldrb	r3, [r7, #6]
    161c:	68fa      	ldr	r2, [r7, #12]
    161e:	4313      	orrs	r3, r2
    1620:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1622:	f04f 0300 	mov.w	r3, #0
    1626:	f2c4 0301 	movt	r3, #16385	; 0x4001
    162a:	68fa      	ldr	r2, [r7, #12]
    162c:	601a      	str	r2, [r3, #0]
}
    162e:	f107 0714 	add.w	r7, r7, #20
    1632:	46bd      	mov	sp, r7
    1634:	bc80      	pop	{r7}
    1636:	4770      	bx	lr

00001638 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1638:	b480      	push	{r7}
    163a:	b083      	sub	sp, #12
    163c:	af00      	add	r7, sp, #0
    163e:	4603      	mov	r3, r0
    1640:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1642:	f04f 031c 	mov.w	r3, #28
    1646:	f2c4 2320 	movt	r3, #16928	; 0x4220
    164a:	79fa      	ldrb	r2, [r7, #7]
    164c:	601a      	str	r2, [r3, #0]
}
    164e:	f107 070c 	add.w	r7, r7, #12
    1652:	46bd      	mov	sp, r7
    1654:	bc80      	pop	{r7}
    1656:	4770      	bx	lr

00001658 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1658:	b480      	push	{r7}
    165a:	b087      	sub	sp, #28
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
    1660:	460b      	mov	r3, r1
    1662:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1664:	f04f 0300 	mov.w	r3, #0
    1668:	613b      	str	r3, [r7, #16]
    166a:	f04f 0300 	mov.w	r3, #0
    166e:	60fb      	str	r3, [r7, #12]
    1670:	f04f 0300 	mov.w	r3, #0
    1674:	617b      	str	r3, [r7, #20]
    1676:	f04f 0300 	mov.w	r3, #0
    167a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	2b00      	cmp	r3, #0
    1680:	da06      	bge.n	1690 <GPIO_PinRemapConfig+0x38>
  {
    tmpreg = AFIO->MAPR2;
    1682:	f04f 0300 	mov.w	r3, #0
    1686:	f2c4 0301 	movt	r3, #16385	; 0x4001
    168a:	69db      	ldr	r3, [r3, #28]
    168c:	617b      	str	r3, [r7, #20]
    168e:	e005      	b.n	169c <GPIO_PinRemapConfig+0x44>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    1690:	f04f 0300 	mov.w	r3, #0
    1694:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    169c:	687b      	ldr	r3, [r7, #4]
    169e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    16a2:	ea4f 4313 	mov.w	r3, r3, lsr #16
    16a6:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	ea4f 4303 	mov.w	r3, r3, lsl #16
    16ae:	ea4f 4313 	mov.w	r3, r3, lsr #16
    16b2:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    16ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    16be:	d110      	bne.n	16e2 <GPIO_PinRemapConfig+0x8a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    16c0:	697b      	ldr	r3, [r7, #20]
    16c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    16c6:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    16c8:	f04f 0300 	mov.w	r3, #0
    16cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    16d0:	f04f 0200 	mov.w	r2, #0
    16d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    16d8:	6852      	ldr	r2, [r2, #4]
    16da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    16de:	605a      	str	r2, [r3, #4]
    16e0:	e026      	b.n	1730 <GPIO_PinRemapConfig+0xd8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    16e8:	2b00      	cmp	r3, #0
    16ea:	d010      	beq.n	170e <GPIO_PinRemapConfig+0xb6>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    16ec:	68bb      	ldr	r3, [r7, #8]
    16ee:	f04f 0203 	mov.w	r2, #3
    16f2:	fa02 f303 	lsl.w	r3, r2, r3
    16f6:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    16f8:	68fb      	ldr	r3, [r7, #12]
    16fa:	ea6f 0303 	mvn.w	r3, r3
    16fe:	697a      	ldr	r2, [r7, #20]
    1700:	4013      	ands	r3, r2
    1702:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1704:	697b      	ldr	r3, [r7, #20]
    1706:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    170a:	617b      	str	r3, [r7, #20]
    170c:	e010      	b.n	1730 <GPIO_PinRemapConfig+0xd8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1714:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1718:	693a      	ldr	r2, [r7, #16]
    171a:	fa02 f303 	lsl.w	r3, r2, r3
    171e:	ea6f 0303 	mvn.w	r3, r3
    1722:	697a      	ldr	r2, [r7, #20]
    1724:	4013      	ands	r3, r2
    1726:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1728:	697b      	ldr	r3, [r7, #20]
    172a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    172e:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    1730:	78fb      	ldrb	r3, [r7, #3]
    1732:	2b00      	cmp	r3, #0
    1734:	d00a      	beq.n	174c <GPIO_PinRemapConfig+0xf4>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	ea4f 5353 	mov.w	r3, r3, lsr #21
    173c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1740:	693a      	ldr	r2, [r7, #16]
    1742:	fa02 f303 	lsl.w	r3, r2, r3
    1746:	697a      	ldr	r2, [r7, #20]
    1748:	4313      	orrs	r3, r2
    174a:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    174c:	687b      	ldr	r3, [r7, #4]
    174e:	2b00      	cmp	r3, #0
    1750:	da06      	bge.n	1760 <GPIO_PinRemapConfig+0x108>
  {
    AFIO->MAPR2 = tmpreg;
    1752:	f04f 0300 	mov.w	r3, #0
    1756:	f2c4 0301 	movt	r3, #16385	; 0x4001
    175a:	697a      	ldr	r2, [r7, #20]
    175c:	61da      	str	r2, [r3, #28]
    175e:	e005      	b.n	176c <GPIO_PinRemapConfig+0x114>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    1760:	f04f 0300 	mov.w	r3, #0
    1764:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1768:	697a      	ldr	r2, [r7, #20]
    176a:	605a      	str	r2, [r3, #4]
  }
}
    176c:	f107 071c 	add.w	r7, r7, #28
    1770:	46bd      	mov	sp, r7
    1772:	bc80      	pop	{r7}
    1774:	4770      	bx	lr
    1776:	bf00      	nop

00001778 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1778:	b490      	push	{r4, r7}
    177a:	b084      	sub	sp, #16
    177c:	af00      	add	r7, sp, #0
    177e:	4602      	mov	r2, r0
    1780:	460b      	mov	r3, r1
    1782:	71fa      	strb	r2, [r7, #7]
    1784:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1786:	f04f 0300 	mov.w	r3, #0
    178a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    178c:	79bb      	ldrb	r3, [r7, #6]
    178e:	f003 0303 	and.w	r3, r3, #3
    1792:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1796:	f04f 020f 	mov.w	r2, #15
    179a:	fa02 f303 	lsl.w	r3, r2, r3
    179e:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    17a0:	f04f 0300 	mov.w	r3, #0
    17a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17a8:	79ba      	ldrb	r2, [r7, #6]
    17aa:	ea4f 0292 	mov.w	r2, r2, lsr #2
    17ae:	b2d2      	uxtb	r2, r2
    17b0:	4610      	mov	r0, r2
    17b2:	f04f 0200 	mov.w	r2, #0
    17b6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    17ba:	79b9      	ldrb	r1, [r7, #6]
    17bc:	ea4f 0191 	mov.w	r1, r1, lsr #2
    17c0:	b2c9      	uxtb	r1, r1
    17c2:	f101 0102 	add.w	r1, r1, #2
    17c6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    17ca:	68fa      	ldr	r2, [r7, #12]
    17cc:	ea6f 0202 	mvn.w	r2, r2
    17d0:	4011      	ands	r1, r2
    17d2:	f100 0202 	add.w	r2, r0, #2
    17d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    17da:	f04f 0300 	mov.w	r3, #0
    17de:	f2c4 0301 	movt	r3, #16385	; 0x4001
    17e2:	79ba      	ldrb	r2, [r7, #6]
    17e4:	ea4f 0292 	mov.w	r2, r2, lsr #2
    17e8:	b2d2      	uxtb	r2, r2
    17ea:	4610      	mov	r0, r2
    17ec:	f04f 0200 	mov.w	r2, #0
    17f0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    17f4:	79b9      	ldrb	r1, [r7, #6]
    17f6:	ea4f 0191 	mov.w	r1, r1, lsr #2
    17fa:	b2c9      	uxtb	r1, r1
    17fc:	f101 0102 	add.w	r1, r1, #2
    1800:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1804:	79fc      	ldrb	r4, [r7, #7]
    1806:	79ba      	ldrb	r2, [r7, #6]
    1808:	f002 0203 	and.w	r2, r2, #3
    180c:	ea4f 0282 	mov.w	r2, r2, lsl #2
    1810:	fa04 f202 	lsl.w	r2, r4, r2
    1814:	4311      	orrs	r1, r2
    1816:	f100 0202 	add.w	r2, r0, #2
    181a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    181e:	f107 0710 	add.w	r7, r7, #16
    1822:	46bd      	mov	sp, r7
    1824:	bc90      	pop	{r4, r7}
    1826:	4770      	bx	lr

00001828 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    1828:	b480      	push	{r7}
    182a:	b083      	sub	sp, #12
    182c:	af00      	add	r7, sp, #0
    182e:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1830:	f04f 03dc 	mov.w	r3, #220	; 0xdc
    1834:	f2c4 2320 	movt	r3, #16928	; 0x4220
    1838:	687a      	ldr	r2, [r7, #4]
    183a:	601a      	str	r2, [r3, #0]
}
    183c:	f107 070c 	add.w	r7, r7, #12
    1840:	46bd      	mov	sp, r7
    1842:	bc80      	pop	{r7}
    1844:	4770      	bx	lr
    1846:	bf00      	nop

00001848 <USART_DeInit>:
  *   This parameter can be one of the following values:
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    1848:	b580      	push	{r7, lr}
    184a:	b082      	sub	sp, #8
    184c:	af00      	add	r7, sp, #0
    184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    1850:	687a      	ldr	r2, [r7, #4]
    1852:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    1856:	f2c4 0301 	movt	r3, #16385	; 0x4001
    185a:	429a      	cmp	r2, r3
    185c:	d10c      	bne.n	1878 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    185e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1862:	f04f 0101 	mov.w	r1, #1
    1866:	f7ff fb61 	bl	f2c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    186a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    186e:	f04f 0100 	mov.w	r1, #0
    1872:	f7ff fb5b 	bl	f2c <RCC_APB2PeriphResetCmd>
    1876:	e04e      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
    1878:	687a      	ldr	r2, [r7, #4]
    187a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    187e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    1882:	429a      	cmp	r2, r3
    1884:	d10c      	bne.n	18a0 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    1886:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    188a:	f04f 0101 	mov.w	r1, #1
    188e:	f7ff fb77 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    1892:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1896:	f04f 0100 	mov.w	r1, #0
    189a:	f7ff fb71 	bl	f80 <RCC_APB1PeriphResetCmd>
    189e:	e03a      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
    18a0:	687a      	ldr	r2, [r7, #4]
    18a2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    18a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18aa:	429a      	cmp	r2, r3
    18ac:	d10c      	bne.n	18c8 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    18ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    18b2:	f04f 0101 	mov.w	r1, #1
    18b6:	f7ff fb63 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    18ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    18be:	f04f 0100 	mov.w	r1, #0
    18c2:	f7ff fb5d 	bl	f80 <RCC_APB1PeriphResetCmd>
    18c6:	e026      	b.n	1916 <USART_DeInit+0xce>
  }
  else if (USARTx == UART4)
    18c8:	687a      	ldr	r2, [r7, #4]
    18ca:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    18ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18d2:	429a      	cmp	r2, r3
    18d4:	d10c      	bne.n	18f0 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    18d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    18da:	f04f 0101 	mov.w	r1, #1
    18de:	f7ff fb4f 	bl	f80 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    18e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    18e6:	f04f 0100 	mov.w	r1, #0
    18ea:	f7ff fb49 	bl	f80 <RCC_APB1PeriphResetCmd>
    18ee:	e012      	b.n	1916 <USART_DeInit+0xce>
  }
  else
  {
    if (USARTx == UART5)
    18f0:	687a      	ldr	r2, [r7, #4]
    18f2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    18f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    18fa:	429a      	cmp	r2, r3
    18fc:	d10b      	bne.n	1916 <USART_DeInit+0xce>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    18fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1902:	f04f 0101 	mov.w	r1, #1
    1906:	f7ff fb3b 	bl	f80 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    190a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    190e:	f04f 0100 	mov.w	r1, #0
    1912:	f7ff fb35 	bl	f80 <RCC_APB1PeriphResetCmd>
    }
  }
}
    1916:	f107 0708 	add.w	r7, r7, #8
    191a:	46bd      	mov	sp, r7
    191c:	bd80      	pop	{r7, pc}
    191e:	bf00      	nop

00001920 <USART_Init>:
  *         that contains the configuration information for the specified USART
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    1920:	b580      	push	{r7, lr}
    1922:	b08c      	sub	sp, #48	; 0x30
    1924:	af00      	add	r7, sp, #0
    1926:	6078      	str	r0, [r7, #4]
    1928:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    192a:	f04f 0300 	mov.w	r3, #0
    192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1930:	f04f 0300 	mov.w	r3, #0
    1934:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    1936:	f04f 0300 	mov.w	r3, #0
    193a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    193c:	f04f 0300 	mov.w	r3, #0
    1940:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    1942:	f04f 0300 	mov.w	r3, #0
    1946:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	8a1b      	ldrh	r3, [r3, #16]
    1950:	b29b      	uxth	r3, r3
    1952:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    1954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1956:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    195a:	4013      	ands	r3, r2
    195c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    195e:	683b      	ldr	r3, [r7, #0]
    1960:	88db      	ldrh	r3, [r3, #6]
    1962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1964:	4313      	orrs	r3, r2
    1966:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    196a:	b29a      	uxth	r2, r3
    196c:	687b      	ldr	r3, [r7, #4]
    196e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	899b      	ldrh	r3, [r3, #12]
    1974:	b29b      	uxth	r3, r3
    1976:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    1978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    197a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    197e:	4013      	ands	r3, r2
    1980:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1982:	683b      	ldr	r3, [r7, #0]
    1984:	889a      	ldrh	r2, [r3, #4]
    1986:	683b      	ldr	r3, [r7, #0]
    1988:	891b      	ldrh	r3, [r3, #8]
    198a:	4313      	orrs	r3, r2
    198c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    198e:	683b      	ldr	r3, [r7, #0]
    1990:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    1992:	4313      	orrs	r3, r2
    1994:	b29b      	uxth	r3, r3
    1996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1998:	4313      	orrs	r3, r2
    199a:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    199e:	b29a      	uxth	r2, r3
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = USARTx->CR3;
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	8a9b      	ldrh	r3, [r3, #20]
    19a8:	b29b      	uxth	r3, r3
    19aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    19ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    19ae:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    19b2:	4013      	ands	r3, r2
    19b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    19b6:	683b      	ldr	r3, [r7, #0]
    19b8:	899b      	ldrh	r3, [r3, #12]
    19ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    19bc:	4313      	orrs	r3, r2
    19be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    19c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    19c2:	b29a      	uxth	r2, r3
    19c4:	687b      	ldr	r3, [r7, #4]
    19c6:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    19c8:	f107 0308 	add.w	r3, r7, #8
    19cc:	4618      	mov	r0, r3
    19ce:	f7ff f945 	bl	c5c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    19d2:	69fa      	ldr	r2, [r7, #28]
    19d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    19d8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    19dc:	429a      	cmp	r2, r3
    19de:	d102      	bne.n	19e6 <USART_Init+0xc6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    19e0:	697b      	ldr	r3, [r7, #20]
    19e2:	62bb      	str	r3, [r7, #40]	; 0x28
    19e4:	e001      	b.n	19ea <USART_Init+0xca>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    19e6:	693b      	ldr	r3, [r7, #16]
    19e8:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    19ea:	687b      	ldr	r3, [r7, #4]
    19ec:	899b      	ldrh	r3, [r3, #12]
    19ee:	b29b      	uxth	r3, r3
    19f0:	b29b      	uxth	r3, r3
    19f2:	b21b      	sxth	r3, r3
    19f4:	2b00      	cmp	r3, #0
    19f6:	da0f      	bge.n	1a18 <USART_Init+0xf8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));
    19f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    19fa:	4613      	mov	r3, r2
    19fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a00:	189b      	adds	r3, r3, r2
    1a02:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1a06:	189a      	adds	r2, r3, r2
    1a08:	683b      	ldr	r3, [r7, #0]
    1a0a:	681b      	ldr	r3, [r3, #0]
    1a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    1a10:	fbb2 f3f3 	udiv	r3, r2, r3
    1a14:	627b      	str	r3, [r7, #36]	; 0x24
    1a16:	e00e      	b.n	1a36 <USART_Init+0x116>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    1a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1a1a:	4613      	mov	r3, r2
    1a1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a20:	189b      	adds	r3, r3, r2
    1a22:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1a26:	189a      	adds	r2, r3, r2
    1a28:	683b      	ldr	r3, [r7, #0]
    1a2a:	681b      	ldr	r3, [r3, #0]
    1a2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1a30:	fbb2 f3f3 	udiv	r3, r2, r3
    1a34:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    1a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a38:	f248 531f 	movw	r3, #34079	; 0x851f
    1a3c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1a40:	fba3 1302 	umull	r1, r3, r3, r2
    1a44:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1a48:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    1a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1a50:	ea4f 1313 	mov.w	r3, r3, lsr #4
    1a54:	f04f 0264 	mov.w	r2, #100	; 0x64
    1a58:	fb02 f303 	mul.w	r3, r2, r3
    1a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1a5e:	1ad3      	subs	r3, r2, r3
    1a60:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    1a62:	687b      	ldr	r3, [r7, #4]
    1a64:	899b      	ldrh	r3, [r3, #12]
    1a66:	b29b      	uxth	r3, r3
    1a68:	b29b      	uxth	r3, r3
    1a6a:	b21b      	sxth	r3, r3
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	da12      	bge.n	1a96 <USART_Init+0x176>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    1a70:	6a3b      	ldr	r3, [r7, #32]
    1a72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1a76:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1a7a:	f248 531f 	movw	r3, #34079	; 0x851f
    1a7e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1a82:	fba3 1302 	umull	r1, r3, r3, r2
    1a86:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1a8a:	f003 0307 	and.w	r3, r3, #7
    1a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1a90:	4313      	orrs	r3, r2
    1a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    1a94:	e011      	b.n	1aba <USART_Init+0x19a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    1a96:	6a3b      	ldr	r3, [r7, #32]
    1a98:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1a9c:	f103 0232 	add.w	r2, r3, #50	; 0x32
    1aa0:	f248 531f 	movw	r3, #34079	; 0x851f
    1aa4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    1aa8:	fba3 1302 	umull	r1, r3, r3, r2
    1aac:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1ab0:	f003 030f 	and.w	r3, r3, #15
    1ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ab6:	4313      	orrs	r3, r2
    1ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    1aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1abc:	b29a      	uxth	r2, r3
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	811a      	strh	r2, [r3, #8]
}
    1ac2:	f107 0730 	add.w	r7, r7, #48	; 0x30
    1ac6:	46bd      	mov	sp, r7
    1ac8:	bd80      	pop	{r7, pc}
    1aca:	bf00      	nop

00001acc <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    1acc:	b480      	push	{r7}
    1ace:	b083      	sub	sp, #12
    1ad0:	af00      	add	r7, sp, #0
    1ad2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    1ad4:	687b      	ldr	r3, [r7, #4]
    1ad6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    1ada:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	f04f 0200 	mov.w	r2, #0
    1ae2:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	f04f 0200 	mov.w	r2, #0
    1aea:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    1aec:	687b      	ldr	r3, [r7, #4]
    1aee:	f04f 0200 	mov.w	r2, #0
    1af2:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	f04f 020c 	mov.w	r2, #12
    1afa:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	f04f 0200 	mov.w	r2, #0
    1b02:	819a      	strh	r2, [r3, #12]
}
    1b04:	f107 070c 	add.w	r7, r7, #12
    1b08:	46bd      	mov	sp, r7
    1b0a:	bc80      	pop	{r7}
    1b0c:	4770      	bx	lr
    1b0e:	bf00      	nop

00001b10 <USART_ClockInit>:
  *         USART peripheral.
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1b10:	b480      	push	{r7}
    1b12:	b085      	sub	sp, #20
    1b14:	af00      	add	r7, sp, #0
    1b16:	6078      	str	r0, [r7, #4]
    1b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    1b1a:	f04f 0300 	mov.w	r3, #0
    1b1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    1b20:	687b      	ldr	r3, [r7, #4]
    1b22:	8a1b      	ldrh	r3, [r3, #16]
    1b24:	b29b      	uxth	r3, r3
    1b26:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    1b28:	68fa      	ldr	r2, [r7, #12]
    1b2a:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    1b2e:	4013      	ands	r3, r2
    1b30:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1b32:	683b      	ldr	r3, [r7, #0]
    1b34:	881a      	ldrh	r2, [r3, #0]
    1b36:	683b      	ldr	r3, [r7, #0]
    1b38:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    1b3a:	4313      	orrs	r3, r2
    1b3c:	b29a      	uxth	r2, r3
    1b3e:	683b      	ldr	r3, [r7, #0]
    1b40:	889b      	ldrh	r3, [r3, #4]
    1b42:	4313      	orrs	r3, r2
    1b44:	b29a      	uxth	r2, r3
    1b46:	683b      	ldr	r3, [r7, #0]
    1b48:	88db      	ldrh	r3, [r3, #6]
    1b4a:	4313      	orrs	r3, r2
    1b4c:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    1b4e:	68fa      	ldr	r2, [r7, #12]
    1b50:	4313      	orrs	r3, r2
    1b52:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    1b54:	68fb      	ldr	r3, [r7, #12]
    1b56:	b29a      	uxth	r2, r3
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	821a      	strh	r2, [r3, #16]
}
    1b5c:	f107 0714 	add.w	r7, r7, #20
    1b60:	46bd      	mov	sp, r7
    1b62:	bc80      	pop	{r7}
    1b64:	4770      	bx	lr
    1b66:	bf00      	nop

00001b68 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    1b68:	b480      	push	{r7}
    1b6a:	b083      	sub	sp, #12
    1b6c:	af00      	add	r7, sp, #0
    1b6e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    1b70:	687b      	ldr	r3, [r7, #4]
    1b72:	f04f 0200 	mov.w	r2, #0
    1b76:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    1b78:	687b      	ldr	r3, [r7, #4]
    1b7a:	f04f 0200 	mov.w	r2, #0
    1b7e:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	f04f 0200 	mov.w	r2, #0
    1b86:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	f04f 0200 	mov.w	r2, #0
    1b8e:	80da      	strh	r2, [r3, #6]
}
    1b90:	f107 070c 	add.w	r7, r7, #12
    1b94:	46bd      	mov	sp, r7
    1b96:	bc80      	pop	{r7}
    1b98:	4770      	bx	lr
    1b9a:	bf00      	nop

00001b9c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1b9c:	b480      	push	{r7}
    1b9e:	b083      	sub	sp, #12
    1ba0:	af00      	add	r7, sp, #0
    1ba2:	6078      	str	r0, [r7, #4]
    1ba4:	460b      	mov	r3, r1
    1ba6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1ba8:	78fb      	ldrb	r3, [r7, #3]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d008      	beq.n	1bc0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    1bae:	687b      	ldr	r3, [r7, #4]
    1bb0:	899b      	ldrh	r3, [r3, #12]
    1bb2:	b29b      	uxth	r3, r3
    1bb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1bb8:	b29a      	uxth	r2, r3
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	819a      	strh	r2, [r3, #12]
    1bbe:	e007      	b.n	1bd0 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    1bc0:	687b      	ldr	r3, [r7, #4]
    1bc2:	899b      	ldrh	r3, [r3, #12]
    1bc4:	b29b      	uxth	r3, r3
    1bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1bca:	b29a      	uxth	r2, r3
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	819a      	strh	r2, [r3, #12]
  }
}
    1bd0:	f107 070c 	add.w	r7, r7, #12
    1bd4:	46bd      	mov	sp, r7
    1bd6:	bc80      	pop	{r7}
    1bd8:	4770      	bx	lr
    1bda:	bf00      	nop

00001bdc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    1bdc:	b480      	push	{r7}
    1bde:	b087      	sub	sp, #28
    1be0:	af00      	add	r7, sp, #0
    1be2:	6078      	str	r0, [r7, #4]
    1be4:	4613      	mov	r3, r2
    1be6:	460a      	mov	r2, r1
    1be8:	807a      	strh	r2, [r7, #2]
    1bea:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    1bec:	f04f 0300 	mov.w	r3, #0
    1bf0:	613b      	str	r3, [r7, #16]
    1bf2:	f04f 0300 	mov.w	r3, #0
    1bf6:	60fb      	str	r3, [r7, #12]
    1bf8:	f04f 0300 	mov.w	r3, #0
    1bfc:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    1bfe:	f04f 0300 	mov.w	r3, #0
    1c02:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    1c04:	687b      	ldr	r3, [r7, #4]
    1c06:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    1c08:	887b      	ldrh	r3, [r7, #2]
    1c0a:	b2db      	uxtb	r3, r3
    1c0c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1c10:	b2db      	uxtb	r3, r3
    1c12:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    1c14:	887b      	ldrh	r3, [r7, #2]
    1c16:	f003 031f 	and.w	r3, r3, #31
    1c1a:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    1c1c:	68fb      	ldr	r3, [r7, #12]
    1c1e:	f04f 0201 	mov.w	r2, #1
    1c22:	fa02 f303 	lsl.w	r3, r2, r3
    1c26:	60bb      	str	r3, [r7, #8]

  if (usartreg == 0x01) /* The IT is in CR1 register */
    1c28:	693b      	ldr	r3, [r7, #16]
    1c2a:	2b01      	cmp	r3, #1
    1c2c:	d104      	bne.n	1c38 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    1c2e:	697b      	ldr	r3, [r7, #20]
    1c30:	f103 030c 	add.w	r3, r3, #12
    1c34:	617b      	str	r3, [r7, #20]
    1c36:	e00b      	b.n	1c50 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    1c38:	693b      	ldr	r3, [r7, #16]
    1c3a:	2b02      	cmp	r3, #2
    1c3c:	d104      	bne.n	1c48 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    1c3e:	697b      	ldr	r3, [r7, #20]
    1c40:	f103 0310 	add.w	r3, r3, #16
    1c44:	617b      	str	r3, [r7, #20]
    1c46:	e003      	b.n	1c50 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14;
    1c48:	697b      	ldr	r3, [r7, #20]
    1c4a:	f103 0314 	add.w	r3, r3, #20
    1c4e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    1c50:	787b      	ldrb	r3, [r7, #1]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d006      	beq.n	1c64 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    1c56:	697b      	ldr	r3, [r7, #20]
    1c58:	697a      	ldr	r2, [r7, #20]
    1c5a:	6811      	ldr	r1, [r2, #0]
    1c5c:	68ba      	ldr	r2, [r7, #8]
    1c5e:	430a      	orrs	r2, r1
    1c60:	601a      	str	r2, [r3, #0]
    1c62:	e007      	b.n	1c74 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    1c64:	697b      	ldr	r3, [r7, #20]
    1c66:	697a      	ldr	r2, [r7, #20]
    1c68:	6811      	ldr	r1, [r2, #0]
    1c6a:	68ba      	ldr	r2, [r7, #8]
    1c6c:	ea6f 0202 	mvn.w	r2, r2
    1c70:	400a      	ands	r2, r1
    1c72:	601a      	str	r2, [r3, #0]
  }
}
    1c74:	f107 071c 	add.w	r7, r7, #28
    1c78:	46bd      	mov	sp, r7
    1c7a:	bc80      	pop	{r7}
    1c7c:	4770      	bx	lr
    1c7e:	bf00      	nop

00001c80 <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    1c80:	b480      	push	{r7}
    1c82:	b083      	sub	sp, #12
    1c84:	af00      	add	r7, sp, #0
    1c86:	6078      	str	r0, [r7, #4]
    1c88:	4613      	mov	r3, r2
    1c8a:	460a      	mov	r2, r1
    1c8c:	807a      	strh	r2, [r7, #2]
    1c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1c90:	787b      	ldrb	r3, [r7, #1]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d008      	beq.n	1ca8 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    1c96:	687b      	ldr	r3, [r7, #4]
    1c98:	8a9b      	ldrh	r3, [r3, #20]
    1c9a:	b29a      	uxth	r2, r3
    1c9c:	887b      	ldrh	r3, [r7, #2]
    1c9e:	4313      	orrs	r3, r2
    1ca0:	b29a      	uxth	r2, r3
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	829a      	strh	r2, [r3, #20]
    1ca6:	e00a      	b.n	1cbe <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	8a9b      	ldrh	r3, [r3, #20]
    1cac:	b29a      	uxth	r2, r3
    1cae:	887b      	ldrh	r3, [r7, #2]
    1cb0:	ea6f 0303 	mvn.w	r3, r3
    1cb4:	b29b      	uxth	r3, r3
    1cb6:	4013      	ands	r3, r2
    1cb8:	b29a      	uxth	r2, r3
    1cba:	687b      	ldr	r3, [r7, #4]
    1cbc:	829a      	strh	r2, [r3, #20]
  }
}
    1cbe:	f107 070c 	add.w	r7, r7, #12
    1cc2:	46bd      	mov	sp, r7
    1cc4:	bc80      	pop	{r7}
    1cc6:	4770      	bx	lr

00001cc8 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    1cc8:	b480      	push	{r7}
    1cca:	b083      	sub	sp, #12
    1ccc:	af00      	add	r7, sp, #0
    1cce:	6078      	str	r0, [r7, #4]
    1cd0:	460b      	mov	r3, r1
    1cd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address));

  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    1cd4:	687b      	ldr	r3, [r7, #4]
    1cd6:	8a1b      	ldrh	r3, [r3, #16]
    1cd8:	b29b      	uxth	r3, r3
    1cda:	f023 030f 	bic.w	r3, r3, #15
    1cde:	b29a      	uxth	r2, r3
    1ce0:	687b      	ldr	r3, [r7, #4]
    1ce2:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    1ce4:	687b      	ldr	r3, [r7, #4]
    1ce6:	8a1b      	ldrh	r3, [r3, #16]
    1ce8:	b29a      	uxth	r2, r3
    1cea:	78fb      	ldrb	r3, [r7, #3]
    1cec:	b29b      	uxth	r3, r3
    1cee:	4313      	orrs	r3, r2
    1cf0:	b29a      	uxth	r2, r3
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	821a      	strh	r2, [r3, #16]
}
    1cf6:	f107 070c 	add.w	r7, r7, #12
    1cfa:	46bd      	mov	sp, r7
    1cfc:	bc80      	pop	{r7}
    1cfe:	4770      	bx	lr

00001d00 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    1d00:	b480      	push	{r7}
    1d02:	b083      	sub	sp, #12
    1d04:	af00      	add	r7, sp, #0
    1d06:	6078      	str	r0, [r7, #4]
    1d08:	460b      	mov	r3, r1
    1d0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= CR1_WAKE_Mask;
    1d0c:	687b      	ldr	r3, [r7, #4]
    1d0e:	899b      	ldrh	r3, [r3, #12]
    1d10:	b29b      	uxth	r3, r3
    1d12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    1d16:	b29a      	uxth	r2, r3
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	899b      	ldrh	r3, [r3, #12]
    1d20:	b29a      	uxth	r2, r3
    1d22:	887b      	ldrh	r3, [r7, #2]
    1d24:	4313      	orrs	r3, r2
    1d26:	b29a      	uxth	r2, r3
    1d28:	687b      	ldr	r3, [r7, #4]
    1d2a:	819a      	strh	r2, [r3, #12]
}
    1d2c:	f107 070c 	add.w	r7, r7, #12
    1d30:	46bd      	mov	sp, r7
    1d32:	bc80      	pop	{r7}
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop

00001d38 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1d38:	b480      	push	{r7}
    1d3a:	b083      	sub	sp, #12
    1d3c:	af00      	add	r7, sp, #0
    1d3e:	6078      	str	r0, [r7, #4]
    1d40:	460b      	mov	r3, r1
    1d42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1d44:	78fb      	ldrb	r3, [r7, #3]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d008      	beq.n	1d5c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    1d4a:	687b      	ldr	r3, [r7, #4]
    1d4c:	899b      	ldrh	r3, [r3, #12]
    1d4e:	b29b      	uxth	r3, r3
    1d50:	f043 0302 	orr.w	r3, r3, #2
    1d54:	b29a      	uxth	r2, r3
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	819a      	strh	r2, [r3, #12]
    1d5a:	e007      	b.n	1d6c <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    1d5c:	687b      	ldr	r3, [r7, #4]
    1d5e:	899b      	ldrh	r3, [r3, #12]
    1d60:	b29b      	uxth	r3, r3
    1d62:	f023 0302 	bic.w	r3, r3, #2
    1d66:	b29a      	uxth	r2, r3
    1d68:	687b      	ldr	r3, [r7, #4]
    1d6a:	819a      	strh	r2, [r3, #12]
  }
}
    1d6c:	f107 070c 	add.w	r7, r7, #12
    1d70:	46bd      	mov	sp, r7
    1d72:	bc80      	pop	{r7}
    1d74:	4770      	bx	lr
    1d76:	bf00      	nop

00001d78 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    1d78:	b480      	push	{r7}
    1d7a:	b083      	sub	sp, #12
    1d7c:	af00      	add	r7, sp, #0
    1d7e:	6078      	str	r0, [r7, #4]
    1d80:	460b      	mov	r3, r1
    1d82:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= CR2_LBDL_Mask;
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	8a1b      	ldrh	r3, [r3, #16]
    1d88:	b29b      	uxth	r3, r3
    1d8a:	f023 0320 	bic.w	r3, r3, #32
    1d8e:	b29a      	uxth	r2, r3
    1d90:	687b      	ldr	r3, [r7, #4]
    1d92:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	8a1b      	ldrh	r3, [r3, #16]
    1d98:	b29a      	uxth	r2, r3
    1d9a:	887b      	ldrh	r3, [r7, #2]
    1d9c:	4313      	orrs	r3, r2
    1d9e:	b29a      	uxth	r2, r3
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	821a      	strh	r2, [r3, #16]
}
    1da4:	f107 070c 	add.w	r7, r7, #12
    1da8:	46bd      	mov	sp, r7
    1daa:	bc80      	pop	{r7}
    1dac:	4770      	bx	lr
    1dae:	bf00      	nop

00001db0 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1db0:	b480      	push	{r7}
    1db2:	b083      	sub	sp, #12
    1db4:	af00      	add	r7, sp, #0
    1db6:	6078      	str	r0, [r7, #4]
    1db8:	460b      	mov	r3, r1
    1dba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1dbc:	78fb      	ldrb	r3, [r7, #3]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d008      	beq.n	1dd4 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	8a1b      	ldrh	r3, [r3, #16]
    1dc6:	b29b      	uxth	r3, r3
    1dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1dcc:	b29a      	uxth	r2, r3
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	821a      	strh	r2, [r3, #16]
    1dd2:	e007      	b.n	1de4 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	8a1b      	ldrh	r3, [r3, #16]
    1dd8:	b29b      	uxth	r3, r3
    1dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1dde:	b29a      	uxth	r2, r3
    1de0:	687b      	ldr	r3, [r7, #4]
    1de2:	821a      	strh	r2, [r3, #16]
  }
}
    1de4:	f107 070c 	add.w	r7, r7, #12
    1de8:	46bd      	mov	sp, r7
    1dea:	bc80      	pop	{r7}
    1dec:	4770      	bx	lr
    1dee:	bf00      	nop

00001df0 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    1df0:	b480      	push	{r7}
    1df2:	b083      	sub	sp, #12
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
    1df8:	460b      	mov	r3, r1
    1dfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    1dfc:	887b      	ldrh	r3, [r7, #2]
    1dfe:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    1e02:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    1e06:	b29a      	uxth	r2, r3
    1e08:	687b      	ldr	r3, [r7, #4]
    1e0a:	809a      	strh	r2, [r3, #4]
}
    1e0c:	f107 070c 	add.w	r7, r7, #12
    1e10:	46bd      	mov	sp, r7
    1e12:	bc80      	pop	{r7}
    1e14:	4770      	bx	lr
    1e16:	bf00      	nop

00001e18 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    1e18:	b480      	push	{r7}
    1e1a:	b083      	sub	sp, #12
    1e1c:	af00      	add	r7, sp, #0
    1e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    1e20:	687b      	ldr	r3, [r7, #4]
    1e22:	889b      	ldrh	r3, [r3, #4]
    1e24:	b29b      	uxth	r3, r3
    1e26:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    1e2a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    1e2e:	b29b      	uxth	r3, r3
}
    1e30:	4618      	mov	r0, r3
    1e32:	f107 070c 	add.w	r7, r7, #12
    1e36:	46bd      	mov	sp, r7
    1e38:	bc80      	pop	{r7}
    1e3a:	4770      	bx	lr

00001e3c <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    1e3c:	b480      	push	{r7}
    1e3e:	b083      	sub	sp, #12
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	899b      	ldrh	r3, [r3, #12]
    1e48:	b29b      	uxth	r3, r3
    1e4a:	f043 0301 	orr.w	r3, r3, #1
    1e4e:	b29a      	uxth	r2, r3
    1e50:	687b      	ldr	r3, [r7, #4]
    1e52:	819a      	strh	r2, [r3, #12]
}
    1e54:	f107 070c 	add.w	r7, r7, #12
    1e58:	46bd      	mov	sp, r7
    1e5a:	bc80      	pop	{r7}
    1e5c:	4770      	bx	lr
    1e5e:	bf00      	nop

00001e60 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{
    1e60:	b480      	push	{r7}
    1e62:	b083      	sub	sp, #12
    1e64:	af00      	add	r7, sp, #0
    1e66:	6078      	str	r0, [r7, #4]
    1e68:	460b      	mov	r3, r1
    1e6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    1e6c:	687b      	ldr	r3, [r7, #4]
    1e6e:	8b1b      	ldrh	r3, [r3, #24]
    1e70:	b29b      	uxth	r3, r3
    1e72:	b2db      	uxtb	r3, r3
    1e74:	b29a      	uxth	r2, r3
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    1e7a:	687b      	ldr	r3, [r7, #4]
    1e7c:	8b1b      	ldrh	r3, [r3, #24]
    1e7e:	b29a      	uxth	r2, r3
    1e80:	78fb      	ldrb	r3, [r7, #3]
    1e82:	b29b      	uxth	r3, r3
    1e84:	ea4f 2303 	mov.w	r3, r3, lsl #8
    1e88:	b29b      	uxth	r3, r3
    1e8a:	4313      	orrs	r3, r2
    1e8c:	b29a      	uxth	r2, r3
    1e8e:	687b      	ldr	r3, [r7, #4]
    1e90:	831a      	strh	r2, [r3, #24]
}
    1e92:	f107 070c 	add.w	r7, r7, #12
    1e96:	46bd      	mov	sp, r7
    1e98:	bc80      	pop	{r7}
    1e9a:	4770      	bx	lr

00001e9c <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{
    1e9c:	b480      	push	{r7}
    1e9e:	b083      	sub	sp, #12
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	6078      	str	r0, [r7, #4]
    1ea4:	460b      	mov	r3, r1
    1ea6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	8b1b      	ldrh	r3, [r3, #24]
    1eac:	b29b      	uxth	r3, r3
    1eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    1eb2:	b29a      	uxth	r2, r3
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	8b1b      	ldrh	r3, [r3, #24]
    1ebc:	b29a      	uxth	r2, r3
    1ebe:	78fb      	ldrb	r3, [r7, #3]
    1ec0:	b29b      	uxth	r3, r3
    1ec2:	4313      	orrs	r3, r2
    1ec4:	b29a      	uxth	r2, r3
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	831a      	strh	r2, [r3, #24]
}
    1eca:	f107 070c 	add.w	r7, r7, #12
    1ece:	46bd      	mov	sp, r7
    1ed0:	bc80      	pop	{r7}
    1ed2:	4770      	bx	lr

00001ed4 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1ed4:	b480      	push	{r7}
    1ed6:	b083      	sub	sp, #12
    1ed8:	af00      	add	r7, sp, #0
    1eda:	6078      	str	r0, [r7, #4]
    1edc:	460b      	mov	r3, r1
    1ede:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1ee0:	78fb      	ldrb	r3, [r7, #3]
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d008      	beq.n	1ef8 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	8a9b      	ldrh	r3, [r3, #20]
    1eea:	b29b      	uxth	r3, r3
    1eec:	f043 0320 	orr.w	r3, r3, #32
    1ef0:	b29a      	uxth	r2, r3
    1ef2:	687b      	ldr	r3, [r7, #4]
    1ef4:	829a      	strh	r2, [r3, #20]
    1ef6:	e007      	b.n	1f08 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    1ef8:	687b      	ldr	r3, [r7, #4]
    1efa:	8a9b      	ldrh	r3, [r3, #20]
    1efc:	b29b      	uxth	r3, r3
    1efe:	f023 0320 	bic.w	r3, r3, #32
    1f02:	b29a      	uxth	r2, r3
    1f04:	687b      	ldr	r3, [r7, #4]
    1f06:	829a      	strh	r2, [r3, #20]
  }
}
    1f08:	f107 070c 	add.w	r7, r7, #12
    1f0c:	46bd      	mov	sp, r7
    1f0e:	bc80      	pop	{r7}
    1f10:	4770      	bx	lr
    1f12:	bf00      	nop

00001f14 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f14:	b480      	push	{r7}
    1f16:	b083      	sub	sp, #12
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
    1f1c:	460b      	mov	r3, r1
    1f1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1f20:	78fb      	ldrb	r3, [r7, #3]
    1f22:	2b00      	cmp	r3, #0
    1f24:	d008      	beq.n	1f38 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    1f26:	687b      	ldr	r3, [r7, #4]
    1f28:	8a9b      	ldrh	r3, [r3, #20]
    1f2a:	b29b      	uxth	r3, r3
    1f2c:	f043 0310 	orr.w	r3, r3, #16
    1f30:	b29a      	uxth	r2, r3
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	829a      	strh	r2, [r3, #20]
    1f36:	e007      	b.n	1f48 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	8a9b      	ldrh	r3, [r3, #20]
    1f3c:	b29b      	uxth	r3, r3
    1f3e:	f023 0310 	bic.w	r3, r3, #16
    1f42:	b29a      	uxth	r2, r3
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	829a      	strh	r2, [r3, #20]
  }
}
    1f48:	f107 070c 	add.w	r7, r7, #12
    1f4c:	46bd      	mov	sp, r7
    1f4e:	bc80      	pop	{r7}
    1f50:	4770      	bx	lr
    1f52:	bf00      	nop

00001f54 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f54:	b480      	push	{r7}
    1f56:	b083      	sub	sp, #12
    1f58:	af00      	add	r7, sp, #0
    1f5a:	6078      	str	r0, [r7, #4]
    1f5c:	460b      	mov	r3, r1
    1f5e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1f60:	78fb      	ldrb	r3, [r7, #3]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d008      	beq.n	1f78 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    1f66:	687b      	ldr	r3, [r7, #4]
    1f68:	8a9b      	ldrh	r3, [r3, #20]
    1f6a:	b29b      	uxth	r3, r3
    1f6c:	f043 0308 	orr.w	r3, r3, #8
    1f70:	b29a      	uxth	r2, r3
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	829a      	strh	r2, [r3, #20]
    1f76:	e007      	b.n	1f88 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	8a9b      	ldrh	r3, [r3, #20]
    1f7c:	b29b      	uxth	r3, r3
    1f7e:	f023 0308 	bic.w	r3, r3, #8
    1f82:	b29a      	uxth	r2, r3
    1f84:	687b      	ldr	r3, [r7, #4]
    1f86:	829a      	strh	r2, [r3, #20]
  }
}
    1f88:	f107 070c 	add.w	r7, r7, #12
    1f8c:	46bd      	mov	sp, r7
    1f8e:	bc80      	pop	{r7}
    1f90:	4770      	bx	lr
    1f92:	bf00      	nop

00001f94 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1f94:	b480      	push	{r7}
    1f96:	b083      	sub	sp, #12
    1f98:	af00      	add	r7, sp, #0
    1f9a:	6078      	str	r0, [r7, #4]
    1f9c:	460b      	mov	r3, r1
    1f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1fa0:	78fb      	ldrb	r3, [r7, #3]
    1fa2:	2b00      	cmp	r3, #0
    1fa4:	d00a      	beq.n	1fbc <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    1fa6:	687b      	ldr	r3, [r7, #4]
    1fa8:	899b      	ldrh	r3, [r3, #12]
    1faa:	b29b      	uxth	r3, r3
    1fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    1fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    1fb4:	b29a      	uxth	r2, r3
    1fb6:	687b      	ldr	r3, [r7, #4]
    1fb8:	819a      	strh	r2, [r3, #12]
    1fba:	e009      	b.n	1fd0 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    1fbc:	687b      	ldr	r3, [r7, #4]
    1fbe:	899b      	ldrh	r3, [r3, #12]
    1fc0:	b29b      	uxth	r3, r3
    1fc2:	ea4f 4343 	mov.w	r3, r3, lsl #17
    1fc6:	ea4f 4353 	mov.w	r3, r3, lsr #17
    1fca:	b29a      	uxth	r2, r3
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	819a      	strh	r2, [r3, #12]
  }
}
    1fd0:	f107 070c 	add.w	r7, r7, #12
    1fd4:	46bd      	mov	sp, r7
    1fd6:	bc80      	pop	{r7}
    1fd8:	4770      	bx	lr
    1fda:	bf00      	nop

00001fdc <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    1fdc:	b480      	push	{r7}
    1fde:	b083      	sub	sp, #12
    1fe0:	af00      	add	r7, sp, #0
    1fe2:	6078      	str	r0, [r7, #4]
    1fe4:	460b      	mov	r3, r1
    1fe6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1fe8:	78fb      	ldrb	r3, [r7, #3]
    1fea:	2b00      	cmp	r3, #0
    1fec:	d008      	beq.n	2000 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    1fee:	687b      	ldr	r3, [r7, #4]
    1ff0:	8a9b      	ldrh	r3, [r3, #20]
    1ff2:	b29b      	uxth	r3, r3
    1ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1ff8:	b29a      	uxth	r2, r3
    1ffa:	687b      	ldr	r3, [r7, #4]
    1ffc:	829a      	strh	r2, [r3, #20]
    1ffe:	e007      	b.n	2010 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	8a9b      	ldrh	r3, [r3, #20]
    2004:	b29b      	uxth	r3, r3
    2006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    200a:	b29a      	uxth	r2, r3
    200c:	687b      	ldr	r3, [r7, #4]
    200e:	829a      	strh	r2, [r3, #20]
  }
}
    2010:	f107 070c 	add.w	r7, r7, #12
    2014:	46bd      	mov	sp, r7
    2016:	bc80      	pop	{r7}
    2018:	4770      	bx	lr
    201a:	bf00      	nop

0000201c <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    201c:	b480      	push	{r7}
    201e:	b083      	sub	sp, #12
    2020:	af00      	add	r7, sp, #0
    2022:	6078      	str	r0, [r7, #4]
    2024:	460b      	mov	r3, r1
    2026:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= CR3_IRLP_Mask;
    2028:	687b      	ldr	r3, [r7, #4]
    202a:	8a9b      	ldrh	r3, [r3, #20]
    202c:	b29b      	uxth	r3, r3
    202e:	f023 0304 	bic.w	r3, r3, #4
    2032:	b29a      	uxth	r2, r3
    2034:	687b      	ldr	r3, [r7, #4]
    2036:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    2038:	687b      	ldr	r3, [r7, #4]
    203a:	8a9b      	ldrh	r3, [r3, #20]
    203c:	b29a      	uxth	r2, r3
    203e:	887b      	ldrh	r3, [r7, #2]
    2040:	4313      	orrs	r3, r2
    2042:	b29a      	uxth	r2, r3
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	829a      	strh	r2, [r3, #20]
}
    2048:	f107 070c 	add.w	r7, r7, #12
    204c:	46bd      	mov	sp, r7
    204e:	bc80      	pop	{r7}
    2050:	4770      	bx	lr
    2052:	bf00      	nop

00002054 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2054:	b480      	push	{r7}
    2056:	b083      	sub	sp, #12
    2058:	af00      	add	r7, sp, #0
    205a:	6078      	str	r0, [r7, #4]
    205c:	460b      	mov	r3, r1
    205e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2060:	78fb      	ldrb	r3, [r7, #3]
    2062:	2b00      	cmp	r3, #0
    2064:	d008      	beq.n	2078 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    2066:	687b      	ldr	r3, [r7, #4]
    2068:	8a9b      	ldrh	r3, [r3, #20]
    206a:	b29b      	uxth	r3, r3
    206c:	f043 0302 	orr.w	r3, r3, #2
    2070:	b29a      	uxth	r2, r3
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	829a      	strh	r2, [r3, #20]
    2076:	e007      	b.n	2088 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	8a9b      	ldrh	r3, [r3, #20]
    207c:	b29b      	uxth	r3, r3
    207e:	f023 0302 	bic.w	r3, r3, #2
    2082:	b29a      	uxth	r2, r3
    2084:	687b      	ldr	r3, [r7, #4]
    2086:	829a      	strh	r2, [r3, #20]
  }
}
    2088:	f107 070c 	add.w	r7, r7, #12
    208c:	46bd      	mov	sp, r7
    208e:	bc80      	pop	{r7}
    2090:	4770      	bx	lr
    2092:	bf00      	nop

00002094 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    2094:	b480      	push	{r7}
    2096:	b085      	sub	sp, #20
    2098:	af00      	add	r7, sp, #0
    209a:	6078      	str	r0, [r7, #4]
    209c:	460b      	mov	r3, r1
    209e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    20a0:	f04f 0300 	mov.w	r3, #0
    20a4:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	881b      	ldrh	r3, [r3, #0]
    20aa:	b29a      	uxth	r2, r3
    20ac:	887b      	ldrh	r3, [r7, #2]
    20ae:	4013      	ands	r3, r2
    20b0:	b29b      	uxth	r3, r3
    20b2:	2b00      	cmp	r3, #0
    20b4:	d003      	beq.n	20be <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
    20b6:	f04f 0301 	mov.w	r3, #1
    20ba:	73fb      	strb	r3, [r7, #15]
    20bc:	e002      	b.n	20c4 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    20be:	f04f 0300 	mov.w	r3, #0
    20c2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    20c4:	7bfb      	ldrb	r3, [r7, #15]
}
    20c6:	4618      	mov	r0, r3
    20c8:	f107 0714 	add.w	r7, r7, #20
    20cc:	46bd      	mov	sp, r7
    20ce:	bc80      	pop	{r7}
    20d0:	4770      	bx	lr
    20d2:	bf00      	nop

000020d4 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    20d4:	b480      	push	{r7}
    20d6:	b083      	sub	sp, #12
    20d8:	af00      	add	r7, sp, #0
    20da:	6078      	str	r0, [r7, #4]
    20dc:	460b      	mov	r3, r1
    20de:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  USARTx->SR = (uint16_t)~USART_FLAG;
    20e0:	887b      	ldrh	r3, [r7, #2]
    20e2:	ea6f 0303 	mvn.w	r3, r3
    20e6:	b29a      	uxth	r2, r3
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	801a      	strh	r2, [r3, #0]
}
    20ec:	f107 070c 	add.w	r7, r7, #12
    20f0:	46bd      	mov	sp, r7
    20f2:	bc80      	pop	{r7}
    20f4:	4770      	bx	lr
    20f6:	bf00      	nop

000020f8 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    20f8:	b480      	push	{r7}
    20fa:	b087      	sub	sp, #28
    20fc:	af00      	add	r7, sp, #0
    20fe:	6078      	str	r0, [r7, #4]
    2100:	460b      	mov	r3, r1
    2102:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    2104:	f04f 0300 	mov.w	r3, #0
    2108:	60fb      	str	r3, [r7, #12]
    210a:	f04f 0300 	mov.w	r3, #0
    210e:	617b      	str	r3, [r7, #20]
    2110:	f04f 0300 	mov.w	r3, #0
    2114:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    2116:	f04f 0300 	mov.w	r3, #0
    211a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    211c:	887b      	ldrh	r3, [r7, #2]
    211e:	b2db      	uxtb	r3, r3
    2120:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2124:	b2db      	uxtb	r3, r3
    2126:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    2128:	887b      	ldrh	r3, [r7, #2]
    212a:	f003 031f 	and.w	r3, r3, #31
    212e:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    2130:	697b      	ldr	r3, [r7, #20]
    2132:	f04f 0201 	mov.w	r2, #1
    2136:	fa02 f303 	lsl.w	r3, r2, r3
    213a:	617b      	str	r3, [r7, #20]

  if (usartreg == 0x01) /* The IT  is in CR1 register */
    213c:	68bb      	ldr	r3, [r7, #8]
    213e:	2b01      	cmp	r3, #1
    2140:	d106      	bne.n	2150 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	899b      	ldrh	r3, [r3, #12]
    2146:	b29b      	uxth	r3, r3
    2148:	697a      	ldr	r2, [r7, #20]
    214a:	4013      	ands	r3, r2
    214c:	617b      	str	r3, [r7, #20]
    214e:	e00f      	b.n	2170 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    2150:	68bb      	ldr	r3, [r7, #8]
    2152:	2b02      	cmp	r3, #2
    2154:	d106      	bne.n	2164 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
    2156:	687b      	ldr	r3, [r7, #4]
    2158:	8a1b      	ldrh	r3, [r3, #16]
    215a:	b29b      	uxth	r3, r3
    215c:	697a      	ldr	r2, [r7, #20]
    215e:	4013      	ands	r3, r2
    2160:	617b      	str	r3, [r7, #20]
    2162:	e005      	b.n	2170 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	8a9b      	ldrh	r3, [r3, #20]
    2168:	b29b      	uxth	r3, r3
    216a:	697a      	ldr	r2, [r7, #20]
    216c:	4013      	ands	r3, r2
    216e:	617b      	str	r3, [r7, #20]
  }

  bitpos = USART_IT >> 0x08;
    2170:	887b      	ldrh	r3, [r7, #2]
    2172:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2176:	b29b      	uxth	r3, r3
    2178:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    217a:	68fb      	ldr	r3, [r7, #12]
    217c:	f04f 0201 	mov.w	r2, #1
    2180:	fa02 f303 	lsl.w	r3, r2, r3
    2184:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	881b      	ldrh	r3, [r3, #0]
    218a:	b29b      	uxth	r3, r3
    218c:	68fa      	ldr	r2, [r7, #12]
    218e:	4013      	ands	r3, r2
    2190:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    2192:	697b      	ldr	r3, [r7, #20]
    2194:	2b00      	cmp	r3, #0
    2196:	d006      	beq.n	21a6 <USART_GetITStatus+0xae>
    2198:	68fb      	ldr	r3, [r7, #12]
    219a:	2b00      	cmp	r3, #0
    219c:	d003      	beq.n	21a6 <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
    219e:	f04f 0301 	mov.w	r3, #1
    21a2:	74fb      	strb	r3, [r7, #19]
    21a4:	e002      	b.n	21ac <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
    21a6:	f04f 0300 	mov.w	r3, #0
    21aa:	74fb      	strb	r3, [r7, #19]
  }

  return bitstatus;
    21ac:	7cfb      	ldrb	r3, [r7, #19]
}
    21ae:	4618      	mov	r0, r3
    21b0:	f107 071c 	add.w	r7, r7, #28
    21b4:	46bd      	mov	sp, r7
    21b6:	bc80      	pop	{r7}
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop

000021bc <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    21bc:	b480      	push	{r7}
    21be:	b085      	sub	sp, #20
    21c0:	af00      	add	r7, sp, #0
    21c2:	6078      	str	r0, [r7, #4]
    21c4:	460b      	mov	r3, r1
    21c6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    21c8:	f04f 0300 	mov.w	r3, #0
    21cc:	81fb      	strh	r3, [r7, #14]
    21ce:	f04f 0300 	mov.w	r3, #0
    21d2:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  bitpos = USART_IT >> 0x08;
    21d4:	887b      	ldrh	r3, [r7, #2]
    21d6:	ea4f 2313 	mov.w	r3, r3, lsr #8
    21da:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    21dc:	89fb      	ldrh	r3, [r7, #14]
    21de:	f04f 0201 	mov.w	r2, #1
    21e2:	fa02 f303 	lsl.w	r3, r2, r3
    21e6:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    21e8:	89bb      	ldrh	r3, [r7, #12]
    21ea:	ea6f 0303 	mvn.w	r3, r3
    21ee:	b29a      	uxth	r2, r3
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	801a      	strh	r2, [r3, #0]
}
    21f4:	f107 0714 	add.w	r7, r7, #20
    21f8:	46bd      	mov	sp, r7
    21fa:	bc80      	pop	{r7}
    21fc:	4770      	bx	lr
    21fe:	bf00      	nop

00002200 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    2200:	b480      	push	{r7}
    2202:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    2204:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2208:	f2c4 0301 	movt	r3, #16385	; 0x4001
    220c:	f04f 0200 	mov.w	r2, #0
    2210:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    2212:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2216:	f2c4 0301 	movt	r3, #16385	; 0x4001
    221a:	f04f 0200 	mov.w	r2, #0
    221e:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
    2220:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2224:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2228:	f04f 0200 	mov.w	r2, #0
    222c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
    222e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2232:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2236:	f04f 0200 	mov.w	r2, #0
    223a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    223c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2240:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2244:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2248:	f2c0 020f 	movt	r2, #15
    224c:	615a      	str	r2, [r3, #20]
}
    224e:	46bd      	mov	sp, r7
    2250:	bc80      	pop	{r7}
    2252:	4770      	bx	lr

00002254 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2254:	b480      	push	{r7}
    2256:	b085      	sub	sp, #20
    2258:	af00      	add	r7, sp, #0
    225a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    225c:	f04f 0300 	mov.w	r3, #0
    2260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    2262:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2266:	f2c4 0301 	movt	r3, #16385	; 0x4001
    226a:	60fb      	str	r3, [r7, #12]

  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    226c:	687b      	ldr	r3, [r7, #4]
    226e:	799b      	ldrb	r3, [r3, #6]
    2270:	2b00      	cmp	r3, #0
    2272:	d078      	beq.n	2366 <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    2274:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2278:	f2c4 0301 	movt	r3, #16385	; 0x4001
    227c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2280:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2284:	6811      	ldr	r1, [r2, #0]
    2286:	687a      	ldr	r2, [r7, #4]
    2288:	6812      	ldr	r2, [r2, #0]
    228a:	ea6f 0202 	mvn.w	r2, r2
    228e:	400a      	ands	r2, r1
    2290:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2292:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2296:	f2c4 0301 	movt	r3, #16385	; 0x4001
    229a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    229e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22a2:	6851      	ldr	r1, [r2, #4]
    22a4:	687a      	ldr	r2, [r7, #4]
    22a6:	6812      	ldr	r2, [r2, #0]
    22a8:	ea6f 0202 	mvn.w	r2, r2
    22ac:	400a      	ands	r2, r1
    22ae:	605a      	str	r2, [r3, #4]

    tmp += EXTI_InitStruct->EXTI_Mode;
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	791b      	ldrb	r3, [r3, #4]
    22b4:	68fa      	ldr	r2, [r7, #12]
    22b6:	18d3      	adds	r3, r2, r3
    22b8:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    22ba:	68fb      	ldr	r3, [r7, #12]
    22bc:	68fa      	ldr	r2, [r7, #12]
    22be:	6811      	ldr	r1, [r2, #0]
    22c0:	687a      	ldr	r2, [r7, #4]
    22c2:	6812      	ldr	r2, [r2, #0]
    22c4:	430a      	orrs	r2, r1
    22c6:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    22c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    22cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    22d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    22d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22d8:	6891      	ldr	r1, [r2, #8]
    22da:	687a      	ldr	r2, [r7, #4]
    22dc:	6812      	ldr	r2, [r2, #0]
    22de:	ea6f 0202 	mvn.w	r2, r2
    22e2:	400a      	ands	r2, r1
    22e4:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    22e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    22ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
    22ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    22f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    22f6:	68d1      	ldr	r1, [r2, #12]
    22f8:	687a      	ldr	r2, [r7, #4]
    22fa:	6812      	ldr	r2, [r2, #0]
    22fc:	ea6f 0202 	mvn.w	r2, r2
    2300:	400a      	ands	r2, r1
    2302:	60da      	str	r2, [r3, #12]

    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2304:	687b      	ldr	r3, [r7, #4]
    2306:	795b      	ldrb	r3, [r3, #5]
    2308:	2b10      	cmp	r3, #16
    230a:	d11a      	bne.n	2342 <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    230c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2310:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2314:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2318:	f2c4 0201 	movt	r2, #16385	; 0x4001
    231c:	6891      	ldr	r1, [r2, #8]
    231e:	687a      	ldr	r2, [r7, #4]
    2320:	6812      	ldr	r2, [r2, #0]
    2322:	430a      	orrs	r2, r1
    2324:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    2326:	f44f 6380 	mov.w	r3, #1024	; 0x400
    232a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    232e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2332:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2336:	68d1      	ldr	r1, [r2, #12]
    2338:	687a      	ldr	r2, [r7, #4]
    233a:	6812      	ldr	r2, [r2, #0]
    233c:	430a      	orrs	r2, r1
    233e:	60da      	str	r2, [r3, #12]
    2340:	e01f      	b.n	2382 <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    2342:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2346:	f2c4 0301 	movt	r3, #16385	; 0x4001
    234a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    234c:	687b      	ldr	r3, [r7, #4]
    234e:	795b      	ldrb	r3, [r3, #5]
    2350:	68fa      	ldr	r2, [r7, #12]
    2352:	18d3      	adds	r3, r2, r3
    2354:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2356:	68fb      	ldr	r3, [r7, #12]
    2358:	68fa      	ldr	r2, [r7, #12]
    235a:	6811      	ldr	r1, [r2, #0]
    235c:	687a      	ldr	r2, [r7, #4]
    235e:	6812      	ldr	r2, [r2, #0]
    2360:	430a      	orrs	r2, r1
    2362:	601a      	str	r2, [r3, #0]
    2364:	e00d      	b.n	2382 <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	791b      	ldrb	r3, [r3, #4]
    236a:	68fa      	ldr	r2, [r7, #12]
    236c:	18d3      	adds	r3, r2, r3
    236e:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    2370:	68fb      	ldr	r3, [r7, #12]
    2372:	68fa      	ldr	r2, [r7, #12]
    2374:	6811      	ldr	r1, [r2, #0]
    2376:	687a      	ldr	r2, [r7, #4]
    2378:	6812      	ldr	r2, [r2, #0]
    237a:	ea6f 0202 	mvn.w	r2, r2
    237e:	400a      	ands	r2, r1
    2380:	601a      	str	r2, [r3, #0]
  }
}
    2382:	f107 0714 	add.w	r7, r7, #20
    2386:	46bd      	mov	sp, r7
    2388:	bc80      	pop	{r7}
    238a:	4770      	bx	lr

0000238c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    238c:	b480      	push	{r7}
    238e:	b083      	sub	sp, #12
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	f04f 0200 	mov.w	r2, #0
    239a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	f04f 0200 	mov.w	r2, #0
    23a2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	f04f 020c 	mov.w	r2, #12
    23aa:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    23ac:	687b      	ldr	r3, [r7, #4]
    23ae:	f04f 0200 	mov.w	r2, #0
    23b2:	719a      	strb	r2, [r3, #6]
}
    23b4:	f107 070c 	add.w	r7, r7, #12
    23b8:	46bd      	mov	sp, r7
    23ba:	bc80      	pop	{r7}
    23bc:	4770      	bx	lr
    23be:	bf00      	nop

000023c0 <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    23c0:	b480      	push	{r7}
    23c2:	b083      	sub	sp, #12
    23c4:	af00      	add	r7, sp, #0
    23c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->SWIER |= EXTI_Line;
    23c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    23d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    23d4:	f2c4 0201 	movt	r2, #16385	; 0x4001
    23d8:	6911      	ldr	r1, [r2, #16]
    23da:	687a      	ldr	r2, [r7, #4]
    23dc:	430a      	orrs	r2, r1
    23de:	611a      	str	r2, [r3, #16]
}
    23e0:	f107 070c 	add.w	r7, r7, #12
    23e4:	46bd      	mov	sp, r7
    23e6:	bc80      	pop	{r7}
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    23ec:	b480      	push	{r7}
    23ee:	b085      	sub	sp, #20
    23f0:	af00      	add	r7, sp, #0
    23f2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    23f4:	f04f 0300 	mov.w	r3, #0
    23f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    23fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    23fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2402:	695a      	ldr	r2, [r3, #20]
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	4013      	ands	r3, r2
    2408:	2b00      	cmp	r3, #0
    240a:	d003      	beq.n	2414 <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
    240c:	f04f 0301 	mov.w	r3, #1
    2410:	73fb      	strb	r3, [r7, #15]
    2412:	e002      	b.n	241a <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
    2414:	f04f 0300 	mov.w	r3, #0
    2418:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    241a:	7bfb      	ldrb	r3, [r7, #15]
}
    241c:	4618      	mov	r0, r3
    241e:	f107 0714 	add.w	r7, r7, #20
    2422:	46bd      	mov	sp, r7
    2424:	bc80      	pop	{r7}
    2426:	4770      	bx	lr

00002428 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2428:	b480      	push	{r7}
    242a:	b083      	sub	sp, #12
    242c:	af00      	add	r7, sp, #0
    242e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    2430:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2434:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2438:	687a      	ldr	r2, [r7, #4]
    243a:	615a      	str	r2, [r3, #20]
}
    243c:	f107 070c 	add.w	r7, r7, #12
    2440:	46bd      	mov	sp, r7
    2442:	bc80      	pop	{r7}
    2444:	4770      	bx	lr
    2446:	bf00      	nop

00002448 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    2448:	b480      	push	{r7}
    244a:	b085      	sub	sp, #20
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    2450:	f04f 0300 	mov.w	r3, #0
    2454:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    2456:	f04f 0300 	mov.w	r3, #0
    245a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));

  enablestatus =  EXTI->IMR & EXTI_Line;
    245c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2460:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2464:	681a      	ldr	r2, [r3, #0]
    2466:	687b      	ldr	r3, [r7, #4]
    2468:	4013      	ands	r3, r2
    246a:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    246c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2470:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2474:	695a      	ldr	r2, [r3, #20]
    2476:	687b      	ldr	r3, [r7, #4]
    2478:	4013      	ands	r3, r2
    247a:	2b00      	cmp	r3, #0
    247c:	d006      	beq.n	248c <EXTI_GetITStatus+0x44>
    247e:	68bb      	ldr	r3, [r7, #8]
    2480:	2b00      	cmp	r3, #0
    2482:	d003      	beq.n	248c <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
    2484:	f04f 0301 	mov.w	r3, #1
    2488:	73fb      	strb	r3, [r7, #15]
    248a:	e002      	b.n	2492 <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
    248c:	f04f 0300 	mov.w	r3, #0
    2490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2492:	7bfb      	ldrb	r3, [r7, #15]
}
    2494:	4618      	mov	r0, r3
    2496:	f107 0714 	add.w	r7, r7, #20
    249a:	46bd      	mov	sp, r7
    249c:	bc80      	pop	{r7}
    249e:	4770      	bx	lr

000024a0 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    24a0:	b480      	push	{r7}
    24a2:	b083      	sub	sp, #12
    24a4:	af00      	add	r7, sp, #0
    24a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));

  EXTI->PR = EXTI_Line;
    24a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    24ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    24b0:	687a      	ldr	r2, [r7, #4]
    24b2:	615a      	str	r2, [r3, #20]
}
    24b4:	f107 070c 	add.w	r7, r7, #12
    24b8:	46bd      	mov	sp, r7
    24ba:	bc80      	pop	{r7}
    24bc:	4770      	bx	lr
    24be:	bf00      	nop

000024c0 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    24c0:	b480      	push	{r7}
    24c2:	b083      	sub	sp, #12
    24c4:	af00      	add	r7, sp, #0
    24c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    24c8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    24cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    24d0:	687a      	ldr	r2, [r7, #4]
    24d2:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
    24d6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    24da:	60da      	str	r2, [r3, #12]
}
    24dc:	f107 070c 	add.w	r7, r7, #12
    24e0:	46bd      	mov	sp, r7
    24e2:	bc80      	pop	{r7}
    24e4:	4770      	bx	lr
    24e6:	bf00      	nop

000024e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    24e8:	b480      	push	{r7}
    24ea:	b087      	sub	sp, #28
    24ec:	af00      	add	r7, sp, #0
    24ee:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    24f0:	f04f 0300 	mov.w	r3, #0
    24f4:	617b      	str	r3, [r7, #20]
    24f6:	f04f 0300 	mov.w	r3, #0
    24fa:	613b      	str	r3, [r7, #16]
    24fc:	f04f 030f 	mov.w	r3, #15
    2500:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));

  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	78db      	ldrb	r3, [r3, #3]
    2506:	2b00      	cmp	r3, #0
    2508:	d047      	beq.n	259a <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    250a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    250e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2512:	68db      	ldr	r3, [r3, #12]
    2514:	ea6f 0303 	mvn.w	r3, r3
    2518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    251c:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2520:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    2522:	697b      	ldr	r3, [r7, #20]
    2524:	f1c3 0304 	rsb	r3, r3, #4
    2528:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    252a:	697b      	ldr	r3, [r7, #20]
    252c:	68fa      	ldr	r2, [r7, #12]
    252e:	fa22 f303 	lsr.w	r3, r2, r3
    2532:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    2534:	687b      	ldr	r3, [r7, #4]
    2536:	785b      	ldrb	r3, [r3, #1]
    2538:	461a      	mov	r2, r3
    253a:	693b      	ldr	r3, [r7, #16]
    253c:	fa02 f303 	lsl.w	r3, r2, r3
    2540:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    2542:	687b      	ldr	r3, [r7, #4]
    2544:	789b      	ldrb	r3, [r3, #2]
    2546:	461a      	mov	r2, r3
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	4013      	ands	r3, r2
    254c:	697a      	ldr	r2, [r7, #20]
    254e:	4313      	orrs	r3, r2
    2550:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    2552:	697b      	ldr	r3, [r7, #20]
    2554:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2558:	617b      	str	r3, [r7, #20]

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    255a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    255e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2562:	687a      	ldr	r2, [r7, #4]
    2564:	7812      	ldrb	r2, [r2, #0]
    2566:	4611      	mov	r1, r2
    2568:	697a      	ldr	r2, [r7, #20]
    256a:	b2d2      	uxtb	r2, r2
    256c:	185b      	adds	r3, r3, r1
    256e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2572:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    2576:	f2ce 0300 	movt	r3, #57344	; 0xe000
    257a:	687a      	ldr	r2, [r7, #4]
    257c:	7812      	ldrb	r2, [r2, #0]
    257e:	ea4f 1252 	mov.w	r2, r2, lsr #5
    2582:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    2584:	6879      	ldr	r1, [r7, #4]
    2586:	7809      	ldrb	r1, [r1, #0]
    2588:	f001 011f 	and.w	r1, r1, #31
    258c:	f04f 0001 	mov.w	r0, #1
    2590:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;

    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    2594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    2598:	e014      	b.n	25c4 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    259a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    259e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    25a2:	687a      	ldr	r2, [r7, #4]
    25a4:	7812      	ldrb	r2, [r2, #0]
    25a6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    25aa:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    25ac:	6879      	ldr	r1, [r7, #4]
    25ae:	7809      	ldrb	r1, [r1, #0]
    25b0:	f001 011f 	and.w	r1, r1, #31
    25b4:	f04f 0001 	mov.w	r0, #1
    25b8:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    25bc:	f102 0220 	add.w	r2, r2, #32
    25c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    25c4:	f107 071c 	add.w	r7, r7, #28
    25c8:	46bd      	mov	sp, r7
    25ca:	bc80      	pop	{r7}
    25cc:	4770      	bx	lr
    25ce:	bf00      	nop

000025d0 <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{
    25d0:	b480      	push	{r7}
    25d2:	b083      	sub	sp, #12
    25d4:	af00      	add	r7, sp, #0
    25d6:	6078      	str	r0, [r7, #4]
    25d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));

  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    25da:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    25de:	f2ce 0300 	movt	r3, #57344	; 0xe000
    25e2:	683a      	ldr	r2, [r7, #0]
    25e4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    25e8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    25ec:	6879      	ldr	r1, [r7, #4]
    25ee:	430a      	orrs	r2, r1
    25f0:	609a      	str	r2, [r3, #8]
}
    25f2:	f107 070c 	add.w	r7, r7, #12
    25f6:	46bd      	mov	sp, r7
    25f8:	bc80      	pop	{r7}
    25fa:	4770      	bx	lr

000025fc <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    25fc:	b480      	push	{r7}
    25fe:	b083      	sub	sp, #12
    2600:	af00      	add	r7, sp, #0
    2602:	4602      	mov	r2, r0
    2604:	460b      	mov	r3, r1
    2606:	71fa      	strb	r2, [r7, #7]
    2608:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    260a:	79bb      	ldrb	r3, [r7, #6]
    260c:	2b00      	cmp	r3, #0
    260e:	d00c      	beq.n	262a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    2610:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    2614:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2618:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    261c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2620:	6911      	ldr	r1, [r2, #16]
    2622:	79fa      	ldrb	r2, [r7, #7]
    2624:	430a      	orrs	r2, r1
    2626:	611a      	str	r2, [r3, #16]
    2628:	e00d      	b.n	2646 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    262a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    262e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2632:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    2636:	f2ce 0200 	movt	r2, #57344	; 0xe000
    263a:	6911      	ldr	r1, [r2, #16]
    263c:	79fa      	ldrb	r2, [r7, #7]
    263e:	ea6f 0202 	mvn.w	r2, r2
    2642:	400a      	ands	r2, r1
    2644:	611a      	str	r2, [r3, #16]
  }
}
    2646:	f107 070c 	add.w	r7, r7, #12
    264a:	46bd      	mov	sp, r7
    264c:	bc80      	pop	{r7}
    264e:	4770      	bx	lr

00002650 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    2650:	b480      	push	{r7}
    2652:	b083      	sub	sp, #12
    2654:	af00      	add	r7, sp, #0
    2656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	2b04      	cmp	r3, #4
    265c:	d10c      	bne.n	2678 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    265e:	f24e 0310 	movw	r3, #57360	; 0xe010
    2662:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2666:	f24e 0210 	movw	r2, #57360	; 0xe010
    266a:	f2ce 0200 	movt	r2, #57344	; 0xe000
    266e:	6812      	ldr	r2, [r2, #0]
    2670:	f042 0204 	orr.w	r2, r2, #4
    2674:	601a      	str	r2, [r3, #0]
    2676:	e00b      	b.n	2690 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    2678:	f24e 0310 	movw	r3, #57360	; 0xe010
    267c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2680:	f24e 0210 	movw	r2, #57360	; 0xe010
    2684:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2688:	6812      	ldr	r2, [r2, #0]
    268a:	f022 0204 	bic.w	r2, r2, #4
    268e:	601a      	str	r2, [r3, #0]
  }
}
    2690:	f107 070c 	add.w	r7, r7, #12
    2694:	46bd      	mov	sp, r7
    2696:	bc80      	pop	{r7}
    2698:	4770      	bx	lr
    269a:	bf00      	nop

0000269c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    269c:	b580      	push	{r7, lr}
    269e:	b086      	sub	sp, #24
    26a0:	af00      	add	r7, sp, #0
    26a2:	60f8      	str	r0, [r7, #12]
    26a4:	60b9      	str	r1, [r7, #8]
    26a6:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    26a8:	f04f 0038 	mov.w	r0, #56	; 0x38
    26ac:	f002 fbcc 	bl	4e48 <pvPortMalloc>
    26b0:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    26b2:	693b      	ldr	r3, [r7, #16]
    26b4:	2b00      	cmp	r3, #0
    26b6:	d061      	beq.n	277c <xCoRoutineCreate+0xe0>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    26b8:	f240 03a4 	movw	r3, #164	; 0xa4
    26bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26c0:	681b      	ldr	r3, [r3, #0]
    26c2:	2b00      	cmp	r3, #0
    26c4:	d107      	bne.n	26d6 <xCoRoutineCreate+0x3a>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    26c6:	f240 03a4 	movw	r3, #164	; 0xa4
    26ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26ce:	693a      	ldr	r2, [r7, #16]
    26d0:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    26d2:	f000 fa35 	bl	2b40 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    26d6:	68bb      	ldr	r3, [r7, #8]
    26d8:	2b01      	cmp	r3, #1
    26da:	d902      	bls.n	26e2 <xCoRoutineCreate+0x46>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    26dc:	f04f 0301 	mov.w	r3, #1
    26e0:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    26e2:	693b      	ldr	r3, [r7, #16]
    26e4:	f04f 0200 	mov.w	r2, #0
    26e8:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    26ea:	693b      	ldr	r3, [r7, #16]
    26ec:	68ba      	ldr	r2, [r7, #8]
    26ee:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    26f0:	693b      	ldr	r3, [r7, #16]
    26f2:	687a      	ldr	r2, [r7, #4]
    26f4:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    26f6:	693b      	ldr	r3, [r7, #16]
    26f8:	68fa      	ldr	r2, [r7, #12]
    26fa:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    26fc:	693b      	ldr	r3, [r7, #16]
    26fe:	f103 0304 	add.w	r3, r3, #4
    2702:	4618      	mov	r0, r3
    2704:	f000 fab2 	bl	2c6c <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2708:	693b      	ldr	r3, [r7, #16]
    270a:	f103 0318 	add.w	r3, r3, #24
    270e:	4618      	mov	r0, r3
    2710:	f000 faac 	bl	2c6c <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    2714:	693b      	ldr	r3, [r7, #16]
    2716:	693a      	ldr	r2, [r7, #16]
    2718:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    271a:	693b      	ldr	r3, [r7, #16]
    271c:	693a      	ldr	r2, [r7, #16]
    271e:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2720:	68bb      	ldr	r3, [r7, #8]
    2722:	f1c3 0205 	rsb	r2, r3, #5
    2726:	693b      	ldr	r3, [r7, #16]
    2728:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    272a:	693b      	ldr	r3, [r7, #16]
    272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    272e:	f240 03a8 	movw	r3, #168	; 0xa8
    2732:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	429a      	cmp	r2, r3
    273a:	d906      	bls.n	274a <xCoRoutineCreate+0xae>
    273c:	693b      	ldr	r3, [r7, #16]
    273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2740:	f240 03a8 	movw	r3, #168	; 0xa8
    2744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2748:	601a      	str	r2, [r3, #0]
    274a:	693b      	ldr	r3, [r7, #16]
    274c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    274e:	4613      	mov	r3, r2
    2750:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2754:	189b      	adds	r3, r3, r2
    2756:	ea4f 0383 	mov.w	r3, r3, lsl #2
    275a:	461a      	mov	r2, r3
    275c:	f240 0338 	movw	r3, #56	; 0x38
    2760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2764:	18d2      	adds	r2, r2, r3
    2766:	693b      	ldr	r3, [r7, #16]
    2768:	f103 0304 	add.w	r3, r3, #4
    276c:	4610      	mov	r0, r2
    276e:	4619      	mov	r1, r3
    2770:	f000 fa8a 	bl	2c88 <vListInsertEnd>

		xReturn = pdPASS;
    2774:	f04f 0301 	mov.w	r3, #1
    2778:	617b      	str	r3, [r7, #20]
    277a:	e002      	b.n	2782 <xCoRoutineCreate+0xe6>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    277c:	f04f 33ff 	mov.w	r3, #4294967295
    2780:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    2782:	697b      	ldr	r3, [r7, #20]
}
    2784:	4618      	mov	r0, r3
    2786:	f107 0718 	add.w	r7, r7, #24
    278a:	46bd      	mov	sp, r7
    278c:	bd80      	pop	{r7, pc}
    278e:	bf00      	nop

00002790 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    2790:	b580      	push	{r7, lr}
    2792:	b084      	sub	sp, #16
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
    2798:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    279a:	f240 03ac 	movw	r3, #172	; 0xac
    279e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27a2:	681a      	ldr	r2, [r3, #0]
    27a4:	687b      	ldr	r3, [r7, #4]
    27a6:	18d3      	adds	r3, r2, r3
    27a8:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    27aa:	f240 03a4 	movw	r3, #164	; 0xa4
    27ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27b2:	681b      	ldr	r3, [r3, #0]
    27b4:	f103 0304 	add.w	r3, r3, #4
    27b8:	4618      	mov	r0, r3
    27ba:	f000 fac7 	bl	2d4c <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    27be:	f240 03a4 	movw	r3, #164	; 0xa4
    27c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27c6:	681b      	ldr	r3, [r3, #0]
    27c8:	68fa      	ldr	r2, [r7, #12]
    27ca:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    27cc:	f240 03ac 	movw	r3, #172	; 0xac
    27d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	68fa      	ldr	r2, [r7, #12]
    27d8:	429a      	cmp	r2, r3
    27da:	d210      	bcs.n	27fe <vCoRoutineAddToDelayedList+0x6e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    27dc:	f240 038c 	movw	r3, #140	; 0x8c
    27e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27e4:	681a      	ldr	r2, [r3, #0]
    27e6:	f240 03a4 	movw	r3, #164	; 0xa4
    27ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	f103 0304 	add.w	r3, r3, #4
    27f4:	4610      	mov	r0, r2
    27f6:	4619      	mov	r1, r3
    27f8:	f000 fa6e 	bl	2cd8 <vListInsert>
    27fc:	e00f      	b.n	281e <vCoRoutineAddToDelayedList+0x8e>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    27fe:	f240 0388 	movw	r3, #136	; 0x88
    2802:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2806:	681a      	ldr	r2, [r3, #0]
    2808:	f240 03a4 	movw	r3, #164	; 0xa4
    280c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2810:	681b      	ldr	r3, [r3, #0]
    2812:	f103 0304 	add.w	r3, r3, #4
    2816:	4610      	mov	r0, r2
    2818:	4619      	mov	r1, r3
    281a:	f000 fa5d 	bl	2cd8 <vListInsert>
	}

	if( pxEventList )
    281e:	683b      	ldr	r3, [r7, #0]
    2820:	2b00      	cmp	r3, #0
    2822:	d00a      	beq.n	283a <vCoRoutineAddToDelayedList+0xaa>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2824:	f240 03a4 	movw	r3, #164	; 0xa4
    2828:	f2c2 0300 	movt	r3, #8192	; 0x2000
    282c:	681b      	ldr	r3, [r3, #0]
    282e:	f103 0318 	add.w	r3, r3, #24
    2832:	6838      	ldr	r0, [r7, #0]
    2834:	4619      	mov	r1, r3
    2836:	f000 fa4f 	bl	2cd8 <vListInsert>
	}
}
    283a:	f107 0710 	add.w	r7, r7, #16
    283e:	46bd      	mov	sp, r7
    2840:	bd80      	pop	{r7, pc}
    2842:	bf00      	nop

00002844 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2844:	b580      	push	{r7, lr}
    2846:	b082      	sub	sp, #8
    2848:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    284a:	e03f      	b.n	28cc <prvCheckPendingReadyList+0x88>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    284c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    2850:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2854:	f240 0390 	movw	r3, #144	; 0x90
    2858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    285c:	68db      	ldr	r3, [r3, #12]
    285e:	68db      	ldr	r3, [r3, #12]
    2860:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2862:	687b      	ldr	r3, [r7, #4]
    2864:	f103 0318 	add.w	r3, r3, #24
    2868:	4618      	mov	r0, r3
    286a:	f000 fa6f 	bl	2d4c <vListRemove>
		}
		portENABLE_INTERRUPTS();
    286e:	f04f 0000 	mov.w	r0, #0
    2872:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    2876:	687b      	ldr	r3, [r7, #4]
    2878:	f103 0304 	add.w	r3, r3, #4
    287c:	4618      	mov	r0, r3
    287e:	f000 fa65 	bl	2d4c <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    2882:	687b      	ldr	r3, [r7, #4]
    2884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2886:	f240 03a8 	movw	r3, #168	; 0xa8
    288a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    288e:	681b      	ldr	r3, [r3, #0]
    2890:	429a      	cmp	r2, r3
    2892:	d906      	bls.n	28a2 <prvCheckPendingReadyList+0x5e>
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2898:	f240 03a8 	movw	r3, #168	; 0xa8
    289c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28a0:	601a      	str	r2, [r3, #0]
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    28a6:	4613      	mov	r3, r2
    28a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    28ac:	189b      	adds	r3, r3, r2
    28ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    28b2:	461a      	mov	r2, r3
    28b4:	f240 0338 	movw	r3, #56	; 0x38
    28b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28bc:	18d2      	adds	r2, r2, r3
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	f103 0304 	add.w	r3, r3, #4
    28c4:	4610      	mov	r0, r2
    28c6:	4619      	mov	r1, r3
    28c8:	f000 f9de 	bl	2c88 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    28cc:	f240 0390 	movw	r3, #144	; 0x90
    28d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28d4:	681b      	ldr	r3, [r3, #0]
    28d6:	2b00      	cmp	r3, #0
    28d8:	d1b8      	bne.n	284c <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    28da:	f107 0708 	add.w	r7, r7, #8
    28de:	46bd      	mov	sp, r7
    28e0:	bd80      	pop	{r7, pc}
    28e2:	bf00      	nop

000028e4 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    28e4:	b580      	push	{r7, lr}
    28e6:	b082      	sub	sp, #8
    28e8:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    28ea:	f001 fb8f 	bl	400c <xTaskGetTickCount>
    28ee:	4602      	mov	r2, r0
    28f0:	f240 03b0 	movw	r3, #176	; 0xb0
    28f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    28f8:	681b      	ldr	r3, [r3, #0]
    28fa:	1ad2      	subs	r2, r2, r3
    28fc:	f240 03b4 	movw	r3, #180	; 0xb4
    2900:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2904:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    2906:	e08f      	b.n	2a28 <prvCheckDelayedList+0x144>
	{
		xCoRoutineTickCount++;
    2908:	f240 03ac 	movw	r3, #172	; 0xac
    290c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2910:	681b      	ldr	r3, [r3, #0]
    2912:	f103 0201 	add.w	r2, r3, #1
    2916:	f240 03ac 	movw	r3, #172	; 0xac
    291a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    291e:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    2920:	f240 03b4 	movw	r3, #180	; 0xb4
    2924:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2928:	681b      	ldr	r3, [r3, #0]
    292a:	f103 32ff 	add.w	r2, r3, #4294967295
    292e:	f240 03b4 	movw	r3, #180	; 0xb4
    2932:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2936:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2938:	f240 03ac 	movw	r3, #172	; 0xac
    293c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2940:	681b      	ldr	r3, [r3, #0]
    2942:	2b00      	cmp	r3, #0
    2944:	d165      	bne.n	2a12 <prvCheckDelayedList+0x12e>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    2946:	f240 0388 	movw	r3, #136	; 0x88
    294a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    294e:	681b      	ldr	r3, [r3, #0]
    2950:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    2952:	f240 038c 	movw	r3, #140	; 0x8c
    2956:	f2c2 0300 	movt	r3, #8192	; 0x2000
    295a:	681a      	ldr	r2, [r3, #0]
    295c:	f240 0388 	movw	r3, #136	; 0x88
    2960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2964:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    2966:	f240 038c 	movw	r3, #140	; 0x8c
    296a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    296e:	687a      	ldr	r2, [r7, #4]
    2970:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2972:	e04e      	b.n	2a12 <prvCheckDelayedList+0x12e>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    2974:	f240 0388 	movw	r3, #136	; 0x88
    2978:	f2c2 0300 	movt	r3, #8192	; 0x2000
    297c:	681b      	ldr	r3, [r3, #0]
    297e:	68db      	ldr	r3, [r3, #12]
    2980:	68db      	ldr	r3, [r3, #12]
    2982:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2984:	683b      	ldr	r3, [r7, #0]
    2986:	685a      	ldr	r2, [r3, #4]
    2988:	f240 03ac 	movw	r3, #172	; 0xac
    298c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	429a      	cmp	r2, r3
    2994:	d847      	bhi.n	2a26 <prvCheckDelayedList+0x142>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    2996:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    299a:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    299e:	683b      	ldr	r3, [r7, #0]
    29a0:	f103 0304 	add.w	r3, r3, #4
    29a4:	4618      	mov	r0, r3
    29a6:	f000 f9d1 	bl	2d4c <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    29aa:	683b      	ldr	r3, [r7, #0]
    29ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29ae:	2b00      	cmp	r3, #0
    29b0:	d005      	beq.n	29be <prvCheckDelayedList+0xda>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    29b2:	683b      	ldr	r3, [r7, #0]
    29b4:	f103 0318 	add.w	r3, r3, #24
    29b8:	4618      	mov	r0, r3
    29ba:	f000 f9c7 	bl	2d4c <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    29be:	f04f 0000 	mov.w	r0, #0
    29c2:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    29c6:	683b      	ldr	r3, [r7, #0]
    29c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29ca:	f240 03a8 	movw	r3, #168	; 0xa8
    29ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29d2:	681b      	ldr	r3, [r3, #0]
    29d4:	429a      	cmp	r2, r3
    29d6:	d906      	bls.n	29e6 <prvCheckDelayedList+0x102>
    29d8:	683b      	ldr	r3, [r7, #0]
    29da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29dc:	f240 03a8 	movw	r3, #168	; 0xa8
    29e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29e4:	601a      	str	r2, [r3, #0]
    29e6:	683b      	ldr	r3, [r7, #0]
    29e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    29ea:	4613      	mov	r3, r2
    29ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    29f0:	189b      	adds	r3, r3, r2
    29f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    29f6:	461a      	mov	r2, r3
    29f8:	f240 0338 	movw	r3, #56	; 0x38
    29fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a00:	18d2      	adds	r2, r2, r3
    2a02:	683b      	ldr	r3, [r7, #0]
    2a04:	f103 0304 	add.w	r3, r3, #4
    2a08:	4610      	mov	r0, r2
    2a0a:	4619      	mov	r1, r3
    2a0c:	f000 f93c 	bl	2c88 <vListInsertEnd>
    2a10:	e000      	b.n	2a14 <prvCheckDelayedList+0x130>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2a12:	bf00      	nop
    2a14:	f240 0388 	movw	r3, #136	; 0x88
    2a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	681b      	ldr	r3, [r3, #0]
    2a20:	2b00      	cmp	r3, #0
    2a22:	d1a7      	bne.n	2974 <prvCheckDelayedList+0x90>
    2a24:	e000      	b.n	2a28 <prvCheckDelayedList+0x144>
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
			{			
				/* Timeout not yet expired. */																			
				break;																				
    2a26:	bf00      	nop
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2a28:	f240 03b4 	movw	r3, #180	; 0xb4
    2a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a30:	681b      	ldr	r3, [r3, #0]
    2a32:	2b00      	cmp	r3, #0
    2a34:	f47f af68 	bne.w	2908 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2a38:	f240 03ac 	movw	r3, #172	; 0xac
    2a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a40:	681a      	ldr	r2, [r3, #0]
    2a42:	f240 03b0 	movw	r3, #176	; 0xb0
    2a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a4a:	601a      	str	r2, [r3, #0]
}
    2a4c:	f107 0708 	add.w	r7, r7, #8
    2a50:	46bd      	mov	sp, r7
    2a52:	bd80      	pop	{r7, pc}

00002a54 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    2a54:	b580      	push	{r7, lr}
    2a56:	b082      	sub	sp, #8
    2a58:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    2a5a:	f7ff fef3 	bl	2844 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2a5e:	f7ff ff41 	bl	28e4 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2a62:	e012      	b.n	2a8a <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    2a64:	f240 03a8 	movw	r3, #168	; 0xa8
    2a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a6c:	681b      	ldr	r3, [r3, #0]
    2a6e:	2b00      	cmp	r3, #0
    2a70:	d060      	beq.n	2b34 <vCoRoutineSchedule+0xe0>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    2a72:	f240 03a8 	movw	r3, #168	; 0xa8
    2a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a7a:	681b      	ldr	r3, [r3, #0]
    2a7c:	f103 32ff 	add.w	r2, r3, #4294967295
    2a80:	f240 03a8 	movw	r3, #168	; 0xa8
    2a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a88:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2a8a:	f240 03a8 	movw	r3, #168	; 0xa8
    2a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2a92:	681a      	ldr	r2, [r3, #0]
    2a94:	4613      	mov	r3, r2
    2a96:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2a9a:	189b      	adds	r3, r3, r2
    2a9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2aa0:	461a      	mov	r2, r3
    2aa2:	f240 0338 	movw	r3, #56	; 0x38
    2aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2aaa:	18d3      	adds	r3, r2, r3
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d0d8      	beq.n	2a64 <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2ab2:	f240 03a8 	movw	r3, #168	; 0xa8
    2ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2aba:	681a      	ldr	r2, [r3, #0]
    2abc:	4613      	mov	r3, r2
    2abe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac2:	189b      	adds	r3, r3, r2
    2ac4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac8:	461a      	mov	r2, r3
    2aca:	f240 0338 	movw	r3, #56	; 0x38
    2ace:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ad2:	18d3      	adds	r3, r2, r3
    2ad4:	607b      	str	r3, [r7, #4]
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	685b      	ldr	r3, [r3, #4]
    2ada:	685a      	ldr	r2, [r3, #4]
    2adc:	687b      	ldr	r3, [r7, #4]
    2ade:	605a      	str	r2, [r3, #4]
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	685a      	ldr	r2, [r3, #4]
    2ae4:	687b      	ldr	r3, [r7, #4]
    2ae6:	f103 0308 	add.w	r3, r3, #8
    2aea:	429a      	cmp	r2, r3
    2aec:	d104      	bne.n	2af8 <vCoRoutineSchedule+0xa4>
    2aee:	687b      	ldr	r3, [r7, #4]
    2af0:	685b      	ldr	r3, [r3, #4]
    2af2:	685a      	ldr	r2, [r3, #4]
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	605a      	str	r2, [r3, #4]
    2af8:	687b      	ldr	r3, [r7, #4]
    2afa:	685b      	ldr	r3, [r3, #4]
    2afc:	68da      	ldr	r2, [r3, #12]
    2afe:	f240 03a4 	movw	r3, #164	; 0xa4
    2b02:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b06:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2b08:	f240 03a4 	movw	r3, #164	; 0xa4
    2b0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b10:	681b      	ldr	r3, [r3, #0]
    2b12:	681a      	ldr	r2, [r3, #0]
    2b14:	f240 03a4 	movw	r3, #164	; 0xa4
    2b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b1c:	6819      	ldr	r1, [r3, #0]
    2b1e:	f240 03a4 	movw	r3, #164	; 0xa4
    2b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b26:	681b      	ldr	r3, [r3, #0]
    2b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    2b2a:	4608      	mov	r0, r1
    2b2c:	4619      	mov	r1, r3
    2b2e:	4790      	blx	r2

	return;
    2b30:	bf00      	nop
    2b32:	e000      	b.n	2b36 <vCoRoutineSchedule+0xe2>
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
    2b34:	bf00      	nop

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
    2b36:	f107 0708 	add.w	r7, r7, #8
    2b3a:	46bd      	mov	sp, r7
    2b3c:	bd80      	pop	{r7, pc}
    2b3e:	bf00      	nop

00002b40 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2b40:	b580      	push	{r7, lr}
    2b42:	b082      	sub	sp, #8
    2b44:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2b46:	f04f 0300 	mov.w	r3, #0
    2b4a:	607b      	str	r3, [r7, #4]
    2b4c:	e013      	b.n	2b76 <prvInitialiseCoRoutineLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2b4e:	687a      	ldr	r2, [r7, #4]
    2b50:	4613      	mov	r3, r2
    2b52:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b56:	189b      	adds	r3, r3, r2
    2b58:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b5c:	461a      	mov	r2, r3
    2b5e:	f240 0338 	movw	r3, #56	; 0x38
    2b62:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b66:	18d3      	adds	r3, r2, r3
    2b68:	4618      	mov	r0, r3
    2b6a:	f000 f85f 	bl	2c2c <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2b6e:	687b      	ldr	r3, [r7, #4]
    2b70:	f103 0301 	add.w	r3, r3, #1
    2b74:	607b      	str	r3, [r7, #4]
    2b76:	687b      	ldr	r3, [r7, #4]
    2b78:	2b01      	cmp	r3, #1
    2b7a:	d9e8      	bls.n	2b4e <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2b7c:	f240 0060 	movw	r0, #96	; 0x60
    2b80:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b84:	f000 f852 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2b88:	f240 0074 	movw	r0, #116	; 0x74
    2b8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b90:	f000 f84c 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    2b94:	f240 0090 	movw	r0, #144	; 0x90
    2b98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b9c:	f000 f846 	bl	2c2c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2ba0:	f240 0388 	movw	r3, #136	; 0x88
    2ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ba8:	f240 0260 	movw	r2, #96	; 0x60
    2bac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2bb0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    2bb2:	f240 038c 	movw	r3, #140	; 0x8c
    2bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2bba:	f240 0274 	movw	r2, #116	; 0x74
    2bbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2bc2:	601a      	str	r2, [r3, #0]
}
    2bc4:	f107 0708 	add.w	r7, r7, #8
    2bc8:	46bd      	mov	sp, r7
    2bca:	bd80      	pop	{r7, pc}

00002bcc <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2bcc:	b580      	push	{r7, lr}
    2bce:	b084      	sub	sp, #16
    2bd0:	af00      	add	r7, sp, #0
    2bd2:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2bd4:	687b      	ldr	r3, [r7, #4]
    2bd6:	68db      	ldr	r3, [r3, #12]
    2bd8:	68db      	ldr	r3, [r3, #12]
    2bda:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2bdc:	68bb      	ldr	r3, [r7, #8]
    2bde:	f103 0318 	add.w	r3, r3, #24
    2be2:	4618      	mov	r0, r3
    2be4:	f000 f8b2 	bl	2d4c <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    2be8:	68bb      	ldr	r3, [r7, #8]
    2bea:	f103 0318 	add.w	r3, r3, #24
    2bee:	f240 0090 	movw	r0, #144	; 0x90
    2bf2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2bf6:	4619      	mov	r1, r3
    2bf8:	f000 f846 	bl	2c88 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2bfc:	68bb      	ldr	r3, [r7, #8]
    2bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c00:	f240 03a4 	movw	r3, #164	; 0xa4
    2c04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2c08:	681b      	ldr	r3, [r3, #0]
    2c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c0c:	429a      	cmp	r2, r3
    2c0e:	d303      	bcc.n	2c18 <xCoRoutineRemoveFromEventList+0x4c>
	{
		xReturn = pdTRUE;
    2c10:	f04f 0301 	mov.w	r3, #1
    2c14:	60fb      	str	r3, [r7, #12]
    2c16:	e002      	b.n	2c1e <xCoRoutineRemoveFromEventList+0x52>
	}
	else
	{
		xReturn = pdFALSE;
    2c18:	f04f 0300 	mov.w	r3, #0
    2c1c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    2c1e:	68fb      	ldr	r3, [r7, #12]
}
    2c20:	4618      	mov	r0, r3
    2c22:	f107 0710 	add.w	r7, r7, #16
    2c26:	46bd      	mov	sp, r7
    2c28:	bd80      	pop	{r7, pc}
    2c2a:	bf00      	nop

00002c2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2c2c:	b480      	push	{r7}
    2c2e:	b083      	sub	sp, #12
    2c30:	af00      	add	r7, sp, #0
    2c32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	f103 0208 	add.w	r2, r3, #8
    2c3a:	687b      	ldr	r3, [r7, #4]
    2c3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2c3e:	687b      	ldr	r3, [r7, #4]
    2c40:	f04f 32ff 	mov.w	r2, #4294967295
    2c44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2c46:	687b      	ldr	r3, [r7, #4]
    2c48:	f103 0208 	add.w	r2, r3, #8
    2c4c:	687b      	ldr	r3, [r7, #4]
    2c4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	f103 0208 	add.w	r2, r3, #8
    2c56:	687b      	ldr	r3, [r7, #4]
    2c58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	f04f 0200 	mov.w	r2, #0
    2c60:	601a      	str	r2, [r3, #0]
}
    2c62:	f107 070c 	add.w	r7, r7, #12
    2c66:	46bd      	mov	sp, r7
    2c68:	bc80      	pop	{r7}
    2c6a:	4770      	bx	lr

00002c6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2c6c:	b480      	push	{r7}
    2c6e:	b083      	sub	sp, #12
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	f04f 0200 	mov.w	r2, #0
    2c7a:	611a      	str	r2, [r3, #16]
}
    2c7c:	f107 070c 	add.w	r7, r7, #12
    2c80:	46bd      	mov	sp, r7
    2c82:	bc80      	pop	{r7}
    2c84:	4770      	bx	lr
    2c86:	bf00      	nop

00002c88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2c88:	b480      	push	{r7}
    2c8a:	b085      	sub	sp, #20
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
    2c90:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	685b      	ldr	r3, [r3, #4]
    2c96:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    2c98:	68fb      	ldr	r3, [r7, #12]
    2c9a:	685a      	ldr	r2, [r3, #4]
    2c9c:	683b      	ldr	r3, [r7, #0]
    2c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2ca0:	687b      	ldr	r3, [r7, #4]
    2ca2:	685a      	ldr	r2, [r3, #4]
    2ca4:	683b      	ldr	r3, [r7, #0]
    2ca6:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2ca8:	68fb      	ldr	r3, [r7, #12]
    2caa:	685b      	ldr	r3, [r3, #4]
    2cac:	683a      	ldr	r2, [r7, #0]
    2cae:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2cb0:	68fb      	ldr	r3, [r7, #12]
    2cb2:	683a      	ldr	r2, [r7, #0]
    2cb4:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	683a      	ldr	r2, [r7, #0]
    2cba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2cbc:	683b      	ldr	r3, [r7, #0]
    2cbe:	687a      	ldr	r2, [r7, #4]
    2cc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2cc2:	687b      	ldr	r3, [r7, #4]
    2cc4:	681b      	ldr	r3, [r3, #0]
    2cc6:	f103 0201 	add.w	r2, r3, #1
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	601a      	str	r2, [r3, #0]
}
    2cce:	f107 0714 	add.w	r7, r7, #20
    2cd2:	46bd      	mov	sp, r7
    2cd4:	bc80      	pop	{r7}
    2cd6:	4770      	bx	lr

00002cd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2cd8:	b480      	push	{r7}
    2cda:	b085      	sub	sp, #20
    2cdc:	af00      	add	r7, sp, #0
    2cde:	6078      	str	r0, [r7, #4]
    2ce0:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2ce2:	683b      	ldr	r3, [r7, #0]
    2ce4:	681b      	ldr	r3, [r3, #0]
    2ce6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2ce8:	68bb      	ldr	r3, [r7, #8]
    2cea:	f1b3 3fff 	cmp.w	r3, #4294967295
    2cee:	d103      	bne.n	2cf8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2cf0:	687b      	ldr	r3, [r7, #4]
    2cf2:	691b      	ldr	r3, [r3, #16]
    2cf4:	60fb      	str	r3, [r7, #12]
    2cf6:	e00d      	b.n	2d14 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2cf8:	687b      	ldr	r3, [r7, #4]
    2cfa:	f103 0308 	add.w	r3, r3, #8
    2cfe:	60fb      	str	r3, [r7, #12]
    2d00:	e002      	b.n	2d08 <vListInsert+0x30>
    2d02:	68fb      	ldr	r3, [r7, #12]
    2d04:	685b      	ldr	r3, [r3, #4]
    2d06:	60fb      	str	r3, [r7, #12]
    2d08:	68fb      	ldr	r3, [r7, #12]
    2d0a:	685b      	ldr	r3, [r3, #4]
    2d0c:	681a      	ldr	r2, [r3, #0]
    2d0e:	68bb      	ldr	r3, [r7, #8]
    2d10:	429a      	cmp	r2, r3
    2d12:	d9f6      	bls.n	2d02 <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2d14:	68fb      	ldr	r3, [r7, #12]
    2d16:	685a      	ldr	r2, [r3, #4]
    2d18:	683b      	ldr	r3, [r7, #0]
    2d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2d1c:	683b      	ldr	r3, [r7, #0]
    2d1e:	685b      	ldr	r3, [r3, #4]
    2d20:	683a      	ldr	r2, [r7, #0]
    2d22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2d24:	683b      	ldr	r3, [r7, #0]
    2d26:	68fa      	ldr	r2, [r7, #12]
    2d28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2d2a:	68fb      	ldr	r3, [r7, #12]
    2d2c:	683a      	ldr	r2, [r7, #0]
    2d2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2d30:	683b      	ldr	r3, [r7, #0]
    2d32:	687a      	ldr	r2, [r7, #4]
    2d34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	681b      	ldr	r3, [r3, #0]
    2d3a:	f103 0201 	add.w	r2, r3, #1
    2d3e:	687b      	ldr	r3, [r7, #4]
    2d40:	601a      	str	r2, [r3, #0]
}
    2d42:	f107 0714 	add.w	r7, r7, #20
    2d46:	46bd      	mov	sp, r7
    2d48:	bc80      	pop	{r7}
    2d4a:	4770      	bx	lr

00002d4c <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2d4c:	b480      	push	{r7}
    2d4e:	b085      	sub	sp, #20
    2d50:	af00      	add	r7, sp, #0
    2d52:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2d54:	687b      	ldr	r3, [r7, #4]
    2d56:	685b      	ldr	r3, [r3, #4]
    2d58:	687a      	ldr	r2, [r7, #4]
    2d5a:	6892      	ldr	r2, [r2, #8]
    2d5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2d5e:	687b      	ldr	r3, [r7, #4]
    2d60:	689b      	ldr	r3, [r3, #8]
    2d62:	687a      	ldr	r2, [r7, #4]
    2d64:	6852      	ldr	r2, [r2, #4]
    2d66:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2d68:	687b      	ldr	r3, [r7, #4]
    2d6a:	691b      	ldr	r3, [r3, #16]
    2d6c:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2d6e:	68fb      	ldr	r3, [r7, #12]
    2d70:	685a      	ldr	r2, [r3, #4]
    2d72:	687b      	ldr	r3, [r7, #4]
    2d74:	429a      	cmp	r2, r3
    2d76:	d103      	bne.n	2d80 <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2d78:	687b      	ldr	r3, [r7, #4]
    2d7a:	689a      	ldr	r2, [r3, #8]
    2d7c:	68fb      	ldr	r3, [r7, #12]
    2d7e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	f04f 0200 	mov.w	r2, #0
    2d86:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    2d88:	68fb      	ldr	r3, [r7, #12]
    2d8a:	681b      	ldr	r3, [r3, #0]
    2d8c:	f103 32ff 	add.w	r2, r3, #4294967295
    2d90:	68fb      	ldr	r3, [r7, #12]
    2d92:	601a      	str	r2, [r3, #0]
}
    2d94:	f107 0714 	add.w	r7, r7, #20
    2d98:	46bd      	mov	sp, r7
    2d9a:	bc80      	pop	{r7}
    2d9c:	4770      	bx	lr
    2d9e:	bf00      	nop

00002da0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    2da0:	b580      	push	{r7, lr}
    2da2:	b084      	sub	sp, #16
    2da4:	af00      	add	r7, sp, #0
    2da6:	6078      	str	r0, [r7, #4]
    2da8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    2daa:	f04f 0301 	mov.w	r3, #1
    2dae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    2db0:	683b      	ldr	r3, [r7, #0]
    2db2:	2b01      	cmp	r3, #1
    2db4:	d00d      	beq.n	2dd2 <xQueueGenericReset+0x32>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2db6:	687b      	ldr	r3, [r7, #4]
    2db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2dba:	2b00      	cmp	r3, #0
    2dbc:	d002      	beq.n	2dc4 <xQueueGenericReset+0x24>
		{
			xReturn = pdFAIL;
    2dbe:	f04f 0300 	mov.w	r3, #0
    2dc2:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	691b      	ldr	r3, [r3, #16]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d002      	beq.n	2dd2 <xQueueGenericReset+0x32>
		{
			xReturn = pdFAIL;
    2dcc:	f04f 0300 	mov.w	r3, #0
    2dd0:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	2b01      	cmp	r3, #1
    2dd6:	d133      	bne.n	2e40 <xQueueGenericReset+0xa0>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    2dd8:	687b      	ldr	r3, [r7, #4]
    2dda:	681a      	ldr	r2, [r3, #0]
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2de0:	6879      	ldr	r1, [r7, #4]
    2de2:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2de4:	fb01 f303 	mul.w	r3, r1, r3
    2de8:	18d2      	adds	r2, r2, r3
    2dea:	687b      	ldr	r3, [r7, #4]
    2dec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2dee:	687b      	ldr	r3, [r7, #4]
    2df0:	f04f 0200 	mov.w	r2, #0
    2df4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	681a      	ldr	r2, [r3, #0]
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    2dfe:	687b      	ldr	r3, [r7, #4]
    2e00:	681a      	ldr	r2, [r3, #0]
    2e02:	687b      	ldr	r3, [r7, #4]
    2e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2e06:	f103 33ff 	add.w	r3, r3, #4294967295
    2e0a:	6879      	ldr	r1, [r7, #4]
    2e0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
    2e0e:	fb01 f303 	mul.w	r3, r1, r3
    2e12:	18d2      	adds	r2, r2, r3
    2e14:	687b      	ldr	r3, [r7, #4]
    2e16:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	f04f 32ff 	mov.w	r2, #4294967295
    2e1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    2e20:	687b      	ldr	r3, [r7, #4]
    2e22:	f04f 32ff 	mov.w	r2, #4294967295
    2e26:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    2e28:	687b      	ldr	r3, [r7, #4]
    2e2a:	f103 0310 	add.w	r3, r3, #16
    2e2e:	4618      	mov	r0, r3
    2e30:	f7ff fefc 	bl	2c2c <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    2e34:	687b      	ldr	r3, [r7, #4]
    2e36:	f103 0324 	add.w	r3, r3, #36	; 0x24
    2e3a:	4618      	mov	r0, r3
    2e3c:	f7ff fef6 	bl	2c2c <vListInitialise>
	}

	return xReturn;
    2e40:	68fb      	ldr	r3, [r7, #12]
}
    2e42:	4618      	mov	r0, r3
    2e44:	f107 0710 	add.w	r7, r7, #16
    2e48:	46bd      	mov	sp, r7
    2e4a:	bd80      	pop	{r7, pc}

00002e4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    2e4c:	b580      	push	{r7, lr}
    2e4e:	b088      	sub	sp, #32
    2e50:	af00      	add	r7, sp, #0
    2e52:	60f8      	str	r0, [r7, #12]
    2e54:	60b9      	str	r1, [r7, #8]
    2e56:	4613      	mov	r3, r2
    2e58:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2e5a:	f04f 0300 	mov.w	r3, #0
    2e5e:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2e60:	68fb      	ldr	r3, [r7, #12]
    2e62:	2b00      	cmp	r3, #0
    2e64:	d02d      	beq.n	2ec2 <xQueueGenericCreate+0x76>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2e66:	f04f 0050 	mov.w	r0, #80	; 0x50
    2e6a:	f001 ffed 	bl	4e48 <pvPortMalloc>
    2e6e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    2e70:	69bb      	ldr	r3, [r7, #24]
    2e72:	2b00      	cmp	r3, #0
    2e74:	d025      	beq.n	2ec2 <xQueueGenericCreate+0x76>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2e76:	68fb      	ldr	r3, [r7, #12]
    2e78:	68ba      	ldr	r2, [r7, #8]
    2e7a:	fb02 f303 	mul.w	r3, r2, r3
    2e7e:	f103 0301 	add.w	r3, r3, #1
    2e82:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2e84:	6978      	ldr	r0, [r7, #20]
    2e86:	f001 ffdf 	bl	4e48 <pvPortMalloc>
    2e8a:	4602      	mov	r2, r0
    2e8c:	69bb      	ldr	r3, [r7, #24]
    2e8e:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    2e90:	69bb      	ldr	r3, [r7, #24]
    2e92:	681b      	ldr	r3, [r3, #0]
    2e94:	2b00      	cmp	r3, #0
    2e96:	d011      	beq.n	2ebc <xQueueGenericCreate+0x70>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    2e98:	69bb      	ldr	r3, [r7, #24]
    2e9a:	68fa      	ldr	r2, [r7, #12]
    2e9c:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    2e9e:	69bb      	ldr	r3, [r7, #24]
    2ea0:	68ba      	ldr	r2, [r7, #8]
    2ea2:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    2ea4:	69b8      	ldr	r0, [r7, #24]
    2ea6:	f04f 0101 	mov.w	r1, #1
    2eaa:	f7ff ff79 	bl	2da0 <xQueueGenericReset>
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
    2eae:	69bb      	ldr	r3, [r7, #24]
    2eb0:	79fa      	ldrb	r2, [r7, #7]
    2eb2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2eb6:	69bb      	ldr	r3, [r7, #24]
    2eb8:	61fb      	str	r3, [r7, #28]
    2eba:	e002      	b.n	2ec2 <xQueueGenericCreate+0x76>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    2ebc:	69b8      	ldr	r0, [r7, #24]
    2ebe:	f002 f80f 	bl	4ee0 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2ec2:	69fb      	ldr	r3, [r7, #28]
}
    2ec4:	4618      	mov	r0, r3
    2ec6:	f107 0720 	add.w	r7, r7, #32
    2eca:	46bd      	mov	sp, r7
    2ecc:	bd80      	pop	{r7, pc}
    2ece:	bf00      	nop

00002ed0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    2ed0:	b580      	push	{r7, lr}
    2ed2:	b084      	sub	sp, #16
    2ed4:	af00      	add	r7, sp, #0
    2ed6:	4603      	mov	r3, r0
    2ed8:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2eda:	f04f 0050 	mov.w	r0, #80	; 0x50
    2ede:	f001 ffb3 	bl	4e48 <pvPortMalloc>
    2ee2:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    2ee4:	68fb      	ldr	r3, [r7, #12]
    2ee6:	2b00      	cmp	r3, #0
    2ee8:	d03c      	beq.n	2f64 <xQueueCreateMutex+0x94>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2eea:	68fb      	ldr	r3, [r7, #12]
    2eec:	f04f 0200 	mov.w	r2, #0
    2ef0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2ef2:	68fb      	ldr	r3, [r7, #12]
    2ef4:	f04f 0200 	mov.w	r2, #0
    2ef8:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2efa:	68fb      	ldr	r3, [r7, #12]
    2efc:	f04f 0200 	mov.w	r2, #0
    2f00:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    2f02:	68fb      	ldr	r3, [r7, #12]
    2f04:	f04f 0200 	mov.w	r2, #0
    2f08:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2f0a:	68fb      	ldr	r3, [r7, #12]
    2f0c:	f04f 0200 	mov.w	r2, #0
    2f10:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	f04f 0201 	mov.w	r2, #1
    2f18:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2f1a:	68fb      	ldr	r3, [r7, #12]
    2f1c:	f04f 0200 	mov.w	r2, #0
    2f20:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    2f22:	68fb      	ldr	r3, [r7, #12]
    2f24:	f04f 32ff 	mov.w	r2, #4294967295
    2f28:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    2f2a:	68fb      	ldr	r3, [r7, #12]
    2f2c:	f04f 32ff 	mov.w	r2, #4294967295
    2f30:	649a      	str	r2, [r3, #72]	; 0x48

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
    2f32:	68fb      	ldr	r3, [r7, #12]
    2f34:	79fa      	ldrb	r2, [r7, #7]
    2f36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2f3a:	68fb      	ldr	r3, [r7, #12]
    2f3c:	f103 0310 	add.w	r3, r3, #16
    2f40:	4618      	mov	r0, r3
    2f42:	f7ff fe73 	bl	2c2c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2f46:	68fb      	ldr	r3, [r7, #12]
    2f48:	f103 0324 	add.w	r3, r3, #36	; 0x24
    2f4c:	4618      	mov	r0, r3
    2f4e:	f7ff fe6d 	bl	2c2c <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2f52:	68f8      	ldr	r0, [r7, #12]
    2f54:	f04f 0100 	mov.w	r1, #0
    2f58:	f04f 0200 	mov.w	r2, #0
    2f5c:	f04f 0300 	mov.w	r3, #0
    2f60:	f000 f820 	bl	2fa4 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2f64:	68fb      	ldr	r3, [r7, #12]
	}
    2f66:	4618      	mov	r0, r3
    2f68:	f107 0710 	add.w	r7, r7, #16
    2f6c:	46bd      	mov	sp, r7
    2f6e:	bd80      	pop	{r7, pc}

00002f70 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    2f70:	b580      	push	{r7, lr}
    2f72:	b084      	sub	sp, #16
    2f74:	af00      	add	r7, sp, #0
    2f76:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    2f78:	f001 fee2 	bl	4d40 <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	681b      	ldr	r3, [r3, #0]
    2f80:	2b00      	cmp	r3, #0
    2f82:	d103      	bne.n	2f8c <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	685b      	ldr	r3, [r3, #4]
    2f88:	60fb      	str	r3, [r7, #12]
    2f8a:	e002      	b.n	2f92 <xQueueGetMutexHolder+0x22>
			}
			else
			{
				pxReturn = NULL;
    2f8c:	f04f 0300 	mov.w	r3, #0
    2f90:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    2f92:	f001 feeb 	bl	4d6c <vPortExitCritical>
		
		return pxReturn;
    2f96:	68fb      	ldr	r3, [r7, #12]
	}
    2f98:	4618      	mov	r0, r3
    2f9a:	f107 0710 	add.w	r7, r7, #16
    2f9e:	46bd      	mov	sp, r7
    2fa0:	bd80      	pop	{r7, pc}
    2fa2:	bf00      	nop

00002fa4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2fa4:	b580      	push	{r7, lr}
    2fa6:	b088      	sub	sp, #32
    2fa8:	af00      	add	r7, sp, #0
    2faa:	60f8      	str	r0, [r7, #12]
    2fac:	60b9      	str	r1, [r7, #8]
    2fae:	607a      	str	r2, [r7, #4]
    2fb0:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2fb2:	f04f 0300 	mov.w	r3, #0
    2fb6:	61fb      	str	r3, [r7, #28]
    2fb8:	e000      	b.n	2fbc <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    2fba:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2fbc:	f001 fec0 	bl	4d40 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2fc0:	68fb      	ldr	r3, [r7, #12]
    2fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2fc4:	68fb      	ldr	r3, [r7, #12]
    2fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    2fc8:	429a      	cmp	r2, r3
    2fca:	d218      	bcs.n	2ffe <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2fcc:	68f8      	ldr	r0, [r7, #12]
    2fce:	68b9      	ldr	r1, [r7, #8]
    2fd0:	683a      	ldr	r2, [r7, #0]
    2fd2:	f000 fa29 	bl	3428 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2fd6:	68fb      	ldr	r3, [r7, #12]
    2fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2fda:	2b00      	cmp	r3, #0
    2fdc:	d00a      	beq.n	2ff4 <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2fde:	68fb      	ldr	r3, [r7, #12]
    2fe0:	f103 0324 	add.w	r3, r3, #36	; 0x24
    2fe4:	4618      	mov	r0, r3
    2fe6:	f001 fa69 	bl	44bc <xTaskRemoveFromEventList>
    2fea:	4603      	mov	r3, r0
    2fec:	2b01      	cmp	r3, #1
    2fee:	d101      	bne.n	2ff4 <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2ff0:	f001 fe9a 	bl	4d28 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    2ff4:	f001 feba 	bl	4d6c <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2ff8:	f04f 0301 	mov.w	r3, #1
    2ffc:	e05d      	b.n	30ba <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2ffe:	687b      	ldr	r3, [r7, #4]
    3000:	2b00      	cmp	r3, #0
    3002:	d104      	bne.n	300e <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3004:	f001 feb2 	bl	4d6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    3008:	f04f 0300 	mov.w	r3, #0
    300c:	e055      	b.n	30ba <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    300e:	69fb      	ldr	r3, [r7, #28]
    3010:	2b00      	cmp	r3, #0
    3012:	d107      	bne.n	3024 <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3014:	f107 0314 	add.w	r3, r7, #20
    3018:	4618      	mov	r0, r3
    301a:	f001 fab1 	bl	4580 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    301e:	f04f 0301 	mov.w	r3, #1
    3022:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    3024:	f001 fea2 	bl	4d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3028:	f000 ff34 	bl	3e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    302c:	f001 fe88 	bl	4d40 <vPortEnterCritical>
    3030:	68fb      	ldr	r3, [r7, #12]
    3032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3034:	f1b3 3fff 	cmp.w	r3, #4294967295
    3038:	d103      	bne.n	3042 <xQueueGenericSend+0x9e>
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	f04f 0200 	mov.w	r2, #0
    3040:	645a      	str	r2, [r3, #68]	; 0x44
    3042:	68fb      	ldr	r3, [r7, #12]
    3044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3046:	f1b3 3fff 	cmp.w	r3, #4294967295
    304a:	d103      	bne.n	3054 <xQueueGenericSend+0xb0>
    304c:	68fb      	ldr	r3, [r7, #12]
    304e:	f04f 0200 	mov.w	r2, #0
    3052:	649a      	str	r2, [r3, #72]	; 0x48
    3054:	f001 fe8a 	bl	4d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3058:	f107 0314 	add.w	r3, r7, #20
    305c:	4618      	mov	r0, r3
    305e:	f107 0304 	add.w	r3, r7, #4
    3062:	4619      	mov	r1, r3
    3064:	f001 faa4 	bl	45b0 <xTaskCheckForTimeOut>
    3068:	4603      	mov	r3, r0
    306a:	2b00      	cmp	r3, #0
    306c:	d11e      	bne.n	30ac <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    306e:	68f8      	ldr	r0, [r7, #12]
    3070:	f000 fade 	bl	3630 <prvIsQueueFull>
    3074:	4603      	mov	r3, r0
    3076:	2b00      	cmp	r3, #0
    3078:	d012      	beq.n	30a0 <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    307a:	68fb      	ldr	r3, [r7, #12]
    307c:	f103 0210 	add.w	r2, r3, #16
    3080:	687b      	ldr	r3, [r7, #4]
    3082:	4610      	mov	r0, r2
    3084:	4619      	mov	r1, r3
    3086:	f001 f9dd 	bl	4444 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    308a:	68f8      	ldr	r0, [r7, #12]
    308c:	f000 fa58 	bl	3540 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3090:	f000 ff12 	bl	3eb8 <xTaskResumeAll>
    3094:	4603      	mov	r3, r0
    3096:	2b00      	cmp	r3, #0
    3098:	d18f      	bne.n	2fba <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    309a:	f001 fe45 	bl	4d28 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    309e:	e78c      	b.n	2fba <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    30a0:	68f8      	ldr	r0, [r7, #12]
    30a2:	f000 fa4d 	bl	3540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    30a6:	f000 ff07 	bl	3eb8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    30aa:	e786      	b.n	2fba <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    30ac:	68f8      	ldr	r0, [r7, #12]
    30ae:	f000 fa47 	bl	3540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    30b2:	f000 ff01 	bl	3eb8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    30b6:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    30ba:	4618      	mov	r0, r3
    30bc:	f107 0720 	add.w	r7, r7, #32
    30c0:	46bd      	mov	sp, r7
    30c2:	bd80      	pop	{r7, pc}

000030c4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    30c4:	b580      	push	{r7, lr}
    30c6:	b086      	sub	sp, #24
    30c8:	af00      	add	r7, sp, #0
    30ca:	60f8      	str	r0, [r7, #12]
    30cc:	60b9      	str	r1, [r7, #8]
    30ce:	607a      	str	r2, [r7, #4]
    30d0:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    30d2:	f04f 0300 	mov.w	r3, #0
    30d6:	613b      	str	r3, [r7, #16]
    30d8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    30dc:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    30e0:	68fb      	ldr	r3, [r7, #12]
    30e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    30e4:	68fb      	ldr	r3, [r7, #12]
    30e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    30e8:	429a      	cmp	r2, r3
    30ea:	d225      	bcs.n	3138 <xQueueGenericSendFromISR+0x74>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    30ec:	68f8      	ldr	r0, [r7, #12]
    30ee:	68b9      	ldr	r1, [r7, #8]
    30f0:	683a      	ldr	r2, [r7, #0]
    30f2:	f000 f999 	bl	3428 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    30f6:	68fb      	ldr	r3, [r7, #12]
    30f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    30fa:	f1b3 3fff 	cmp.w	r3, #4294967295
    30fe:	d111      	bne.n	3124 <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3100:	68fb      	ldr	r3, [r7, #12]
    3102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3104:	2b00      	cmp	r3, #0
    3106:	d013      	beq.n	3130 <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3108:	68fb      	ldr	r3, [r7, #12]
    310a:	f103 0324 	add.w	r3, r3, #36	; 0x24
    310e:	4618      	mov	r0, r3
    3110:	f001 f9d4 	bl	44bc <xTaskRemoveFromEventList>
    3114:	4603      	mov	r3, r0
    3116:	2b00      	cmp	r3, #0
    3118:	d00a      	beq.n	3130 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	f04f 0201 	mov.w	r2, #1
    3120:	601a      	str	r2, [r3, #0]
    3122:	e005      	b.n	3130 <xQueueGenericSendFromISR+0x6c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    3124:	68fb      	ldr	r3, [r7, #12]
    3126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3128:	f103 0201 	add.w	r2, r3, #1
    312c:	68fb      	ldr	r3, [r7, #12]
    312e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    3130:	f04f 0301 	mov.w	r3, #1
    3134:	617b      	str	r3, [r7, #20]
    3136:	e002      	b.n	313e <xQueueGenericSendFromISR+0x7a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3138:	f04f 0300 	mov.w	r3, #0
    313c:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    313e:	f04f 0000 	mov.w	r0, #0
    3142:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3146:	697b      	ldr	r3, [r7, #20]
}
    3148:	4618      	mov	r0, r3
    314a:	f107 0718 	add.w	r7, r7, #24
    314e:	46bd      	mov	sp, r7
    3150:	bd80      	pop	{r7, pc}
    3152:	bf00      	nop

00003154 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3154:	b580      	push	{r7, lr}
    3156:	b088      	sub	sp, #32
    3158:	af00      	add	r7, sp, #0
    315a:	60f8      	str	r0, [r7, #12]
    315c:	60b9      	str	r1, [r7, #8]
    315e:	607a      	str	r2, [r7, #4]
    3160:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3162:	f04f 0300 	mov.w	r3, #0
    3166:	61fb      	str	r3, [r7, #28]
    3168:	e000      	b.n	316c <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    316a:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    316c:	f001 fde8 	bl	4d40 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3170:	68fb      	ldr	r3, [r7, #12]
    3172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3174:	2b00      	cmp	r3, #0
    3176:	d03f      	beq.n	31f8 <xQueueGenericReceive+0xa4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    3178:	68fb      	ldr	r3, [r7, #12]
    317a:	68db      	ldr	r3, [r3, #12]
    317c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    317e:	68f8      	ldr	r0, [r7, #12]
    3180:	68b9      	ldr	r1, [r7, #8]
    3182:	f000 f9b5 	bl	34f0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    3186:	683b      	ldr	r3, [r7, #0]
    3188:	2b00      	cmp	r3, #0
    318a:	d11e      	bne.n	31ca <xQueueGenericReceive+0x76>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    318c:	68fb      	ldr	r3, [r7, #12]
    318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3190:	f103 32ff 	add.w	r2, r3, #4294967295
    3194:	68fb      	ldr	r3, [r7, #12]
    3196:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3198:	68fb      	ldr	r3, [r7, #12]
    319a:	681b      	ldr	r3, [r3, #0]
    319c:	2b00      	cmp	r3, #0
    319e:	d104      	bne.n	31aa <xQueueGenericReceive+0x56>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    31a0:	f001 fc86 	bl	4ab0 <xTaskGetCurrentTaskHandle>
    31a4:	4602      	mov	r2, r0
    31a6:	68fb      	ldr	r3, [r7, #12]
    31a8:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    31aa:	68fb      	ldr	r3, [r7, #12]
    31ac:	691b      	ldr	r3, [r3, #16]
    31ae:	2b00      	cmp	r3, #0
    31b0:	d01d      	beq.n	31ee <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    31b2:	68fb      	ldr	r3, [r7, #12]
    31b4:	f103 0310 	add.w	r3, r3, #16
    31b8:	4618      	mov	r0, r3
    31ba:	f001 f97f 	bl	44bc <xTaskRemoveFromEventList>
    31be:	4603      	mov	r3, r0
    31c0:	2b01      	cmp	r3, #1
    31c2:	d114      	bne.n	31ee <xQueueGenericReceive+0x9a>
						{
							portYIELD_WITHIN_API();
    31c4:	f001 fdb0 	bl	4d28 <vPortYieldFromISR>
    31c8:	e011      	b.n	31ee <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    31ca:	68fb      	ldr	r3, [r7, #12]
    31cc:	69ba      	ldr	r2, [r7, #24]
    31ce:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31d0:	68fb      	ldr	r3, [r7, #12]
    31d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    31d4:	2b00      	cmp	r3, #0
    31d6:	d00a      	beq.n	31ee <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31d8:	68fb      	ldr	r3, [r7, #12]
    31da:	f103 0324 	add.w	r3, r3, #36	; 0x24
    31de:	4618      	mov	r0, r3
    31e0:	f001 f96c 	bl	44bc <xTaskRemoveFromEventList>
    31e4:	4603      	mov	r3, r0
    31e6:	2b00      	cmp	r3, #0
    31e8:	d001      	beq.n	31ee <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    31ea:	f001 fd9d 	bl	4d28 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    31ee:	f001 fdbd 	bl	4d6c <vPortExitCritical>
				return pdPASS;
    31f2:	f04f 0301 	mov.w	r3, #1
    31f6:	e06b      	b.n	32d0 <xQueueGenericReceive+0x17c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	2b00      	cmp	r3, #0
    31fc:	d104      	bne.n	3208 <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    31fe:	f001 fdb5 	bl	4d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    3202:	f04f 0300 	mov.w	r3, #0
    3206:	e063      	b.n	32d0 <xQueueGenericReceive+0x17c>
				}
				else if( xEntryTimeSet == pdFALSE )
    3208:	69fb      	ldr	r3, [r7, #28]
    320a:	2b00      	cmp	r3, #0
    320c:	d107      	bne.n	321e <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    320e:	f107 0310 	add.w	r3, r7, #16
    3212:	4618      	mov	r0, r3
    3214:	f001 f9b4 	bl	4580 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    3218:	f04f 0301 	mov.w	r3, #1
    321c:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    321e:	f001 fda5 	bl	4d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3222:	f000 fe37 	bl	3e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3226:	f001 fd8b 	bl	4d40 <vPortEnterCritical>
    322a:	68fb      	ldr	r3, [r7, #12]
    322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    322e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3232:	d103      	bne.n	323c <xQueueGenericReceive+0xe8>
    3234:	68fb      	ldr	r3, [r7, #12]
    3236:	f04f 0200 	mov.w	r2, #0
    323a:	645a      	str	r2, [r3, #68]	; 0x44
    323c:	68fb      	ldr	r3, [r7, #12]
    323e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3240:	f1b3 3fff 	cmp.w	r3, #4294967295
    3244:	d103      	bne.n	324e <xQueueGenericReceive+0xfa>
    3246:	68fb      	ldr	r3, [r7, #12]
    3248:	f04f 0200 	mov.w	r2, #0
    324c:	649a      	str	r2, [r3, #72]	; 0x48
    324e:	f001 fd8d 	bl	4d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3252:	f107 0310 	add.w	r3, r7, #16
    3256:	4618      	mov	r0, r3
    3258:	f107 0304 	add.w	r3, r7, #4
    325c:	4619      	mov	r1, r3
    325e:	f001 f9a7 	bl	45b0 <xTaskCheckForTimeOut>
    3262:	4603      	mov	r3, r0
    3264:	2b00      	cmp	r3, #0
    3266:	d12c      	bne.n	32c2 <xQueueGenericReceive+0x16e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3268:	68f8      	ldr	r0, [r7, #12]
    326a:	f000 f9b9 	bl	35e0 <prvIsQueueEmpty>
    326e:	4603      	mov	r3, r0
    3270:	2b00      	cmp	r3, #0
    3272:	d020      	beq.n	32b6 <xQueueGenericReceive+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3274:	68fb      	ldr	r3, [r7, #12]
    3276:	681b      	ldr	r3, [r3, #0]
    3278:	2b00      	cmp	r3, #0
    327a:	d108      	bne.n	328e <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
    327c:	f001 fd60 	bl	4d40 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    3280:	68fb      	ldr	r3, [r7, #12]
    3282:	685b      	ldr	r3, [r3, #4]
    3284:	4618      	mov	r0, r3
    3286:	f001 fc23 	bl	4ad0 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    328a:	f001 fd6f 	bl	4d6c <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    328e:	68fb      	ldr	r3, [r7, #12]
    3290:	f103 0224 	add.w	r2, r3, #36	; 0x24
    3294:	687b      	ldr	r3, [r7, #4]
    3296:	4610      	mov	r0, r2
    3298:	4619      	mov	r1, r3
    329a:	f001 f8d3 	bl	4444 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    329e:	68f8      	ldr	r0, [r7, #12]
    32a0:	f000 f94e 	bl	3540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    32a4:	f000 fe08 	bl	3eb8 <xTaskResumeAll>
    32a8:	4603      	mov	r3, r0
    32aa:	2b00      	cmp	r3, #0
    32ac:	f47f af5d 	bne.w	316a <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
    32b0:	f001 fd3a 	bl	4d28 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    32b4:	e759      	b.n	316a <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    32b6:	68f8      	ldr	r0, [r7, #12]
    32b8:	f000 f942 	bl	3540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    32bc:	f000 fdfc 	bl	3eb8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    32c0:	e753      	b.n	316a <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    32c2:	68f8      	ldr	r0, [r7, #12]
    32c4:	f000 f93c 	bl	3540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    32c8:	f000 fdf6 	bl	3eb8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    32cc:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    32d0:	4618      	mov	r0, r3
    32d2:	f107 0720 	add.w	r7, r7, #32
    32d6:	46bd      	mov	sp, r7
    32d8:	bd80      	pop	{r7, pc}
    32da:	bf00      	nop

000032dc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    32dc:	b580      	push	{r7, lr}
    32de:	b086      	sub	sp, #24
    32e0:	af00      	add	r7, sp, #0
    32e2:	60f8      	str	r0, [r7, #12]
    32e4:	60b9      	str	r1, [r7, #8]
    32e6:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    32e8:	f04f 0300 	mov.w	r3, #0
    32ec:	613b      	str	r3, [r7, #16]
    32ee:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    32f2:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    32f6:	68fb      	ldr	r3, [r7, #12]
    32f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32fa:	2b00      	cmp	r3, #0
    32fc:	d02a      	beq.n	3354 <xQueueReceiveFromISR+0x78>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    32fe:	68f8      	ldr	r0, [r7, #12]
    3300:	68b9      	ldr	r1, [r7, #8]
    3302:	f000 f8f5 	bl	34f0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3306:	68fb      	ldr	r3, [r7, #12]
    3308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    330a:	f103 32ff 	add.w	r2, r3, #4294967295
    330e:	68fb      	ldr	r3, [r7, #12]
    3310:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    3312:	68fb      	ldr	r3, [r7, #12]
    3314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3316:	f1b3 3fff 	cmp.w	r3, #4294967295
    331a:	d111      	bne.n	3340 <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    331c:	68fb      	ldr	r3, [r7, #12]
    331e:	691b      	ldr	r3, [r3, #16]
    3320:	2b00      	cmp	r3, #0
    3322:	d013      	beq.n	334c <xQueueReceiveFromISR+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3324:	68fb      	ldr	r3, [r7, #12]
    3326:	f103 0310 	add.w	r3, r3, #16
    332a:	4618      	mov	r0, r3
    332c:	f001 f8c6 	bl	44bc <xTaskRemoveFromEventList>
    3330:	4603      	mov	r3, r0
    3332:	2b00      	cmp	r3, #0
    3334:	d00a      	beq.n	334c <xQueueReceiveFromISR+0x70>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	f04f 0201 	mov.w	r2, #1
    333c:	601a      	str	r2, [r3, #0]
    333e:	e005      	b.n	334c <xQueueReceiveFromISR+0x70>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3340:	68fb      	ldr	r3, [r7, #12]
    3342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3344:	f103 0201 	add.w	r2, r3, #1
    3348:	68fb      	ldr	r3, [r7, #12]
    334a:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    334c:	f04f 0301 	mov.w	r3, #1
    3350:	617b      	str	r3, [r7, #20]
    3352:	e002      	b.n	335a <xQueueReceiveFromISR+0x7e>
		}
		else
		{
			xReturn = pdFAIL;
    3354:	f04f 0300 	mov.w	r3, #0
    3358:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    335a:	f04f 0000 	mov.w	r0, #0
    335e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    3362:	697b      	ldr	r3, [r7, #20]
}
    3364:	4618      	mov	r0, r3
    3366:	f107 0718 	add.w	r7, r7, #24
    336a:	46bd      	mov	sp, r7
    336c:	bd80      	pop	{r7, pc}
    336e:	bf00      	nop

00003370 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3370:	b580      	push	{r7, lr}
    3372:	b084      	sub	sp, #16
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3378:	f001 fce2 	bl	4d40 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    337c:	687b      	ldr	r3, [r7, #4]
    337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3380:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    3382:	f001 fcf3 	bl	4d6c <vPortExitCritical>

	return uxReturn;
    3386:	68fb      	ldr	r3, [r7, #12]
}
    3388:	4618      	mov	r0, r3
    338a:	f107 0710 	add.w	r7, r7, #16
    338e:	46bd      	mov	sp, r7
    3390:	bd80      	pop	{r7, pc}
    3392:	bf00      	nop

00003394 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    3394:	b480      	push	{r7}
    3396:	b085      	sub	sp, #20
    3398:	af00      	add	r7, sp, #0
    339a:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    339c:	687b      	ldr	r3, [r7, #4]
    339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    33a0:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    33a2:	68fb      	ldr	r3, [r7, #12]
}
    33a4:	4618      	mov	r0, r3
    33a6:	f107 0714 	add.w	r7, r7, #20
    33aa:	46bd      	mov	sp, r7
    33ac:	bc80      	pop	{r7}
    33ae:	4770      	bx	lr

000033b0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b082      	sub	sp, #8
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    33b8:	687b      	ldr	r3, [r7, #4]
    33ba:	681b      	ldr	r3, [r3, #0]
    33bc:	4618      	mov	r0, r3
    33be:	f001 fd8f 	bl	4ee0 <vPortFree>
	vPortFree( pxQueue );
    33c2:	6878      	ldr	r0, [r7, #4]
    33c4:	f001 fd8c 	bl	4ee0 <vPortFree>
}
    33c8:	f107 0708 	add.w	r7, r7, #8
    33cc:	46bd      	mov	sp, r7
    33ce:	bd80      	pop	{r7, pc}

000033d0 <ucQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueNumber( xQueueHandle pxQueue )
	{
    33d0:	b480      	push	{r7}
    33d2:	b083      	sub	sp, #12
    33d4:	af00      	add	r7, sp, #0
    33d6:	6078      	str	r0, [r7, #4]
		return pxQueue->ucQueueNumber;
    33d8:	687b      	ldr	r3, [r7, #4]
    33da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    33de:	4618      	mov	r0, r3
    33e0:	f107 070c 	add.w	r7, r7, #12
    33e4:	46bd      	mov	sp, r7
    33e6:	bc80      	pop	{r7}
    33e8:	4770      	bx	lr
    33ea:	bf00      	nop

000033ec <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( xQueueHandle pxQueue, unsigned char ucQueueNumber )
	{
    33ec:	b480      	push	{r7}
    33ee:	b083      	sub	sp, #12
    33f0:	af00      	add	r7, sp, #0
    33f2:	6078      	str	r0, [r7, #4]
    33f4:	460b      	mov	r3, r1
    33f6:	70fb      	strb	r3, [r7, #3]
		pxQueue->ucQueueNumber = ucQueueNumber;
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	78fa      	ldrb	r2, [r7, #3]
    33fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}
    3400:	f107 070c 	add.w	r7, r7, #12
    3404:	46bd      	mov	sp, r7
    3406:	bc80      	pop	{r7}
    3408:	4770      	bx	lr
    340a:	bf00      	nop

0000340c <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	unsigned char ucQueueGetQueueType( xQueueHandle pxQueue )
	{
    340c:	b480      	push	{r7}
    340e:	b083      	sub	sp, #12
    3410:	af00      	add	r7, sp, #0
    3412:	6078      	str	r0, [r7, #4]
		return pxQueue->ucQueueType;
    3414:	687b      	ldr	r3, [r7, #4]
    3416:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
	}
    341a:	4618      	mov	r0, r3
    341c:	f107 070c 	add.w	r7, r7, #12
    3420:	46bd      	mov	sp, r7
    3422:	bc80      	pop	{r7}
    3424:	4770      	bx	lr
    3426:	bf00      	nop

00003428 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    3428:	b580      	push	{r7, lr}
    342a:	b084      	sub	sp, #16
    342c:	af00      	add	r7, sp, #0
    342e:	60f8      	str	r0, [r7, #12]
    3430:	60b9      	str	r1, [r7, #8]
    3432:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3434:	68fb      	ldr	r3, [r7, #12]
    3436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3438:	2b00      	cmp	r3, #0
    343a:	d10d      	bne.n	3458 <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    343c:	68fb      	ldr	r3, [r7, #12]
    343e:	681b      	ldr	r3, [r3, #0]
    3440:	2b00      	cmp	r3, #0
    3442:	d14a      	bne.n	34da <prvCopyDataToQueue+0xb2>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    3444:	68fb      	ldr	r3, [r7, #12]
    3446:	685b      	ldr	r3, [r3, #4]
    3448:	4618      	mov	r0, r3
    344a:	f001 fbad 	bl	4ba8 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    344e:	68fb      	ldr	r3, [r7, #12]
    3450:	f04f 0200 	mov.w	r2, #0
    3454:	605a      	str	r2, [r3, #4]
    3456:	e040      	b.n	34da <prvCopyDataToQueue+0xb2>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	2b00      	cmp	r3, #0
    345c:	d11b      	bne.n	3496 <prvCopyDataToQueue+0x6e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    345e:	68fb      	ldr	r3, [r7, #12]
    3460:	6899      	ldr	r1, [r3, #8]
    3462:	68fb      	ldr	r3, [r7, #12]
    3464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3466:	68ba      	ldr	r2, [r7, #8]
    3468:	4608      	mov	r0, r1
    346a:	4611      	mov	r1, r2
    346c:	461a      	mov	r2, r3
    346e:	f002 fe0b 	bl	6088 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3472:	68fb      	ldr	r3, [r7, #12]
    3474:	689a      	ldr	r2, [r3, #8]
    3476:	68fb      	ldr	r3, [r7, #12]
    3478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    347a:	18d2      	adds	r2, r2, r3
    347c:	68fb      	ldr	r3, [r7, #12]
    347e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3480:	68fb      	ldr	r3, [r7, #12]
    3482:	689a      	ldr	r2, [r3, #8]
    3484:	68fb      	ldr	r3, [r7, #12]
    3486:	685b      	ldr	r3, [r3, #4]
    3488:	429a      	cmp	r2, r3
    348a:	d326      	bcc.n	34da <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    348c:	68fb      	ldr	r3, [r7, #12]
    348e:	681a      	ldr	r2, [r3, #0]
    3490:	68fb      	ldr	r3, [r7, #12]
    3492:	609a      	str	r2, [r3, #8]
    3494:	e021      	b.n	34da <prvCopyDataToQueue+0xb2>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3496:	68fb      	ldr	r3, [r7, #12]
    3498:	68d9      	ldr	r1, [r3, #12]
    349a:	68fb      	ldr	r3, [r7, #12]
    349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    349e:	68ba      	ldr	r2, [r7, #8]
    34a0:	4608      	mov	r0, r1
    34a2:	4611      	mov	r1, r2
    34a4:	461a      	mov	r2, r3
    34a6:	f002 fdef 	bl	6088 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    34aa:	68fb      	ldr	r3, [r7, #12]
    34ac:	68da      	ldr	r2, [r3, #12]
    34ae:	68fb      	ldr	r3, [r7, #12]
    34b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    34b2:	f1c3 0300 	rsb	r3, r3, #0
    34b6:	18d2      	adds	r2, r2, r3
    34b8:	68fb      	ldr	r3, [r7, #12]
    34ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    34bc:	68fb      	ldr	r3, [r7, #12]
    34be:	68da      	ldr	r2, [r3, #12]
    34c0:	68fb      	ldr	r3, [r7, #12]
    34c2:	681b      	ldr	r3, [r3, #0]
    34c4:	429a      	cmp	r2, r3
    34c6:	d208      	bcs.n	34da <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    34c8:	68fb      	ldr	r3, [r7, #12]
    34ca:	685a      	ldr	r2, [r3, #4]
    34cc:	68fb      	ldr	r3, [r7, #12]
    34ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    34d0:	f1c3 0300 	rsb	r3, r3, #0
    34d4:	18d2      	adds	r2, r2, r3
    34d6:	68fb      	ldr	r3, [r7, #12]
    34d8:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    34da:	68fb      	ldr	r3, [r7, #12]
    34dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    34de:	f103 0201 	add.w	r2, r3, #1
    34e2:	68fb      	ldr	r3, [r7, #12]
    34e4:	639a      	str	r2, [r3, #56]	; 0x38
}
    34e6:	f107 0710 	add.w	r7, r7, #16
    34ea:	46bd      	mov	sp, r7
    34ec:	bd80      	pop	{r7, pc}
    34ee:	bf00      	nop

000034f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    34f0:	b580      	push	{r7, lr}
    34f2:	b082      	sub	sp, #8
    34f4:	af00      	add	r7, sp, #0
    34f6:	6078      	str	r0, [r7, #4]
    34f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    34fa:	687b      	ldr	r3, [r7, #4]
    34fc:	681b      	ldr	r3, [r3, #0]
    34fe:	2b00      	cmp	r3, #0
    3500:	d01a      	beq.n	3538 <prvCopyDataFromQueue+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    3502:	687b      	ldr	r3, [r7, #4]
    3504:	68da      	ldr	r2, [r3, #12]
    3506:	687b      	ldr	r3, [r7, #4]
    3508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    350a:	18d2      	adds	r2, r2, r3
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3510:	687b      	ldr	r3, [r7, #4]
    3512:	68da      	ldr	r2, [r3, #12]
    3514:	687b      	ldr	r3, [r7, #4]
    3516:	685b      	ldr	r3, [r3, #4]
    3518:	429a      	cmp	r2, r3
    351a:	d303      	bcc.n	3524 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	681a      	ldr	r2, [r3, #0]
    3520:	687b      	ldr	r3, [r7, #4]
    3522:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3524:	687b      	ldr	r3, [r7, #4]
    3526:	68da      	ldr	r2, [r3, #12]
    3528:	687b      	ldr	r3, [r7, #4]
    352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    352c:	6839      	ldr	r1, [r7, #0]
    352e:	4608      	mov	r0, r1
    3530:	4611      	mov	r1, r2
    3532:	461a      	mov	r2, r3
    3534:	f002 fda8 	bl	6088 <memcpy>
	}
}
    3538:	f107 0708 	add.w	r7, r7, #8
    353c:	46bd      	mov	sp, r7
    353e:	bd80      	pop	{r7, pc}

00003540 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3540:	b580      	push	{r7, lr}
    3542:	b082      	sub	sp, #8
    3544:	af00      	add	r7, sp, #0
    3546:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3548:	f001 fbfa 	bl	4d40 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    354c:	e014      	b.n	3578 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3552:	2b00      	cmp	r3, #0
    3554:	d015      	beq.n	3582 <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3556:	687b      	ldr	r3, [r7, #4]
    3558:	f103 0324 	add.w	r3, r3, #36	; 0x24
    355c:	4618      	mov	r0, r3
    355e:	f000 ffad 	bl	44bc <xTaskRemoveFromEventList>
    3562:	4603      	mov	r3, r0
    3564:	2b00      	cmp	r3, #0
    3566:	d001      	beq.n	356c <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3568:	f001 f874 	bl	4654 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    356c:	687b      	ldr	r3, [r7, #4]
    356e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3570:	f103 32ff 	add.w	r2, r3, #4294967295
    3574:	687b      	ldr	r3, [r7, #4]
    3576:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    357c:	2b00      	cmp	r3, #0
    357e:	dce6      	bgt.n	354e <prvUnlockQueue+0xe>
    3580:	e000      	b.n	3584 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
    3582:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3584:	687b      	ldr	r3, [r7, #4]
    3586:	f04f 32ff 	mov.w	r2, #4294967295
    358a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    358c:	f001 fbee 	bl	4d6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3590:	f001 fbd6 	bl	4d40 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3594:	e014      	b.n	35c0 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	691b      	ldr	r3, [r3, #16]
    359a:	2b00      	cmp	r3, #0
    359c:	d015      	beq.n	35ca <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    359e:	687b      	ldr	r3, [r7, #4]
    35a0:	f103 0310 	add.w	r3, r3, #16
    35a4:	4618      	mov	r0, r3
    35a6:	f000 ff89 	bl	44bc <xTaskRemoveFromEventList>
    35aa:	4603      	mov	r3, r0
    35ac:	2b00      	cmp	r3, #0
    35ae:	d001      	beq.n	35b4 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
    35b0:	f001 f850 	bl	4654 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    35b4:	687b      	ldr	r3, [r7, #4]
    35b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    35b8:	f103 32ff 	add.w	r2, r3, #4294967295
    35bc:	687b      	ldr	r3, [r7, #4]
    35be:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    35c0:	687b      	ldr	r3, [r7, #4]
    35c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    35c4:	2b00      	cmp	r3, #0
    35c6:	dce6      	bgt.n	3596 <prvUnlockQueue+0x56>
    35c8:	e000      	b.n	35cc <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
    35ca:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	f04f 32ff 	mov.w	r2, #4294967295
    35d2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    35d4:	f001 fbca 	bl	4d6c <vPortExitCritical>
}
    35d8:	f107 0708 	add.w	r7, r7, #8
    35dc:	46bd      	mov	sp, r7
    35de:	bd80      	pop	{r7, pc}

000035e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    35e0:	b580      	push	{r7, lr}
    35e2:	b084      	sub	sp, #16
    35e4:	af00      	add	r7, sp, #0
    35e6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    35e8:	f001 fbaa 	bl	4d40 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    35ec:	687b      	ldr	r3, [r7, #4]
    35ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    35f0:	2b00      	cmp	r3, #0
    35f2:	bf14      	ite	ne
    35f4:	2300      	movne	r3, #0
    35f6:	2301      	moveq	r3, #1
    35f8:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    35fa:	f001 fbb7 	bl	4d6c <vPortExitCritical>

	return xReturn;
    35fe:	68fb      	ldr	r3, [r7, #12]
}
    3600:	4618      	mov	r0, r3
    3602:	f107 0710 	add.w	r7, r7, #16
    3606:	46bd      	mov	sp, r7
    3608:	bd80      	pop	{r7, pc}
    360a:	bf00      	nop

0000360c <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    360c:	b480      	push	{r7}
    360e:	b085      	sub	sp, #20
    3610:	af00      	add	r7, sp, #0
    3612:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3614:	687b      	ldr	r3, [r7, #4]
    3616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3618:	2b00      	cmp	r3, #0
    361a:	bf14      	ite	ne
    361c:	2300      	movne	r3, #0
    361e:	2301      	moveq	r3, #1
    3620:	60fb      	str	r3, [r7, #12]

	return xReturn;
    3622:	68fb      	ldr	r3, [r7, #12]
}
    3624:	4618      	mov	r0, r3
    3626:	f107 0714 	add.w	r7, r7, #20
    362a:	46bd      	mov	sp, r7
    362c:	bc80      	pop	{r7}
    362e:	4770      	bx	lr

00003630 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    3630:	b580      	push	{r7, lr}
    3632:	b084      	sub	sp, #16
    3634:	af00      	add	r7, sp, #0
    3636:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3638:	f001 fb82 	bl	4d40 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3644:	429a      	cmp	r2, r3
    3646:	bf14      	ite	ne
    3648:	2300      	movne	r3, #0
    364a:	2301      	moveq	r3, #1
    364c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    364e:	f001 fb8d 	bl	4d6c <vPortExitCritical>

	return xReturn;
    3652:	68fb      	ldr	r3, [r7, #12]
}
    3654:	4618      	mov	r0, r3
    3656:	f107 0710 	add.w	r7, r7, #16
    365a:	46bd      	mov	sp, r7
    365c:	bd80      	pop	{r7, pc}
    365e:	bf00      	nop

00003660 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3660:	b480      	push	{r7}
    3662:	b085      	sub	sp, #20
    3664:	af00      	add	r7, sp, #0
    3666:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3668:	687b      	ldr	r3, [r7, #4]
    366a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    366c:	687b      	ldr	r3, [r7, #4]
    366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3670:	429a      	cmp	r2, r3
    3672:	bf14      	ite	ne
    3674:	2300      	movne	r3, #0
    3676:	2301      	moveq	r3, #1
    3678:	60fb      	str	r3, [r7, #12]

	return xReturn;
    367a:	68fb      	ldr	r3, [r7, #12]
}
    367c:	4618      	mov	r0, r3
    367e:	f107 0714 	add.w	r7, r7, #20
    3682:	46bd      	mov	sp, r7
    3684:	bc80      	pop	{r7}
    3686:	4770      	bx	lr

00003688 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3688:	b580      	push	{r7, lr}
    368a:	b08a      	sub	sp, #40	; 0x28
    368c:	af02      	add	r7, sp, #8
    368e:	60f8      	str	r0, [r7, #12]
    3690:	60b9      	str	r1, [r7, #8]
    3692:	603b      	str	r3, [r7, #0]
    3694:	4613      	mov	r3, r2
    3696:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3698:	88fb      	ldrh	r3, [r7, #6]
    369a:	4618      	mov	r0, r3
    369c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    369e:	f001 f941 	bl	4924 <prvAllocateTCBAndStack>
    36a2:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    36a4:	69bb      	ldr	r3, [r7, #24]
    36a6:	2b00      	cmp	r3, #0
    36a8:	f000 80ac 	beq.w	3804 <xTaskGenericCreate+0x17c>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    36ac:	69bb      	ldr	r3, [r7, #24]
    36ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    36b0:	88fb      	ldrh	r3, [r7, #6]
    36b2:	f103 33ff 	add.w	r3, r3, #4294967295
    36b6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    36ba:	18d3      	adds	r3, r2, r3
    36bc:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    36be:	697b      	ldr	r3, [r7, #20]
    36c0:	f023 0307 	bic.w	r3, r3, #7
    36c4:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    36c6:	88fb      	ldrh	r3, [r7, #6]
    36c8:	9300      	str	r3, [sp, #0]
    36ca:	69b8      	ldr	r0, [r7, #24]
    36cc:	68b9      	ldr	r1, [r7, #8]
    36ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
    36d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    36d2:	f001 f807 	bl	46e4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    36d6:	6978      	ldr	r0, [r7, #20]
    36d8:	68f9      	ldr	r1, [r7, #12]
    36da:	683a      	ldr	r2, [r7, #0]
    36dc:	f001 faac 	bl	4c38 <pxPortInitialiseStack>
    36e0:	4602      	mov	r2, r0
    36e2:	69bb      	ldr	r3, [r7, #24]
    36e4:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    36e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36e8:	2b00      	cmp	r3, #0
    36ea:	d002      	beq.n	36f2 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    36ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36ee:	69ba      	ldr	r2, [r7, #24]
    36f0:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    36f2:	f001 fb25 	bl	4d40 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    36f6:	f240 1390 	movw	r3, #400	; 0x190
    36fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    36fe:	681b      	ldr	r3, [r3, #0]
    3700:	f103 0201 	add.w	r2, r3, #1
    3704:	f240 1390 	movw	r3, #400	; 0x190
    3708:	f2c2 0300 	movt	r3, #8192	; 0x2000
    370c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    370e:	f240 03b8 	movw	r3, #184	; 0xb8
    3712:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3716:	681b      	ldr	r3, [r3, #0]
    3718:	2b00      	cmp	r3, #0
    371a:	d10f      	bne.n	373c <xTaskGenericCreate+0xb4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    371c:	f240 03b8 	movw	r3, #184	; 0xb8
    3720:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3724:	69ba      	ldr	r2, [r7, #24]
    3726:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    3728:	f240 1390 	movw	r3, #400	; 0x190
    372c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3730:	681b      	ldr	r3, [r3, #0]
    3732:	2b01      	cmp	r3, #1
    3734:	d118      	bne.n	3768 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3736:	f001 f811 	bl	475c <prvInitialiseTaskLists>
    373a:	e015      	b.n	3768 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    373c:	f240 13a0 	movw	r3, #416	; 0x1a0
    3740:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3744:	681b      	ldr	r3, [r3, #0]
    3746:	2b00      	cmp	r3, #0
    3748:	d10e      	bne.n	3768 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    374a:	f240 03b8 	movw	r3, #184	; 0xb8
    374e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3752:	681b      	ldr	r3, [r3, #0]
    3754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3756:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3758:	429a      	cmp	r2, r3
    375a:	d805      	bhi.n	3768 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
    375c:	f240 03b8 	movw	r3, #184	; 0xb8
    3760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3764:	69ba      	ldr	r2, [r7, #24]
    3766:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3768:	69bb      	ldr	r3, [r7, #24]
    376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    376c:	f240 1398 	movw	r3, #408	; 0x198
    3770:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3774:	681b      	ldr	r3, [r3, #0]
    3776:	429a      	cmp	r2, r3
    3778:	d906      	bls.n	3788 <xTaskGenericCreate+0x100>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    377a:	69bb      	ldr	r3, [r7, #24]
    377c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    377e:	f240 1398 	movw	r3, #408	; 0x198
    3782:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3786:	601a      	str	r2, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
    3788:	f240 13b4 	movw	r3, #436	; 0x1b4
    378c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3790:	681a      	ldr	r2, [r3, #0]
    3792:	69bb      	ldr	r3, [r7, #24]
    3794:	645a      	str	r2, [r3, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
    3796:	f240 13b4 	movw	r3, #436	; 0x1b4
    379a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    379e:	681b      	ldr	r3, [r3, #0]
    37a0:	f103 0201 	add.w	r2, r3, #1
    37a4:	f240 13b4 	movw	r3, #436	; 0x1b4
    37a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37ac:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    37ae:	69bb      	ldr	r3, [r7, #24]
    37b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37b2:	f240 139c 	movw	r3, #412	; 0x19c
    37b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37ba:	681b      	ldr	r3, [r3, #0]
    37bc:	429a      	cmp	r2, r3
    37be:	d906      	bls.n	37ce <xTaskGenericCreate+0x146>
    37c0:	69bb      	ldr	r3, [r7, #24]
    37c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37c4:	f240 139c 	movw	r3, #412	; 0x19c
    37c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37cc:	601a      	str	r2, [r3, #0]
    37ce:	69bb      	ldr	r3, [r7, #24]
    37d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    37d2:	4613      	mov	r3, r2
    37d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    37d8:	189b      	adds	r3, r3, r2
    37da:	ea4f 0383 	mov.w	r3, r3, lsl #2
    37de:	461a      	mov	r2, r3
    37e0:	f240 03bc 	movw	r3, #188	; 0xbc
    37e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    37e8:	18d2      	adds	r2, r2, r3
    37ea:	69bb      	ldr	r3, [r7, #24]
    37ec:	f103 0304 	add.w	r3, r3, #4
    37f0:	4610      	mov	r0, r2
    37f2:	4619      	mov	r1, r3
    37f4:	f7ff fa48 	bl	2c88 <vListInsertEnd>

			xReturn = pdPASS;
    37f8:	f04f 0301 	mov.w	r3, #1
    37fc:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    37fe:	f001 fab5 	bl	4d6c <vPortExitCritical>
    3802:	e002      	b.n	380a <xTaskGenericCreate+0x182>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3804:	f04f 33ff 	mov.w	r3, #4294967295
    3808:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    380a:	69fb      	ldr	r3, [r7, #28]
    380c:	2b01      	cmp	r3, #1
    380e:	d111      	bne.n	3834 <xTaskGenericCreate+0x1ac>
	{
		if( xSchedulerRunning != pdFALSE )
    3810:	f240 13a0 	movw	r3, #416	; 0x1a0
    3814:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3818:	681b      	ldr	r3, [r3, #0]
    381a:	2b00      	cmp	r3, #0
    381c:	d00a      	beq.n	3834 <xTaskGenericCreate+0x1ac>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    381e:	f240 03b8 	movw	r3, #184	; 0xb8
    3822:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3826:	681b      	ldr	r3, [r3, #0]
    3828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    382c:	429a      	cmp	r2, r3
    382e:	d201      	bcs.n	3834 <xTaskGenericCreate+0x1ac>
			{
				portYIELD_WITHIN_API();
    3830:	f001 fa7a 	bl	4d28 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    3834:	69fb      	ldr	r3, [r7, #28]
}
    3836:	4618      	mov	r0, r3
    3838:	f107 0720 	add.w	r7, r7, #32
    383c:	46bd      	mov	sp, r7
    383e:	bd80      	pop	{r7, pc}

00003840 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    3840:	b580      	push	{r7, lr}
    3842:	b084      	sub	sp, #16
    3844:	af00      	add	r7, sp, #0
    3846:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3848:	f001 fa7a 	bl	4d40 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    384c:	f240 03b8 	movw	r3, #184	; 0xb8
    3850:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3854:	681b      	ldr	r3, [r3, #0]
    3856:	687a      	ldr	r2, [r7, #4]
    3858:	429a      	cmp	r2, r3
    385a:	d102      	bne.n	3862 <vTaskDelete+0x22>
			{
				pxTaskToDelete = NULL;
    385c:	f04f 0300 	mov.w	r3, #0
    3860:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3862:	687b      	ldr	r3, [r7, #4]
    3864:	2b00      	cmp	r3, #0
    3866:	d105      	bne.n	3874 <vTaskDelete+0x34>
    3868:	f240 03b8 	movw	r3, #184	; 0xb8
    386c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3870:	681b      	ldr	r3, [r3, #0]
    3872:	e000      	b.n	3876 <vTaskDelete+0x36>
    3874:	687b      	ldr	r3, [r7, #4]
    3876:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3878:	68fb      	ldr	r3, [r7, #12]
    387a:	f103 0304 	add.w	r3, r3, #4
    387e:	4618      	mov	r0, r3
    3880:	f7ff fa64 	bl	2d4c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3884:	68fb      	ldr	r3, [r7, #12]
    3886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3888:	2b00      	cmp	r3, #0
    388a:	d005      	beq.n	3898 <vTaskDelete+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    388c:	68fb      	ldr	r3, [r7, #12]
    388e:	f103 0318 	add.w	r3, r3, #24
    3892:	4618      	mov	r0, r3
    3894:	f7ff fa5a 	bl	2d4c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3898:	68fb      	ldr	r3, [r7, #12]
    389a:	f103 0304 	add.w	r3, r3, #4
    389e:	f240 1064 	movw	r0, #356	; 0x164
    38a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    38a6:	4619      	mov	r1, r3
    38a8:	f7ff f9ee 	bl	2c88 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    38ac:	f240 1378 	movw	r3, #376	; 0x178
    38b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38b4:	681b      	ldr	r3, [r3, #0]
    38b6:	f103 0201 	add.w	r2, r3, #1
    38ba:	f240 1378 	movw	r3, #376	; 0x178
    38be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38c2:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    38c4:	f240 13b4 	movw	r3, #436	; 0x1b4
    38c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38cc:	681b      	ldr	r3, [r3, #0]
    38ce:	f103 0201 	add.w	r2, r3, #1
    38d2:	f240 13b4 	movw	r3, #436	; 0x1b4
    38d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38da:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    38dc:	f001 fa46 	bl	4d6c <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    38e0:	f240 13a0 	movw	r3, #416	; 0x1a0
    38e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    38e8:	681b      	ldr	r3, [r3, #0]
    38ea:	2b00      	cmp	r3, #0
    38ec:	d004      	beq.n	38f8 <vTaskDelete+0xb8>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    38ee:	687b      	ldr	r3, [r7, #4]
    38f0:	2b00      	cmp	r3, #0
    38f2:	d101      	bne.n	38f8 <vTaskDelete+0xb8>
			{
				portYIELD_WITHIN_API();
    38f4:	f001 fa18 	bl	4d28 <vPortYieldFromISR>
			}
		}
	}
    38f8:	f107 0710 	add.w	r7, r7, #16
    38fc:	46bd      	mov	sp, r7
    38fe:	bd80      	pop	{r7, pc}

00003900 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3900:	b580      	push	{r7, lr}
    3902:	b086      	sub	sp, #24
    3904:	af00      	add	r7, sp, #0
    3906:	6078      	str	r0, [r7, #4]
    3908:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    390a:	f04f 0300 	mov.w	r3, #0
    390e:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3910:	f000 fac0 	bl	3e94 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3914:	687b      	ldr	r3, [r7, #4]
    3916:	681a      	ldr	r2, [r3, #0]
    3918:	683b      	ldr	r3, [r7, #0]
    391a:	18d3      	adds	r3, r2, r3
    391c:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    391e:	687b      	ldr	r3, [r7, #4]
    3920:	681a      	ldr	r2, [r3, #0]
    3922:	f240 1394 	movw	r3, #404	; 0x194
    3926:	f2c2 0300 	movt	r3, #8192	; 0x2000
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	429a      	cmp	r2, r3
    392e:	d910      	bls.n	3952 <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3930:	687b      	ldr	r3, [r7, #4]
    3932:	681a      	ldr	r2, [r3, #0]
    3934:	693b      	ldr	r3, [r7, #16]
    3936:	429a      	cmp	r2, r3
    3938:	d91b      	bls.n	3972 <vTaskDelayUntil+0x72>
    393a:	f240 1394 	movw	r3, #404	; 0x194
    393e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3942:	681b      	ldr	r3, [r3, #0]
    3944:	693a      	ldr	r2, [r7, #16]
    3946:	429a      	cmp	r2, r3
    3948:	d913      	bls.n	3972 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
    394a:	f04f 0301 	mov.w	r3, #1
    394e:	617b      	str	r3, [r7, #20]
    3950:	e00f      	b.n	3972 <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3952:	687b      	ldr	r3, [r7, #4]
    3954:	681a      	ldr	r2, [r3, #0]
    3956:	693b      	ldr	r3, [r7, #16]
    3958:	429a      	cmp	r2, r3
    395a:	d807      	bhi.n	396c <vTaskDelayUntil+0x6c>
    395c:	f240 1394 	movw	r3, #404	; 0x194
    3960:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3964:	681b      	ldr	r3, [r3, #0]
    3966:	693a      	ldr	r2, [r7, #16]
    3968:	429a      	cmp	r2, r3
    396a:	d902      	bls.n	3972 <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
    396c:	f04f 0301 	mov.w	r3, #1
    3970:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3972:	687b      	ldr	r3, [r7, #4]
    3974:	693a      	ldr	r2, [r7, #16]
    3976:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    3978:	697b      	ldr	r3, [r7, #20]
    397a:	2b00      	cmp	r3, #0
    397c:	d00c      	beq.n	3998 <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    397e:	f240 03b8 	movw	r3, #184	; 0xb8
    3982:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3986:	681b      	ldr	r3, [r3, #0]
    3988:	f103 0304 	add.w	r3, r3, #4
    398c:	4618      	mov	r0, r3
    398e:	f7ff f9dd 	bl	2d4c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3992:	6938      	ldr	r0, [r7, #16]
    3994:	f000 ff80 	bl	4898 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3998:	f000 fa8e 	bl	3eb8 <xTaskResumeAll>
    399c:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    399e:	68fb      	ldr	r3, [r7, #12]
    39a0:	2b00      	cmp	r3, #0
    39a2:	d101      	bne.n	39a8 <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
    39a4:	f001 f9c0 	bl	4d28 <vPortYieldFromISR>
		}
	}
    39a8:	f107 0718 	add.w	r7, r7, #24
    39ac:	46bd      	mov	sp, r7
    39ae:	bd80      	pop	{r7, pc}

000039b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    39b0:	b580      	push	{r7, lr}
    39b2:	b084      	sub	sp, #16
    39b4:	af00      	add	r7, sp, #0
    39b6:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    39b8:	f04f 0300 	mov.w	r3, #0
    39bc:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	2b00      	cmp	r3, #0
    39c2:	d019      	beq.n	39f8 <vTaskDelay+0x48>
		{
			vTaskSuspendAll();
    39c4:	f000 fa66 	bl	3e94 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    39c8:	f240 1394 	movw	r3, #404	; 0x194
    39cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39d0:	681a      	ldr	r2, [r3, #0]
    39d2:	687b      	ldr	r3, [r7, #4]
    39d4:	18d3      	adds	r3, r2, r3
    39d6:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    39d8:	f240 03b8 	movw	r3, #184	; 0xb8
    39dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    39e0:	681b      	ldr	r3, [r3, #0]
    39e2:	f103 0304 	add.w	r3, r3, #4
    39e6:	4618      	mov	r0, r3
    39e8:	f7ff f9b0 	bl	2d4c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    39ec:	68b8      	ldr	r0, [r7, #8]
    39ee:	f000 ff53 	bl	4898 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    39f2:	f000 fa61 	bl	3eb8 <xTaskResumeAll>
    39f6:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    39f8:	68fb      	ldr	r3, [r7, #12]
    39fa:	2b00      	cmp	r3, #0
    39fc:	d101      	bne.n	3a02 <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    39fe:	f001 f993 	bl	4d28 <vPortYieldFromISR>
		}
	}
    3a02:	f107 0710 	add.w	r7, r7, #16
    3a06:	46bd      	mov	sp, r7
    3a08:	bd80      	pop	{r7, pc}
    3a0a:	bf00      	nop

00003a0c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    3a0c:	b580      	push	{r7, lr}
    3a0e:	b084      	sub	sp, #16
    3a10:	af00      	add	r7, sp, #0
    3a12:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    3a14:	f001 f994 	bl	4d40 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3a18:	687b      	ldr	r3, [r7, #4]
    3a1a:	2b00      	cmp	r3, #0
    3a1c:	d105      	bne.n	3a2a <uxTaskPriorityGet+0x1e>
    3a1e:	f240 03b8 	movw	r3, #184	; 0xb8
    3a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a26:	681b      	ldr	r3, [r3, #0]
    3a28:	e000      	b.n	3a2c <uxTaskPriorityGet+0x20>
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    3a2e:	68fb      	ldr	r3, [r7, #12]
    3a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a32:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    3a34:	f001 f99a 	bl	4d6c <vPortExitCritical>

		return uxReturn;
    3a38:	68bb      	ldr	r3, [r7, #8]
	}
    3a3a:	4618      	mov	r0, r3
    3a3c:	f107 0710 	add.w	r7, r7, #16
    3a40:	46bd      	mov	sp, r7
    3a42:	bd80      	pop	{r7, pc}

00003a44 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    3a44:	b580      	push	{r7, lr}
    3a46:	b086      	sub	sp, #24
    3a48:	af00      	add	r7, sp, #0
    3a4a:	6078      	str	r0, [r7, #4]
    3a4c:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    3a4e:	f04f 0300 	mov.w	r3, #0
    3a52:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    3a54:	683b      	ldr	r3, [r7, #0]
    3a56:	2b04      	cmp	r3, #4
    3a58:	d902      	bls.n	3a60 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3a5a:	f04f 0304 	mov.w	r3, #4
    3a5e:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    3a60:	f001 f96e 	bl	4d40 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    3a64:	f240 03b8 	movw	r3, #184	; 0xb8
    3a68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a6c:	681b      	ldr	r3, [r3, #0]
    3a6e:	687a      	ldr	r2, [r7, #4]
    3a70:	429a      	cmp	r2, r3
    3a72:	d102      	bne.n	3a7a <vTaskPrioritySet+0x36>
			{
				pxTask = NULL;
    3a74:	f04f 0300 	mov.w	r3, #0
    3a78:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    3a7a:	687b      	ldr	r3, [r7, #4]
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d105      	bne.n	3a8c <vTaskPrioritySet+0x48>
    3a80:	f240 03b8 	movw	r3, #184	; 0xb8
    3a84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3a88:	681b      	ldr	r3, [r3, #0]
    3a8a:	e000      	b.n	3a8e <vTaskPrioritySet+0x4a>
    3a8c:	687b      	ldr	r3, [r7, #4]
    3a8e:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    3a90:	693b      	ldr	r3, [r7, #16]
    3a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    3a94:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    3a96:	68fa      	ldr	r2, [r7, #12]
    3a98:	683b      	ldr	r3, [r7, #0]
    3a9a:	429a      	cmp	r2, r3
    3a9c:	d062      	beq.n	3b64 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    3a9e:	683a      	ldr	r2, [r7, #0]
    3aa0:	68fb      	ldr	r3, [r7, #12]
    3aa2:	429a      	cmp	r2, r3
    3aa4:	d906      	bls.n	3ab4 <vTaskPrioritySet+0x70>
				{
					if( pxTask != NULL )
    3aa6:	687b      	ldr	r3, [r7, #4]
    3aa8:	2b00      	cmp	r3, #0
    3aaa:	d009      	beq.n	3ac0 <vTaskPrioritySet+0x7c>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    3aac:	f04f 0301 	mov.w	r3, #1
    3ab0:	617b      	str	r3, [r7, #20]
    3ab2:	e005      	b.n	3ac0 <vTaskPrioritySet+0x7c>
					}
				}
				else if( pxTask == NULL )
    3ab4:	687b      	ldr	r3, [r7, #4]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d102      	bne.n	3ac0 <vTaskPrioritySet+0x7c>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    3aba:	f04f 0301 	mov.w	r3, #1
    3abe:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    3ac0:	693b      	ldr	r3, [r7, #16]
    3ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    3ac4:	693b      	ldr	r3, [r7, #16]
    3ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3ac8:	429a      	cmp	r2, r3
    3aca:	d102      	bne.n	3ad2 <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
    3acc:	693b      	ldr	r3, [r7, #16]
    3ace:	683a      	ldr	r2, [r7, #0]
    3ad0:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3ad2:	693b      	ldr	r3, [r7, #16]
    3ad4:	683a      	ldr	r2, [r7, #0]
    3ad6:	64da      	str	r2, [r3, #76]	; 0x4c
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    3ad8:	683b      	ldr	r3, [r7, #0]
    3ada:	f1c3 0205 	rsb	r2, r3, #5
    3ade:	693b      	ldr	r3, [r7, #16]
    3ae0:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    3ae2:	693b      	ldr	r3, [r7, #16]
    3ae4:	6959      	ldr	r1, [r3, #20]
    3ae6:	68fa      	ldr	r2, [r7, #12]
    3ae8:	4613      	mov	r3, r2
    3aea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3aee:	189b      	adds	r3, r3, r2
    3af0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3af4:	461a      	mov	r2, r3
    3af6:	f240 03bc 	movw	r3, #188	; 0xbc
    3afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3afe:	18d3      	adds	r3, r2, r3
    3b00:	4299      	cmp	r1, r3
    3b02:	d12a      	bne.n	3b5a <vTaskPrioritySet+0x116>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    3b04:	693b      	ldr	r3, [r7, #16]
    3b06:	f103 0304 	add.w	r3, r3, #4
    3b0a:	4618      	mov	r0, r3
    3b0c:	f7ff f91e 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b10:	693b      	ldr	r3, [r7, #16]
    3b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3b14:	f240 139c 	movw	r3, #412	; 0x19c
    3b18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b1c:	681b      	ldr	r3, [r3, #0]
    3b1e:	429a      	cmp	r2, r3
    3b20:	d906      	bls.n	3b30 <vTaskPrioritySet+0xec>
    3b22:	693b      	ldr	r3, [r7, #16]
    3b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3b26:	f240 139c 	movw	r3, #412	; 0x19c
    3b2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b2e:	601a      	str	r2, [r3, #0]
    3b30:	693b      	ldr	r3, [r7, #16]
    3b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3b34:	4613      	mov	r3, r2
    3b36:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3b3a:	189b      	adds	r3, r3, r2
    3b3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3b40:	461a      	mov	r2, r3
    3b42:	f240 03bc 	movw	r3, #188	; 0xbc
    3b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b4a:	18d2      	adds	r2, r2, r3
    3b4c:	693b      	ldr	r3, [r7, #16]
    3b4e:	f103 0304 	add.w	r3, r3, #4
    3b52:	4610      	mov	r0, r2
    3b54:	4619      	mov	r1, r3
    3b56:	f7ff f897 	bl	2c88 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    3b5a:	697b      	ldr	r3, [r7, #20]
    3b5c:	2b01      	cmp	r3, #1
    3b5e:	d101      	bne.n	3b64 <vTaskPrioritySet+0x120>
				{
					portYIELD_WITHIN_API();
    3b60:	f001 f8e2 	bl	4d28 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    3b64:	f001 f902 	bl	4d6c <vPortExitCritical>
	}
    3b68:	f107 0718 	add.w	r7, r7, #24
    3b6c:	46bd      	mov	sp, r7
    3b6e:	bd80      	pop	{r7, pc}

00003b70 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    3b70:	b580      	push	{r7, lr}
    3b72:	b084      	sub	sp, #16
    3b74:	af00      	add	r7, sp, #0
    3b76:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3b78:	f001 f8e2 	bl	4d40 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    3b7c:	f240 03b8 	movw	r3, #184	; 0xb8
    3b80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3b84:	681b      	ldr	r3, [r3, #0]
    3b86:	687a      	ldr	r2, [r7, #4]
    3b88:	429a      	cmp	r2, r3
    3b8a:	d102      	bne.n	3b92 <vTaskSuspend+0x22>
			{
				pxTaskToSuspend = NULL;
    3b8c:	f04f 0300 	mov.w	r3, #0
    3b90:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    3b92:	687b      	ldr	r3, [r7, #4]
    3b94:	2b00      	cmp	r3, #0
    3b96:	d105      	bne.n	3ba4 <vTaskSuspend+0x34>
    3b98:	f240 03b8 	movw	r3, #184	; 0xb8
    3b9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ba0:	681b      	ldr	r3, [r3, #0]
    3ba2:	e000      	b.n	3ba6 <vTaskSuspend+0x36>
    3ba4:	687b      	ldr	r3, [r7, #4]
    3ba6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3ba8:	68fb      	ldr	r3, [r7, #12]
    3baa:	f103 0304 	add.w	r3, r3, #4
    3bae:	4618      	mov	r0, r3
    3bb0:	f7ff f8cc 	bl	2d4c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3bb4:	68fb      	ldr	r3, [r7, #12]
    3bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3bb8:	2b00      	cmp	r3, #0
    3bba:	d005      	beq.n	3bc8 <vTaskSuspend+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3bbc:	68fb      	ldr	r3, [r7, #12]
    3bbe:	f103 0318 	add.w	r3, r3, #24
    3bc2:	4618      	mov	r0, r3
    3bc4:	f7ff f8c2 	bl	2d4c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3bc8:	68fb      	ldr	r3, [r7, #12]
    3bca:	f103 0304 	add.w	r3, r3, #4
    3bce:	f240 107c 	movw	r0, #380	; 0x17c
    3bd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3bd6:	4619      	mov	r1, r3
    3bd8:	f7ff f856 	bl	2c88 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3bdc:	f001 f8c6 	bl	4d6c <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    3be0:	687b      	ldr	r3, [r7, #4]
    3be2:	2b00      	cmp	r3, #0
    3be4:	d11f      	bne.n	3c26 <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
    3be6:	f240 13a0 	movw	r3, #416	; 0x1a0
    3bea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3bee:	681b      	ldr	r3, [r3, #0]
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	d002      	beq.n	3bfa <vTaskSuspend+0x8a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3bf4:	f001 f898 	bl	4d28 <vPortYieldFromISR>
    3bf8:	e015      	b.n	3c26 <vTaskSuspend+0xb6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3bfa:	f240 137c 	movw	r3, #380	; 0x17c
    3bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c02:	681a      	ldr	r2, [r3, #0]
    3c04:	f240 1390 	movw	r3, #400	; 0x190
    3c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c0c:	681b      	ldr	r3, [r3, #0]
    3c0e:	429a      	cmp	r2, r3
    3c10:	d107      	bne.n	3c22 <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3c12:	f240 03b8 	movw	r3, #184	; 0xb8
    3c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c1a:	f04f 0200 	mov.w	r2, #0
    3c1e:	601a      	str	r2, [r3, #0]
    3c20:	e001      	b.n	3c26 <vTaskSuspend+0xb6>
				}
				else
				{
					vTaskSwitchContext();
    3c22:	f000 fbab 	bl	437c <vTaskSwitchContext>
				}
			}
		}
	}
    3c26:	f107 0710 	add.w	r7, r7, #16
    3c2a:	46bd      	mov	sp, r7
    3c2c:	bd80      	pop	{r7, pc}
    3c2e:	bf00      	nop

00003c30 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    3c30:	b480      	push	{r7}
    3c32:	b085      	sub	sp, #20
    3c34:	af00      	add	r7, sp, #0
    3c36:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    3c38:	f04f 0300 	mov.w	r3, #0
    3c3c:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    3c3e:	687b      	ldr	r3, [r7, #4]
    3c40:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3c42:	68bb      	ldr	r3, [r7, #8]
    3c44:	695a      	ldr	r2, [r3, #20]
    3c46:	f240 137c 	movw	r3, #380	; 0x17c
    3c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c4e:	429a      	cmp	r2, r3
    3c50:	d10e      	bne.n	3c70 <xTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3c52:	68bb      	ldr	r3, [r7, #8]
    3c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3c56:	f240 1350 	movw	r3, #336	; 0x150
    3c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c5e:	429a      	cmp	r2, r3
    3c60:	d006      	beq.n	3c70 <xTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    3c62:	68bb      	ldr	r3, [r7, #8]
    3c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c66:	2b00      	cmp	r3, #0
    3c68:	d102      	bne.n	3c70 <xTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
    3c6a:	f04f 0301 	mov.w	r3, #1
    3c6e:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    3c70:	68fb      	ldr	r3, [r7, #12]
	}
    3c72:	4618      	mov	r0, r3
    3c74:	f107 0714 	add.w	r7, r7, #20
    3c78:	46bd      	mov	sp, r7
    3c7a:	bc80      	pop	{r7}
    3c7c:	4770      	bx	lr
    3c7e:	bf00      	nop

00003c80 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    3c80:	b580      	push	{r7, lr}
    3c82:	b084      	sub	sp, #16
    3c84:	af00      	add	r7, sp, #0
    3c86:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    3c88:	687b      	ldr	r3, [r7, #4]
    3c8a:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3c8c:	68fb      	ldr	r3, [r7, #12]
    3c8e:	2b00      	cmp	r3, #0
    3c90:	d048      	beq.n	3d24 <vTaskResume+0xa4>
    3c92:	f240 03b8 	movw	r3, #184	; 0xb8
    3c96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3c9a:	681b      	ldr	r3, [r3, #0]
    3c9c:	68fa      	ldr	r2, [r7, #12]
    3c9e:	429a      	cmp	r2, r3
    3ca0:	d040      	beq.n	3d24 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
    3ca2:	f001 f84d 	bl	4d40 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3ca6:	68f8      	ldr	r0, [r7, #12]
    3ca8:	f7ff ffc2 	bl	3c30 <xTaskIsTaskSuspended>
    3cac:	4603      	mov	r3, r0
    3cae:	2b01      	cmp	r3, #1
    3cb0:	d136      	bne.n	3d20 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3cb2:	68fb      	ldr	r3, [r7, #12]
    3cb4:	f103 0304 	add.w	r3, r3, #4
    3cb8:	4618      	mov	r0, r3
    3cba:	f7ff f847 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3cbe:	68fb      	ldr	r3, [r7, #12]
    3cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3cc2:	f240 139c 	movw	r3, #412	; 0x19c
    3cc6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cca:	681b      	ldr	r3, [r3, #0]
    3ccc:	429a      	cmp	r2, r3
    3cce:	d906      	bls.n	3cde <vTaskResume+0x5e>
    3cd0:	68fb      	ldr	r3, [r7, #12]
    3cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3cd4:	f240 139c 	movw	r3, #412	; 0x19c
    3cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cdc:	601a      	str	r2, [r3, #0]
    3cde:	68fb      	ldr	r3, [r7, #12]
    3ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3ce2:	4613      	mov	r3, r2
    3ce4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3ce8:	189b      	adds	r3, r3, r2
    3cea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3cee:	461a      	mov	r2, r3
    3cf0:	f240 03bc 	movw	r3, #188	; 0xbc
    3cf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3cf8:	18d2      	adds	r2, r2, r3
    3cfa:	68fb      	ldr	r3, [r7, #12]
    3cfc:	f103 0304 	add.w	r3, r3, #4
    3d00:	4610      	mov	r0, r2
    3d02:	4619      	mov	r1, r3
    3d04:	f7fe ffc0 	bl	2c88 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3d08:	68fb      	ldr	r3, [r7, #12]
    3d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d0c:	f240 03b8 	movw	r3, #184	; 0xb8
    3d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d14:	681b      	ldr	r3, [r3, #0]
    3d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3d18:	429a      	cmp	r2, r3
    3d1a:	d301      	bcc.n	3d20 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    3d1c:	f001 f804 	bl	4d28 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    3d20:	f001 f824 	bl	4d6c <vPortExitCritical>
		}
	}
    3d24:	f107 0710 	add.w	r7, r7, #16
    3d28:	46bd      	mov	sp, r7
    3d2a:	bd80      	pop	{r7, pc}

00003d2c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3d2c:	b580      	push	{r7, lr}
    3d2e:	b086      	sub	sp, #24
    3d30:	af00      	add	r7, sp, #0
    3d32:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    3d34:	f04f 0300 	mov.w	r3, #0
    3d38:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3d3a:	687b      	ldr	r3, [r7, #4]
    3d3c:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3d3e:	f04f 0300 	mov.w	r3, #0
    3d42:	60fb      	str	r3, [r7, #12]
    3d44:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3d48:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3d4c:	6938      	ldr	r0, [r7, #16]
    3d4e:	f7ff ff6f 	bl	3c30 <xTaskIsTaskSuspended>
    3d52:	4603      	mov	r3, r0
    3d54:	2b01      	cmp	r3, #1
    3d56:	d149      	bne.n	3dec <xTaskResumeFromISR+0xc0>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3d58:	f240 13a4 	movw	r3, #420	; 0x1a4
    3d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	2b00      	cmp	r3, #0
    3d64:	d138      	bne.n	3dd8 <xTaskResumeFromISR+0xac>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    3d66:	693b      	ldr	r3, [r7, #16]
    3d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d6a:	f240 03b8 	movw	r3, #184	; 0xb8
    3d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d72:	681b      	ldr	r3, [r3, #0]
    3d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3d76:	429a      	cmp	r2, r3
    3d78:	bf34      	ite	cc
    3d7a:	2300      	movcc	r3, #0
    3d7c:	2301      	movcs	r3, #1
    3d7e:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3d80:	693b      	ldr	r3, [r7, #16]
    3d82:	f103 0304 	add.w	r3, r3, #4
    3d86:	4618      	mov	r0, r3
    3d88:	f7fe ffe0 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3d8c:	693b      	ldr	r3, [r7, #16]
    3d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d90:	f240 139c 	movw	r3, #412	; 0x19c
    3d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d98:	681b      	ldr	r3, [r3, #0]
    3d9a:	429a      	cmp	r2, r3
    3d9c:	d906      	bls.n	3dac <xTaskResumeFromISR+0x80>
    3d9e:	693b      	ldr	r3, [r7, #16]
    3da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3da2:	f240 139c 	movw	r3, #412	; 0x19c
    3da6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3daa:	601a      	str	r2, [r3, #0]
    3dac:	693b      	ldr	r3, [r7, #16]
    3dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3db0:	4613      	mov	r3, r2
    3db2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3db6:	189b      	adds	r3, r3, r2
    3db8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3dbc:	461a      	mov	r2, r3
    3dbe:	f240 03bc 	movw	r3, #188	; 0xbc
    3dc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3dc6:	18d2      	adds	r2, r2, r3
    3dc8:	693b      	ldr	r3, [r7, #16]
    3dca:	f103 0304 	add.w	r3, r3, #4
    3dce:	4610      	mov	r0, r2
    3dd0:	4619      	mov	r1, r3
    3dd2:	f7fe ff59 	bl	2c88 <vListInsertEnd>
    3dd6:	e009      	b.n	3dec <xTaskResumeFromISR+0xc0>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3dd8:	693b      	ldr	r3, [r7, #16]
    3dda:	f103 0318 	add.w	r3, r3, #24
    3dde:	f240 1050 	movw	r0, #336	; 0x150
    3de2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3de6:	4619      	mov	r1, r3
    3de8:	f7fe ff4e 	bl	2c88 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    3dec:	f04f 0000 	mov.w	r0, #0
    3df0:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    3df4:	697b      	ldr	r3, [r7, #20]
	}
    3df6:	4618      	mov	r0, r3
    3df8:	f107 0718 	add.w	r7, r7, #24
    3dfc:	46bd      	mov	sp, r7
    3dfe:	bd80      	pop	{r7, pc}

00003e00 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3e00:	b580      	push	{r7, lr}
    3e02:	b086      	sub	sp, #24
    3e04:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3e06:	f04f 0300 	mov.w	r3, #0
    3e0a:	9300      	str	r3, [sp, #0]
    3e0c:	f04f 0300 	mov.w	r3, #0
    3e10:	9301      	str	r3, [sp, #4]
    3e12:	f04f 0300 	mov.w	r3, #0
    3e16:	9302      	str	r3, [sp, #8]
    3e18:	f04f 0300 	mov.w	r3, #0
    3e1c:	9303      	str	r3, [sp, #12]
    3e1e:	f244 60c1 	movw	r0, #18113	; 0x46c1
    3e22:	f2c0 0000 	movt	r0, #0
    3e26:	f646 3170 	movw	r1, #27504	; 0x6b70
    3e2a:	f2c0 0100 	movt	r1, #0
    3e2e:	f04f 0280 	mov.w	r2, #128	; 0x80
    3e32:	f04f 0300 	mov.w	r3, #0
    3e36:	f7ff fc27 	bl	3688 <xTaskGenericCreate>
    3e3a:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3e3c:	687b      	ldr	r3, [r7, #4]
    3e3e:	2b01      	cmp	r3, #1
    3e40:	d113      	bne.n	3e6a <vTaskStartScheduler+0x6a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3e42:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3e46:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    3e4a:	f240 13a0 	movw	r3, #416	; 0x1a0
    3e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e52:	f04f 0201 	mov.w	r2, #1
    3e56:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    3e58:	f240 1394 	movw	r3, #404	; 0x194
    3e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e60:	f04f 0200 	mov.w	r2, #0
    3e64:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3e66:	f000 ff2f 	bl	4cc8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3e6a:	f107 0708 	add.w	r7, r7, #8
    3e6e:	46bd      	mov	sp, r7
    3e70:	bd80      	pop	{r7, pc}
    3e72:	bf00      	nop

00003e74 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3e74:	b580      	push	{r7, lr}
    3e76:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3e78:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    3e7c:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    3e80:	f240 13a0 	movw	r3, #416	; 0x1a0
    3e84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3e88:	f04f 0200 	mov.w	r2, #0
    3e8c:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    3e8e:	f000 ff45 	bl	4d1c <vPortEndScheduler>
}
    3e92:	bd80      	pop	{r7, pc}

00003e94 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3e94:	b480      	push	{r7}
    3e96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3e98:	f240 13a4 	movw	r3, #420	; 0x1a4
    3e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ea0:	681b      	ldr	r3, [r3, #0]
    3ea2:	f103 0201 	add.w	r2, r3, #1
    3ea6:	f240 13a4 	movw	r3, #420	; 0x1a4
    3eaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3eae:	601a      	str	r2, [r3, #0]
}
    3eb0:	46bd      	mov	sp, r7
    3eb2:	bc80      	pop	{r7}
    3eb4:	4770      	bx	lr
    3eb6:	bf00      	nop

00003eb8 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3eb8:	b590      	push	{r4, r7, lr}
    3eba:	b083      	sub	sp, #12
    3ebc:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3ebe:	f04f 0300 	mov.w	r3, #0
    3ec2:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3ec4:	f000 ff3c 	bl	4d40 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    3ec8:	f240 13a4 	movw	r3, #420	; 0x1a4
    3ecc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ed0:	681b      	ldr	r3, [r3, #0]
    3ed2:	f103 32ff 	add.w	r2, r3, #4294967295
    3ed6:	f240 13a4 	movw	r3, #420	; 0x1a4
    3eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ede:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3ee0:	f240 13a4 	movw	r3, #420	; 0x1a4
    3ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ee8:	681b      	ldr	r3, [r3, #0]
    3eea:	2b00      	cmp	r3, #0
    3eec:	f040 8085 	bne.w	3ffa <xTaskResumeAll+0x142>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3ef0:	f240 1390 	movw	r3, #400	; 0x190
    3ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ef8:	681b      	ldr	r3, [r3, #0]
    3efa:	2b00      	cmp	r3, #0
    3efc:	d07d      	beq.n	3ffa <xTaskResumeAll+0x142>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3efe:	f04f 0300 	mov.w	r3, #0
    3f02:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3f04:	e03c      	b.n	3f80 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3f06:	f240 1350 	movw	r3, #336	; 0x150
    3f0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f0e:	68db      	ldr	r3, [r3, #12]
    3f10:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    3f12:	f104 0318 	add.w	r3, r4, #24
    3f16:	4618      	mov	r0, r3
    3f18:	f7fe ff18 	bl	2d4c <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3f1c:	f104 0304 	add.w	r3, r4, #4
    3f20:	4618      	mov	r0, r3
    3f22:	f7fe ff13 	bl	2d4c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3f26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3f28:	f240 139c 	movw	r3, #412	; 0x19c
    3f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f30:	681b      	ldr	r3, [r3, #0]
    3f32:	429a      	cmp	r2, r3
    3f34:	d905      	bls.n	3f42 <xTaskResumeAll+0x8a>
    3f36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3f38:	f240 139c 	movw	r3, #412	; 0x19c
    3f3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f40:	601a      	str	r2, [r3, #0]
    3f42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3f44:	4613      	mov	r3, r2
    3f46:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3f4a:	189b      	adds	r3, r3, r2
    3f4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3f50:	461a      	mov	r2, r3
    3f52:	f240 03bc 	movw	r3, #188	; 0xbc
    3f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f5a:	18d2      	adds	r2, r2, r3
    3f5c:	f104 0304 	add.w	r3, r4, #4
    3f60:	4610      	mov	r0, r2
    3f62:	4619      	mov	r1, r3
    3f64:	f7fe fe90 	bl	2c88 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3f68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3f6a:	f240 03b8 	movw	r3, #184	; 0xb8
    3f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f72:	681b      	ldr	r3, [r3, #0]
    3f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f76:	429a      	cmp	r2, r3
    3f78:	d302      	bcc.n	3f80 <xTaskResumeAll+0xc8>
					{
						xYieldRequired = pdTRUE;
    3f7a:	f04f 0301 	mov.w	r3, #1
    3f7e:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3f80:	f240 1350 	movw	r3, #336	; 0x150
    3f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f88:	681b      	ldr	r3, [r3, #0]
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d1bb      	bne.n	3f06 <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3f8e:	f240 13a8 	movw	r3, #424	; 0x1a8
    3f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3f96:	681b      	ldr	r3, [r3, #0]
    3f98:	2b00      	cmp	r3, #0
    3f9a:	d018      	beq.n	3fce <xTaskResumeAll+0x116>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3f9c:	e00d      	b.n	3fba <xTaskResumeAll+0x102>
					{
						vTaskIncrementTick();
    3f9e:	f000 f907 	bl	41b0 <vTaskIncrementTick>
						--uxMissedTicks;
    3fa2:	f240 13a8 	movw	r3, #424	; 0x1a8
    3fa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3faa:	681b      	ldr	r3, [r3, #0]
    3fac:	f103 32ff 	add.w	r2, r3, #4294967295
    3fb0:	f240 13a8 	movw	r3, #424	; 0x1a8
    3fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fb8:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3fba:	f240 13a8 	movw	r3, #424	; 0x1a8
    3fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fc2:	681b      	ldr	r3, [r3, #0]
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	d1ea      	bne.n	3f9e <xTaskResumeAll+0xe6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3fc8:	f04f 0301 	mov.w	r3, #1
    3fcc:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3fce:	683b      	ldr	r3, [r7, #0]
    3fd0:	2b01      	cmp	r3, #1
    3fd2:	d006      	beq.n	3fe2 <xTaskResumeAll+0x12a>
    3fd4:	f240 13ac 	movw	r3, #428	; 0x1ac
    3fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3fdc:	681b      	ldr	r3, [r3, #0]
    3fde:	2b01      	cmp	r3, #1
    3fe0:	d10b      	bne.n	3ffa <xTaskResumeAll+0x142>
				{
					xAlreadyYielded = pdTRUE;
    3fe2:	f04f 0301 	mov.w	r3, #1
    3fe6:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    3fe8:	f240 13ac 	movw	r3, #428	; 0x1ac
    3fec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3ff0:	f04f 0200 	mov.w	r2, #0
    3ff4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    3ff6:	f000 fe97 	bl	4d28 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3ffa:	f000 feb7 	bl	4d6c <vPortExitCritical>

	return xAlreadyYielded;
    3ffe:	687b      	ldr	r3, [r7, #4]
}
    4000:	4618      	mov	r0, r3
    4002:	f107 070c 	add.w	r7, r7, #12
    4006:	46bd      	mov	sp, r7
    4008:	bd90      	pop	{r4, r7, pc}
    400a:	bf00      	nop

0000400c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    400c:	b580      	push	{r7, lr}
    400e:	b082      	sub	sp, #8
    4010:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    4012:	f000 fe95 	bl	4d40 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    4016:	f240 1394 	movw	r3, #404	; 0x194
    401a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    401e:	681b      	ldr	r3, [r3, #0]
    4020:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    4022:	f000 fea3 	bl	4d6c <vPortExitCritical>

	return xTicks;
    4026:	687b      	ldr	r3, [r7, #4]
}
    4028:	4618      	mov	r0, r3
    402a:	f107 0708 	add.w	r7, r7, #8
    402e:	46bd      	mov	sp, r7
    4030:	bd80      	pop	{r7, pc}
    4032:	bf00      	nop

00004034 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4034:	b480      	push	{r7}
    4036:	b083      	sub	sp, #12
    4038:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    403a:	f04f 0300 	mov.w	r3, #0
    403e:	607b      	str	r3, [r7, #4]
    4040:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4044:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    4048:	f240 1394 	movw	r3, #404	; 0x194
    404c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4050:	681b      	ldr	r3, [r3, #0]
    4052:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    4054:	f04f 0000 	mov.w	r0, #0
    4058:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    405c:	683b      	ldr	r3, [r7, #0]
}
    405e:	4618      	mov	r0, r3
    4060:	f107 070c 	add.w	r7, r7, #12
    4064:	46bd      	mov	sp, r7
    4066:	bc80      	pop	{r7}
    4068:	4770      	bx	lr
    406a:	bf00      	nop

0000406c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    406c:	b480      	push	{r7}
    406e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4070:	f240 1390 	movw	r3, #400	; 0x190
    4074:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4078:	681b      	ldr	r3, [r3, #0]
}
    407a:	4618      	mov	r0, r3
    407c:	46bd      	mov	sp, r7
    407e:	bc80      	pop	{r7}
    4080:	4770      	bx	lr
    4082:	bf00      	nop

00004084 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskList( signed char *pcWriteBuffer )
	{
    4084:	b590      	push	{r4, r7, lr}
    4086:	b085      	sub	sp, #20
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxQueue;

		/* This is a VERY costly function that should be used for debug only.
		It leaves interrupts disabled for a LONG time. */

		vTaskSuspendAll();
    408c:	f7ff ff02 	bl	3e94 <vTaskSuspendAll>
		{
			/* Run through all the lists that could potentially contain a TCB and
			report the task name, state and stack high water mark. */

			*pcWriteBuffer = ( signed char ) 0x00;
    4090:	687b      	ldr	r3, [r7, #4]
    4092:	f04f 0200 	mov.w	r2, #0
    4096:	701a      	strb	r2, [r3, #0]
			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
    4098:	687c      	ldr	r4, [r7, #4]
    409a:	4620      	mov	r0, r4
    409c:	f002 f8d4 	bl	6248 <strlen>
    40a0:	4603      	mov	r3, r0
    40a2:	18e2      	adds	r2, r4, r3
    40a4:	f646 3378 	movw	r3, #27512	; 0x6b78
    40a8:	f2c0 0300 	movt	r3, #0
    40ac:	8819      	ldrh	r1, [r3, #0]
    40ae:	789b      	ldrb	r3, [r3, #2]
    40b0:	8011      	strh	r1, [r2, #0]
    40b2:	7093      	strb	r3, [r2, #2]

			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
    40b4:	f240 1398 	movw	r3, #408	; 0x198
    40b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40bc:	681b      	ldr	r3, [r3, #0]
    40be:	f103 0301 	add.w	r3, r3, #1
    40c2:	60fb      	str	r3, [r7, #12]

			do
			{
				uxQueue--;
    40c4:	68fb      	ldr	r3, [r7, #12]
    40c6:	f103 33ff 	add.w	r3, r3, #4294967295
    40ca:	60fb      	str	r3, [r7, #12]

				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
    40cc:	68fa      	ldr	r2, [r7, #12]
    40ce:	4613      	mov	r3, r2
    40d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    40d4:	189b      	adds	r3, r3, r2
    40d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    40da:	461a      	mov	r2, r3
    40dc:	f240 03bc 	movw	r3, #188	; 0xbc
    40e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    40e4:	18d3      	adds	r3, r2, r3
    40e6:	681b      	ldr	r3, [r3, #0]
    40e8:	2b00      	cmp	r3, #0
    40ea:	d012      	beq.n	4112 <vTaskList+0x8e>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tskREADY_CHAR );
    40ec:	68fa      	ldr	r2, [r7, #12]
    40ee:	4613      	mov	r3, r2
    40f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    40f4:	189b      	adds	r3, r3, r2
    40f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    40fa:	461a      	mov	r2, r3
    40fc:	f240 03bc 	movw	r3, #188	; 0xbc
    4100:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4104:	18d3      	adds	r3, r2, r3
    4106:	6878      	ldr	r0, [r7, #4]
    4108:	4619      	mov	r1, r3
    410a:	f04f 0252 	mov.w	r2, #82	; 0x52
    410e:	f000 fc41 	bl	4994 <prvListTaskWithinSingleList>
				}
			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
    4112:	68fb      	ldr	r3, [r7, #12]
    4114:	2b00      	cmp	r3, #0
    4116:	d1d5      	bne.n	40c4 <vTaskList+0x40>

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
    4118:	f240 1348 	movw	r3, #328	; 0x148
    411c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4120:	681b      	ldr	r3, [r3, #0]
    4122:	681b      	ldr	r3, [r3, #0]
    4124:	2b00      	cmp	r3, #0
    4126:	d00a      	beq.n	413e <vTaskList+0xba>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
    4128:	f240 1348 	movw	r3, #328	; 0x148
    412c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4130:	681b      	ldr	r3, [r3, #0]
    4132:	6878      	ldr	r0, [r7, #4]
    4134:	4619      	mov	r1, r3
    4136:	f04f 0242 	mov.w	r2, #66	; 0x42
    413a:	f000 fc2b 	bl	4994 <prvListTaskWithinSingleList>
			}

			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
    413e:	f240 134c 	movw	r3, #332	; 0x14c
    4142:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4146:	681b      	ldr	r3, [r3, #0]
    4148:	681b      	ldr	r3, [r3, #0]
    414a:	2b00      	cmp	r3, #0
    414c:	d00a      	beq.n	4164 <vTaskList+0xe0>
			{
				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_CHAR );
    414e:	f240 134c 	movw	r3, #332	; 0x14c
    4152:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4156:	681b      	ldr	r3, [r3, #0]
    4158:	6878      	ldr	r0, [r7, #4]
    415a:	4619      	mov	r1, r3
    415c:	f04f 0242 	mov.w	r2, #66	; 0x42
    4160:	f000 fc18 	bl	4994 <prvListTaskWithinSingleList>
			}

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
    4164:	f240 1364 	movw	r3, #356	; 0x164
    4168:	f2c2 0300 	movt	r3, #8192	; 0x2000
    416c:	681b      	ldr	r3, [r3, #0]
    416e:	2b00      	cmp	r3, #0
    4170:	d008      	beq.n	4184 <vTaskList+0x100>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
    4172:	6878      	ldr	r0, [r7, #4]
    4174:	f240 1164 	movw	r1, #356	; 0x164
    4178:	f2c2 0100 	movt	r1, #8192	; 0x2000
    417c:	f04f 0244 	mov.w	r2, #68	; 0x44
    4180:	f000 fc08 	bl	4994 <prvListTaskWithinSingleList>
			}
			#endif

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
    4184:	f240 137c 	movw	r3, #380	; 0x17c
    4188:	f2c2 0300 	movt	r3, #8192	; 0x2000
    418c:	681b      	ldr	r3, [r3, #0]
    418e:	2b00      	cmp	r3, #0
    4190:	d008      	beq.n	41a4 <vTaskList+0x120>
				{
					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
    4192:	6878      	ldr	r0, [r7, #4]
    4194:	f240 117c 	movw	r1, #380	; 0x17c
    4198:	f2c2 0100 	movt	r1, #8192	; 0x2000
    419c:	f04f 0253 	mov.w	r2, #83	; 0x53
    41a0:	f000 fbf8 	bl	4994 <prvListTaskWithinSingleList>
				}
			}
			#endif
		}
		xTaskResumeAll();
    41a4:	f7ff fe88 	bl	3eb8 <xTaskResumeAll>
	}
    41a8:	f107 0714 	add.w	r7, r7, #20
    41ac:	46bd      	mov	sp, r7
    41ae:	bd90      	pop	{r4, r7, pc}

000041b0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    41b0:	b580      	push	{r7, lr}
    41b2:	b084      	sub	sp, #16
    41b4:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    41b6:	f240 13a4 	movw	r3, #420	; 0x1a4
    41ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41be:	681b      	ldr	r3, [r3, #0]
    41c0:	2b00      	cmp	r3, #0
    41c2:	f040 80c0 	bne.w	4346 <vTaskIncrementTick+0x196>
	{
		++xTickCount;
    41c6:	f240 1394 	movw	r3, #404	; 0x194
    41ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41ce:	681b      	ldr	r3, [r3, #0]
    41d0:	f103 0201 	add.w	r2, r3, #1
    41d4:	f240 1394 	movw	r3, #404	; 0x194
    41d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41dc:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    41de:	f240 1394 	movw	r3, #404	; 0x194
    41e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41e6:	681b      	ldr	r3, [r3, #0]
    41e8:	2b00      	cmp	r3, #0
    41ea:	d140      	bne.n	426e <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    41ec:	f240 1348 	movw	r3, #328	; 0x148
    41f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    41f4:	681b      	ldr	r3, [r3, #0]
    41f6:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    41f8:	f240 134c 	movw	r3, #332	; 0x14c
    41fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4200:	681a      	ldr	r2, [r3, #0]
    4202:	f240 1348 	movw	r3, #328	; 0x148
    4206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    420a:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    420c:	f240 134c 	movw	r3, #332	; 0x14c
    4210:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4214:	68fa      	ldr	r2, [r7, #12]
    4216:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    4218:	f240 13b0 	movw	r3, #432	; 0x1b0
    421c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4220:	681b      	ldr	r3, [r3, #0]
    4222:	f103 0201 	add.w	r2, r3, #1
    4226:	f240 13b0 	movw	r3, #432	; 0x1b0
    422a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    422e:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4230:	f240 1348 	movw	r3, #328	; 0x148
    4234:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4238:	681b      	ldr	r3, [r3, #0]
    423a:	681b      	ldr	r3, [r3, #0]
    423c:	2b00      	cmp	r3, #0
    423e:	d107      	bne.n	4250 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4240:	f240 0328 	movw	r3, #40	; 0x28
    4244:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4248:	f04f 32ff 	mov.w	r2, #4294967295
    424c:	601a      	str	r2, [r3, #0]
    424e:	e00e      	b.n	426e <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4250:	f240 1348 	movw	r3, #328	; 0x148
    4254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4258:	681b      	ldr	r3, [r3, #0]
    425a:	68db      	ldr	r3, [r3, #12]
    425c:	68db      	ldr	r3, [r3, #12]
    425e:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4260:	68bb      	ldr	r3, [r7, #8]
    4262:	685a      	ldr	r2, [r3, #4]
    4264:	f240 0328 	movw	r3, #40	; 0x28
    4268:	f2c2 0300 	movt	r3, #8192	; 0x2000
    426c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    426e:	f240 1394 	movw	r3, #404	; 0x194
    4272:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4276:	681a      	ldr	r2, [r3, #0]
    4278:	f240 0328 	movw	r3, #40	; 0x28
    427c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	429a      	cmp	r2, r3
    4284:	d36d      	bcc.n	4362 <vTaskIncrementTick+0x1b2>
    4286:	f240 1348 	movw	r3, #328	; 0x148
    428a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    428e:	681b      	ldr	r3, [r3, #0]
    4290:	681b      	ldr	r3, [r3, #0]
    4292:	2b00      	cmp	r3, #0
    4294:	d107      	bne.n	42a6 <vTaskIncrementTick+0xf6>
    4296:	f240 0328 	movw	r3, #40	; 0x28
    429a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    429e:	f04f 32ff 	mov.w	r2, #4294967295
    42a2:	601a      	str	r2, [r3, #0]
    42a4:	e05d      	b.n	4362 <vTaskIncrementTick+0x1b2>
    42a6:	f240 1348 	movw	r3, #328	; 0x148
    42aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42ae:	681b      	ldr	r3, [r3, #0]
    42b0:	68db      	ldr	r3, [r3, #12]
    42b2:	68db      	ldr	r3, [r3, #12]
    42b4:	60bb      	str	r3, [r7, #8]
    42b6:	68bb      	ldr	r3, [r7, #8]
    42b8:	685b      	ldr	r3, [r3, #4]
    42ba:	607b      	str	r3, [r7, #4]
    42bc:	f240 1394 	movw	r3, #404	; 0x194
    42c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42c4:	681a      	ldr	r2, [r3, #0]
    42c6:	687b      	ldr	r3, [r7, #4]
    42c8:	429a      	cmp	r2, r3
    42ca:	d206      	bcs.n	42da <vTaskIncrementTick+0x12a>
    42cc:	f240 0328 	movw	r3, #40	; 0x28
    42d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    42d4:	687a      	ldr	r2, [r7, #4]
    42d6:	601a      	str	r2, [r3, #0]
    42d8:	e043      	b.n	4362 <vTaskIncrementTick+0x1b2>
    42da:	68bb      	ldr	r3, [r7, #8]
    42dc:	f103 0304 	add.w	r3, r3, #4
    42e0:	4618      	mov	r0, r3
    42e2:	f7fe fd33 	bl	2d4c <vListRemove>
    42e6:	68bb      	ldr	r3, [r7, #8]
    42e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42ea:	2b00      	cmp	r3, #0
    42ec:	d005      	beq.n	42fa <vTaskIncrementTick+0x14a>
    42ee:	68bb      	ldr	r3, [r7, #8]
    42f0:	f103 0318 	add.w	r3, r3, #24
    42f4:	4618      	mov	r0, r3
    42f6:	f7fe fd29 	bl	2d4c <vListRemove>
    42fa:	68bb      	ldr	r3, [r7, #8]
    42fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    42fe:	f240 139c 	movw	r3, #412	; 0x19c
    4302:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4306:	681b      	ldr	r3, [r3, #0]
    4308:	429a      	cmp	r2, r3
    430a:	d906      	bls.n	431a <vTaskIncrementTick+0x16a>
    430c:	68bb      	ldr	r3, [r7, #8]
    430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4310:	f240 139c 	movw	r3, #412	; 0x19c
    4314:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4318:	601a      	str	r2, [r3, #0]
    431a:	68bb      	ldr	r3, [r7, #8]
    431c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    431e:	4613      	mov	r3, r2
    4320:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4324:	189b      	adds	r3, r3, r2
    4326:	ea4f 0383 	mov.w	r3, r3, lsl #2
    432a:	461a      	mov	r2, r3
    432c:	f240 03bc 	movw	r3, #188	; 0xbc
    4330:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4334:	18d2      	adds	r2, r2, r3
    4336:	68bb      	ldr	r3, [r7, #8]
    4338:	f103 0304 	add.w	r3, r3, #4
    433c:	4610      	mov	r0, r2
    433e:	4619      	mov	r1, r3
    4340:	f7fe fca2 	bl	2c88 <vListInsertEnd>
    4344:	e79f      	b.n	4286 <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
    4346:	f240 13a8 	movw	r3, #424	; 0x1a8
    434a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    434e:	681b      	ldr	r3, [r3, #0]
    4350:	f103 0201 	add.w	r2, r3, #1
    4354:	f240 13a8 	movw	r3, #424	; 0x1a8
    4358:	f2c2 0300 	movt	r3, #8192	; 0x2000
    435c:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    435e:	f002 fb1b 	bl	6998 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    4362:	f240 13a8 	movw	r3, #424	; 0x1a8
    4366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    436a:	681b      	ldr	r3, [r3, #0]
    436c:	2b00      	cmp	r3, #0
    436e:	d101      	bne.n	4374 <vTaskIncrementTick+0x1c4>
		{
			vApplicationTickHook();
    4370:	f002 fb12 	bl	6998 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    4374:	f107 0710 	add.w	r7, r7, #16
    4378:	46bd      	mov	sp, r7
    437a:	bd80      	pop	{r7, pc}

0000437c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    437c:	b480      	push	{r7}
    437e:	b083      	sub	sp, #12
    4380:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4382:	f240 13a4 	movw	r3, #420	; 0x1a4
    4386:	f2c2 0300 	movt	r3, #8192	; 0x2000
    438a:	681b      	ldr	r3, [r3, #0]
    438c:	2b00      	cmp	r3, #0
    438e:	d014      	beq.n	43ba <vTaskSwitchContext+0x3e>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4390:	f240 13ac 	movw	r3, #428	; 0x1ac
    4394:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4398:	f04f 0201 	mov.w	r2, #1
    439c:	601a      	str	r2, [r3, #0]
    439e:	e04c      	b.n	443a <vTaskSwitchContext+0xbe>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    43a0:	f240 139c 	movw	r3, #412	; 0x19c
    43a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43a8:	681b      	ldr	r3, [r3, #0]
    43aa:	f103 32ff 	add.w	r2, r3, #4294967295
    43ae:	f240 139c 	movw	r3, #412	; 0x19c
    43b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43b6:	601a      	str	r2, [r3, #0]
    43b8:	e000      	b.n	43bc <vTaskSwitchContext+0x40>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    43ba:	bf00      	nop
    43bc:	f240 139c 	movw	r3, #412	; 0x19c
    43c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43c4:	681a      	ldr	r2, [r3, #0]
    43c6:	4613      	mov	r3, r2
    43c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43cc:	189b      	adds	r3, r3, r2
    43ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43d2:	461a      	mov	r2, r3
    43d4:	f240 03bc 	movw	r3, #188	; 0xbc
    43d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43dc:	18d3      	adds	r3, r2, r3
    43de:	681b      	ldr	r3, [r3, #0]
    43e0:	2b00      	cmp	r3, #0
    43e2:	d0dd      	beq.n	43a0 <vTaskSwitchContext+0x24>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    43e4:	f240 139c 	movw	r3, #412	; 0x19c
    43e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    43ec:	681a      	ldr	r2, [r3, #0]
    43ee:	4613      	mov	r3, r2
    43f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43f4:	189b      	adds	r3, r3, r2
    43f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    43fa:	461a      	mov	r2, r3
    43fc:	f240 03bc 	movw	r3, #188	; 0xbc
    4400:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4404:	18d3      	adds	r3, r2, r3
    4406:	607b      	str	r3, [r7, #4]
    4408:	687b      	ldr	r3, [r7, #4]
    440a:	685b      	ldr	r3, [r3, #4]
    440c:	685a      	ldr	r2, [r3, #4]
    440e:	687b      	ldr	r3, [r7, #4]
    4410:	605a      	str	r2, [r3, #4]
    4412:	687b      	ldr	r3, [r7, #4]
    4414:	685a      	ldr	r2, [r3, #4]
    4416:	687b      	ldr	r3, [r7, #4]
    4418:	f103 0308 	add.w	r3, r3, #8
    441c:	429a      	cmp	r2, r3
    441e:	d104      	bne.n	442a <vTaskSwitchContext+0xae>
    4420:	687b      	ldr	r3, [r7, #4]
    4422:	685b      	ldr	r3, [r3, #4]
    4424:	685a      	ldr	r2, [r3, #4]
    4426:	687b      	ldr	r3, [r7, #4]
    4428:	605a      	str	r2, [r3, #4]
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	685b      	ldr	r3, [r3, #4]
    442e:	68da      	ldr	r2, [r3, #12]
    4430:	f240 03b8 	movw	r3, #184	; 0xb8
    4434:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4438:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
    443a:	f107 070c 	add.w	r7, r7, #12
    443e:	46bd      	mov	sp, r7
    4440:	bc80      	pop	{r7}
    4442:	4770      	bx	lr

00004444 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    4444:	b580      	push	{r7, lr}
    4446:	b084      	sub	sp, #16
    4448:	af00      	add	r7, sp, #0
    444a:	6078      	str	r0, [r7, #4]
    444c:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    444e:	f240 03b8 	movw	r3, #184	; 0xb8
    4452:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4456:	681b      	ldr	r3, [r3, #0]
    4458:	f103 0318 	add.w	r3, r3, #24
    445c:	6878      	ldr	r0, [r7, #4]
    445e:	4619      	mov	r1, r3
    4460:	f7fe fc3a 	bl	2cd8 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4464:	f240 03b8 	movw	r3, #184	; 0xb8
    4468:	f2c2 0300 	movt	r3, #8192	; 0x2000
    446c:	681b      	ldr	r3, [r3, #0]
    446e:	f103 0304 	add.w	r3, r3, #4
    4472:	4618      	mov	r0, r3
    4474:	f7fe fc6a 	bl	2d4c <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4478:	683b      	ldr	r3, [r7, #0]
    447a:	f1b3 3fff 	cmp.w	r3, #4294967295
    447e:	d10e      	bne.n	449e <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4480:	f240 03b8 	movw	r3, #184	; 0xb8
    4484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4488:	681b      	ldr	r3, [r3, #0]
    448a:	f103 0304 	add.w	r3, r3, #4
    448e:	f240 107c 	movw	r0, #380	; 0x17c
    4492:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4496:	4619      	mov	r1, r3
    4498:	f7fe fbf6 	bl	2c88 <vListInsertEnd>
    449c:	e00a      	b.n	44b4 <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    449e:	f240 1394 	movw	r3, #404	; 0x194
    44a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44a6:	681a      	ldr	r2, [r3, #0]
    44a8:	683b      	ldr	r3, [r7, #0]
    44aa:	18d3      	adds	r3, r2, r3
    44ac:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    44ae:	68f8      	ldr	r0, [r7, #12]
    44b0:	f000 f9f2 	bl	4898 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    44b4:	f107 0710 	add.w	r7, r7, #16
    44b8:	46bd      	mov	sp, r7
    44ba:	bd80      	pop	{r7, pc}

000044bc <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    44bc:	b580      	push	{r7, lr}
    44be:	b084      	sub	sp, #16
    44c0:	af00      	add	r7, sp, #0
    44c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    44c4:	687b      	ldr	r3, [r7, #4]
    44c6:	68db      	ldr	r3, [r3, #12]
    44c8:	68db      	ldr	r3, [r3, #12]
    44ca:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    44cc:	68bb      	ldr	r3, [r7, #8]
    44ce:	f103 0318 	add.w	r3, r3, #24
    44d2:	4618      	mov	r0, r3
    44d4:	f7fe fc3a 	bl	2d4c <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    44d8:	f240 13a4 	movw	r3, #420	; 0x1a4
    44dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44e0:	681b      	ldr	r3, [r3, #0]
    44e2:	2b00      	cmp	r3, #0
    44e4:	d12b      	bne.n	453e <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    44e6:	68bb      	ldr	r3, [r7, #8]
    44e8:	f103 0304 	add.w	r3, r3, #4
    44ec:	4618      	mov	r0, r3
    44ee:	f7fe fc2d 	bl	2d4c <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    44f2:	68bb      	ldr	r3, [r7, #8]
    44f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    44f6:	f240 139c 	movw	r3, #412	; 0x19c
    44fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    44fe:	681b      	ldr	r3, [r3, #0]
    4500:	429a      	cmp	r2, r3
    4502:	d906      	bls.n	4512 <xTaskRemoveFromEventList+0x56>
    4504:	68bb      	ldr	r3, [r7, #8]
    4506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4508:	f240 139c 	movw	r3, #412	; 0x19c
    450c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4510:	601a      	str	r2, [r3, #0]
    4512:	68bb      	ldr	r3, [r7, #8]
    4514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4516:	4613      	mov	r3, r2
    4518:	ea4f 0383 	mov.w	r3, r3, lsl #2
    451c:	189b      	adds	r3, r3, r2
    451e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4522:	461a      	mov	r2, r3
    4524:	f240 03bc 	movw	r3, #188	; 0xbc
    4528:	f2c2 0300 	movt	r3, #8192	; 0x2000
    452c:	18d2      	adds	r2, r2, r3
    452e:	68bb      	ldr	r3, [r7, #8]
    4530:	f103 0304 	add.w	r3, r3, #4
    4534:	4610      	mov	r0, r2
    4536:	4619      	mov	r1, r3
    4538:	f7fe fba6 	bl	2c88 <vListInsertEnd>
    453c:	e009      	b.n	4552 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    453e:	68bb      	ldr	r3, [r7, #8]
    4540:	f103 0318 	add.w	r3, r3, #24
    4544:	f240 1050 	movw	r0, #336	; 0x150
    4548:	f2c2 0000 	movt	r0, #8192	; 0x2000
    454c:	4619      	mov	r1, r3
    454e:	f7fe fb9b 	bl	2c88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4552:	68bb      	ldr	r3, [r7, #8]
    4554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4556:	f240 03b8 	movw	r3, #184	; 0xb8
    455a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    455e:	681b      	ldr	r3, [r3, #0]
    4560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4562:	429a      	cmp	r2, r3
    4564:	d303      	bcc.n	456e <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4566:	f04f 0301 	mov.w	r3, #1
    456a:	60fb      	str	r3, [r7, #12]
    456c:	e002      	b.n	4574 <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
    456e:	f04f 0300 	mov.w	r3, #0
    4572:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    4574:	68fb      	ldr	r3, [r7, #12]
}
    4576:	4618      	mov	r0, r3
    4578:	f107 0710 	add.w	r7, r7, #16
    457c:	46bd      	mov	sp, r7
    457e:	bd80      	pop	{r7, pc}

00004580 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4580:	b480      	push	{r7}
    4582:	b083      	sub	sp, #12
    4584:	af00      	add	r7, sp, #0
    4586:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4588:	f240 13b0 	movw	r3, #432	; 0x1b0
    458c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4590:	681a      	ldr	r2, [r3, #0]
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4596:	f240 1394 	movw	r3, #404	; 0x194
    459a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    459e:	681a      	ldr	r2, [r3, #0]
    45a0:	687b      	ldr	r3, [r7, #4]
    45a2:	605a      	str	r2, [r3, #4]
}
    45a4:	f107 070c 	add.w	r7, r7, #12
    45a8:	46bd      	mov	sp, r7
    45aa:	bc80      	pop	{r7}
    45ac:	4770      	bx	lr
    45ae:	bf00      	nop

000045b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    45b0:	b580      	push	{r7, lr}
    45b2:	b084      	sub	sp, #16
    45b4:	af00      	add	r7, sp, #0
    45b6:	6078      	str	r0, [r7, #4]
    45b8:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    45ba:	f000 fbc1 	bl	4d40 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    45be:	683b      	ldr	r3, [r7, #0]
    45c0:	681b      	ldr	r3, [r3, #0]
    45c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    45c6:	d103      	bne.n	45d0 <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
    45c8:	f04f 0300 	mov.w	r3, #0
    45cc:	60fb      	str	r3, [r7, #12]
    45ce:	e038      	b.n	4642 <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    45d0:	687b      	ldr	r3, [r7, #4]
    45d2:	681a      	ldr	r2, [r3, #0]
    45d4:	f240 13b0 	movw	r3, #432	; 0x1b0
    45d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45dc:	681b      	ldr	r3, [r3, #0]
    45de:	429a      	cmp	r2, r3
    45e0:	d00c      	beq.n	45fc <xTaskCheckForTimeOut+0x4c>
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	685a      	ldr	r2, [r3, #4]
    45e6:	f240 1394 	movw	r3, #404	; 0x194
    45ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45ee:	681b      	ldr	r3, [r3, #0]
    45f0:	429a      	cmp	r2, r3
    45f2:	d803      	bhi.n	45fc <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    45f4:	f04f 0301 	mov.w	r3, #1
    45f8:	60fb      	str	r3, [r7, #12]
    45fa:	e022      	b.n	4642 <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    45fc:	f240 1394 	movw	r3, #404	; 0x194
    4600:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4604:	681a      	ldr	r2, [r3, #0]
    4606:	687b      	ldr	r3, [r7, #4]
    4608:	685b      	ldr	r3, [r3, #4]
    460a:	1ad2      	subs	r2, r2, r3
    460c:	683b      	ldr	r3, [r7, #0]
    460e:	681b      	ldr	r3, [r3, #0]
    4610:	429a      	cmp	r2, r3
    4612:	d213      	bcs.n	463c <xTaskCheckForTimeOut+0x8c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4614:	683b      	ldr	r3, [r7, #0]
    4616:	681a      	ldr	r2, [r3, #0]
    4618:	687b      	ldr	r3, [r7, #4]
    461a:	6859      	ldr	r1, [r3, #4]
    461c:	f240 1394 	movw	r3, #404	; 0x194
    4620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	1acb      	subs	r3, r1, r3
    4628:	18d2      	adds	r2, r2, r3
    462a:	683b      	ldr	r3, [r7, #0]
    462c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    462e:	6878      	ldr	r0, [r7, #4]
    4630:	f7ff ffa6 	bl	4580 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4634:	f04f 0300 	mov.w	r3, #0
    4638:	60fb      	str	r3, [r7, #12]
    463a:	e002      	b.n	4642 <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
    463c:	f04f 0301 	mov.w	r3, #1
    4640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    4642:	f000 fb93 	bl	4d6c <vPortExitCritical>

	return xReturn;
    4646:	68fb      	ldr	r3, [r7, #12]
}
    4648:	4618      	mov	r0, r3
    464a:	f107 0710 	add.w	r7, r7, #16
    464e:	46bd      	mov	sp, r7
    4650:	bd80      	pop	{r7, pc}
    4652:	bf00      	nop

00004654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4654:	b480      	push	{r7}
    4656:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    4658:	f240 13ac 	movw	r3, #428	; 0x1ac
    465c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4660:	f04f 0201 	mov.w	r2, #1
    4664:	601a      	str	r2, [r3, #0]
}
    4666:	46bd      	mov	sp, r7
    4668:	bc80      	pop	{r7}
    466a:	4770      	bx	lr

0000466c <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )
	unsigned portBASE_TYPE uxTaskGetTaskNumber( xTaskHandle xTask )
	{
    466c:	b480      	push	{r7}
    466e:	b085      	sub	sp, #20
    4670:	af00      	add	r7, sp, #0
    4672:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxReturn;
	tskTCB *pxTCB;
	
		if( xTask != NULL )
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	2b00      	cmp	r3, #0
    4678:	d005      	beq.n	4686 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( tskTCB * ) xTask;
    467a:	687b      	ldr	r3, [r7, #4]
    467c:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    467e:	68bb      	ldr	r3, [r7, #8]
    4680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4682:	60fb      	str	r3, [r7, #12]
    4684:	e002      	b.n	468c <uxTaskGetTaskNumber+0x20>
		}
		else
		{
			uxReturn = 0U;
    4686:	f04f 0300 	mov.w	r3, #0
    468a:	60fb      	str	r3, [r7, #12]
		}
		
		return uxReturn;
    468c:	68fb      	ldr	r3, [r7, #12]
	}
    468e:	4618      	mov	r0, r3
    4690:	f107 0714 	add.w	r7, r7, #20
    4694:	46bd      	mov	sp, r7
    4696:	bc80      	pop	{r7}
    4698:	4770      	bx	lr
    469a:	bf00      	nop

0000469c <vTaskSetTaskNumber>:
#endif
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )
	void vTaskSetTaskNumber( xTaskHandle xTask, unsigned portBASE_TYPE uxHandle )
	{
    469c:	b480      	push	{r7}
    469e:	b085      	sub	sp, #20
    46a0:	af00      	add	r7, sp, #0
    46a2:	6078      	str	r0, [r7, #4]
    46a4:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	
		if( xTask != NULL )
    46a6:	687b      	ldr	r3, [r7, #4]
    46a8:	2b00      	cmp	r3, #0
    46aa:	d004      	beq.n	46b6 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( tskTCB * ) xTask;
    46ac:	687b      	ldr	r3, [r7, #4]
    46ae:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    46b0:	68fb      	ldr	r3, [r7, #12]
    46b2:	683a      	ldr	r2, [r7, #0]
    46b4:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
    46b6:	f107 0714 	add.w	r7, r7, #20
    46ba:	46bd      	mov	sp, r7
    46bc:	bc80      	pop	{r7}
    46be:	4770      	bx	lr

000046c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    46c0:	b580      	push	{r7, lr}
    46c2:	b082      	sub	sp, #8
    46c4:	af00      	add	r7, sp, #0
    46c6:	6078      	str	r0, [r7, #4]
    46c8:	e000      	b.n	46cc <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    46ca:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    46cc:	f000 f898 	bl	4800 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    46d0:	f240 03bc 	movw	r3, #188	; 0xbc
    46d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    46d8:	681b      	ldr	r3, [r3, #0]
    46da:	2b01      	cmp	r3, #1
    46dc:	d9f5      	bls.n	46ca <prvIdleTask+0xa>
			{
				taskYIELD();
    46de:	f000 fb23 	bl	4d28 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    46e2:	e7f2      	b.n	46ca <prvIdleTask+0xa>

000046e4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    46e4:	b580      	push	{r7, lr}
    46e6:	b084      	sub	sp, #16
    46e8:	af00      	add	r7, sp, #0
    46ea:	60f8      	str	r0, [r7, #12]
    46ec:	60b9      	str	r1, [r7, #8]
    46ee:	607a      	str	r2, [r7, #4]
    46f0:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    46f2:	68fb      	ldr	r3, [r7, #12]
    46f4:	f103 0334 	add.w	r3, r3, #52	; 0x34
    46f8:	4618      	mov	r0, r3
    46fa:	68b9      	ldr	r1, [r7, #8]
    46fc:	f04f 0210 	mov.w	r2, #16
    4700:	f001 fd6e 	bl	61e0 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4704:	68fb      	ldr	r3, [r7, #12]
    4706:	f04f 0200 	mov.w	r2, #0
    470a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    470e:	687b      	ldr	r3, [r7, #4]
    4710:	2b04      	cmp	r3, #4
    4712:	d902      	bls.n	471a <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4714:	f04f 0304 	mov.w	r3, #4
    4718:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    471a:	68fb      	ldr	r3, [r7, #12]
    471c:	687a      	ldr	r2, [r7, #4]
    471e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    4720:	68fb      	ldr	r3, [r7, #12]
    4722:	687a      	ldr	r2, [r7, #4]
    4724:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    4726:	68fb      	ldr	r3, [r7, #12]
    4728:	f103 0304 	add.w	r3, r3, #4
    472c:	4618      	mov	r0, r3
    472e:	f7fe fa9d 	bl	2c6c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    4732:	68fb      	ldr	r3, [r7, #12]
    4734:	f103 0318 	add.w	r3, r3, #24
    4738:	4618      	mov	r0, r3
    473a:	f7fe fa97 	bl	2c6c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    473e:	68fb      	ldr	r3, [r7, #12]
    4740:	68fa      	ldr	r2, [r7, #12]
    4742:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	f1c3 0205 	rsb	r2, r3, #5
    474a:	68fb      	ldr	r3, [r7, #12]
    474c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    474e:	68fb      	ldr	r3, [r7, #12]
    4750:	68fa      	ldr	r2, [r7, #12]
    4752:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    4754:	f107 0710 	add.w	r7, r7, #16
    4758:	46bd      	mov	sp, r7
    475a:	bd80      	pop	{r7, pc}

0000475c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    475c:	b580      	push	{r7, lr}
    475e:	b082      	sub	sp, #8
    4760:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4762:	f04f 0300 	mov.w	r3, #0
    4766:	607b      	str	r3, [r7, #4]
    4768:	e013      	b.n	4792 <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    476a:	687a      	ldr	r2, [r7, #4]
    476c:	4613      	mov	r3, r2
    476e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4772:	189b      	adds	r3, r3, r2
    4774:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4778:	461a      	mov	r2, r3
    477a:	f240 03bc 	movw	r3, #188	; 0xbc
    477e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4782:	18d3      	adds	r3, r2, r3
    4784:	4618      	mov	r0, r3
    4786:	f7fe fa51 	bl	2c2c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    478a:	687b      	ldr	r3, [r7, #4]
    478c:	f103 0301 	add.w	r3, r3, #1
    4790:	607b      	str	r3, [r7, #4]
    4792:	687b      	ldr	r3, [r7, #4]
    4794:	2b04      	cmp	r3, #4
    4796:	d9e8      	bls.n	476a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    4798:	f240 1020 	movw	r0, #288	; 0x120
    479c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    47a0:	f7fe fa44 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    47a4:	f240 1034 	movw	r0, #308	; 0x134
    47a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    47ac:	f7fe fa3e 	bl	2c2c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    47b0:	f240 1050 	movw	r0, #336	; 0x150
    47b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    47b8:	f7fe fa38 	bl	2c2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    47bc:	f240 1064 	movw	r0, #356	; 0x164
    47c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    47c4:	f7fe fa32 	bl	2c2c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    47c8:	f240 107c 	movw	r0, #380	; 0x17c
    47cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    47d0:	f7fe fa2c 	bl	2c2c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    47d4:	f240 1348 	movw	r3, #328	; 0x148
    47d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47dc:	f240 1220 	movw	r2, #288	; 0x120
    47e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    47e4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    47e6:	f240 134c 	movw	r3, #332	; 0x14c
    47ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    47ee:	f240 1234 	movw	r2, #308	; 0x134
    47f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    47f6:	601a      	str	r2, [r3, #0]
}
    47f8:	f107 0708 	add.w	r7, r7, #8
    47fc:	46bd      	mov	sp, r7
    47fe:	bd80      	pop	{r7, pc}

00004800 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4800:	b580      	push	{r7, lr}
    4802:	b082      	sub	sp, #8
    4804:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    4806:	f240 1378 	movw	r3, #376	; 0x178
    480a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    480e:	681b      	ldr	r3, [r3, #0]
    4810:	2b00      	cmp	r3, #0
    4812:	d03c      	beq.n	488e <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
    4814:	f7ff fb3e 	bl	3e94 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4818:	f240 1364 	movw	r3, #356	; 0x164
    481c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	2b00      	cmp	r3, #0
    4824:	bf14      	ite	ne
    4826:	2300      	movne	r3, #0
    4828:	2301      	moveq	r3, #1
    482a:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    482c:	f7ff fb44 	bl	3eb8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4830:	687b      	ldr	r3, [r7, #4]
    4832:	2b00      	cmp	r3, #0
    4834:	d12b      	bne.n	488e <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4836:	f000 fa83 	bl	4d40 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    483a:	f240 1364 	movw	r3, #356	; 0x164
    483e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4842:	68db      	ldr	r3, [r3, #12]
    4844:	68db      	ldr	r3, [r3, #12]
    4846:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    4848:	683b      	ldr	r3, [r7, #0]
    484a:	f103 0304 	add.w	r3, r3, #4
    484e:	4618      	mov	r0, r3
    4850:	f7fe fa7c 	bl	2d4c <vListRemove>
					--uxCurrentNumberOfTasks;
    4854:	f240 1390 	movw	r3, #400	; 0x190
    4858:	f2c2 0300 	movt	r3, #8192	; 0x2000
    485c:	681b      	ldr	r3, [r3, #0]
    485e:	f103 32ff 	add.w	r2, r3, #4294967295
    4862:	f240 1390 	movw	r3, #400	; 0x190
    4866:	f2c2 0300 	movt	r3, #8192	; 0x2000
    486a:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    486c:	f240 1378 	movw	r3, #376	; 0x178
    4870:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4874:	681b      	ldr	r3, [r3, #0]
    4876:	f103 32ff 	add.w	r2, r3, #4294967295
    487a:	f240 1378 	movw	r3, #376	; 0x178
    487e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4882:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    4884:	f000 fa72 	bl	4d6c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    4888:	6838      	ldr	r0, [r7, #0]
    488a:	f000 f901 	bl	4a90 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    488e:	f107 0708 	add.w	r7, r7, #8
    4892:	46bd      	mov	sp, r7
    4894:	bd80      	pop	{r7, pc}
    4896:	bf00      	nop

00004898 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    4898:	b580      	push	{r7, lr}
    489a:	b082      	sub	sp, #8
    489c:	af00      	add	r7, sp, #0
    489e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    48a0:	f240 03b8 	movw	r3, #184	; 0xb8
    48a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48a8:	681b      	ldr	r3, [r3, #0]
    48aa:	687a      	ldr	r2, [r7, #4]
    48ac:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    48ae:	f240 1394 	movw	r3, #404	; 0x194
    48b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48b6:	681b      	ldr	r3, [r3, #0]
    48b8:	687a      	ldr	r2, [r7, #4]
    48ba:	429a      	cmp	r2, r3
    48bc:	d210      	bcs.n	48e0 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    48be:	f240 134c 	movw	r3, #332	; 0x14c
    48c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48c6:	681a      	ldr	r2, [r3, #0]
    48c8:	f240 03b8 	movw	r3, #184	; 0xb8
    48cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48d0:	681b      	ldr	r3, [r3, #0]
    48d2:	f103 0304 	add.w	r3, r3, #4
    48d6:	4610      	mov	r0, r2
    48d8:	4619      	mov	r1, r3
    48da:	f7fe f9fd 	bl	2cd8 <vListInsert>
    48de:	e01d      	b.n	491c <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    48e0:	f240 1348 	movw	r3, #328	; 0x148
    48e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48e8:	681a      	ldr	r2, [r3, #0]
    48ea:	f240 03b8 	movw	r3, #184	; 0xb8
    48ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    48f2:	681b      	ldr	r3, [r3, #0]
    48f4:	f103 0304 	add.w	r3, r3, #4
    48f8:	4610      	mov	r0, r2
    48fa:	4619      	mov	r1, r3
    48fc:	f7fe f9ec 	bl	2cd8 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4900:	f240 0328 	movw	r3, #40	; 0x28
    4904:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4908:	681b      	ldr	r3, [r3, #0]
    490a:	687a      	ldr	r2, [r7, #4]
    490c:	429a      	cmp	r2, r3
    490e:	d205      	bcs.n	491c <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4910:	f240 0328 	movw	r3, #40	; 0x28
    4914:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4918:	687a      	ldr	r2, [r7, #4]
    491a:	601a      	str	r2, [r3, #0]
		}
	}
}
    491c:	f107 0708 	add.w	r7, r7, #8
    4920:	46bd      	mov	sp, r7
    4922:	bd80      	pop	{r7, pc}

00004924 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4924:	b580      	push	{r7, lr}
    4926:	b084      	sub	sp, #16
    4928:	af00      	add	r7, sp, #0
    492a:	4603      	mov	r3, r0
    492c:	6039      	str	r1, [r7, #0]
    492e:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4930:	f04f 0050 	mov.w	r0, #80	; 0x50
    4934:	f000 fa88 	bl	4e48 <pvPortMalloc>
    4938:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    493a:	68fb      	ldr	r3, [r7, #12]
    493c:	2b00      	cmp	r3, #0
    493e:	d023      	beq.n	4988 <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    4940:	683b      	ldr	r3, [r7, #0]
    4942:	2b00      	cmp	r3, #0
    4944:	d107      	bne.n	4956 <prvAllocateTCBAndStack+0x32>
    4946:	88fb      	ldrh	r3, [r7, #6]
    4948:	ea4f 0383 	mov.w	r3, r3, lsl #2
    494c:	4618      	mov	r0, r3
    494e:	f000 fa7b 	bl	4e48 <pvPortMalloc>
    4952:	4603      	mov	r3, r0
    4954:	e000      	b.n	4958 <prvAllocateTCBAndStack+0x34>
    4956:	683b      	ldr	r3, [r7, #0]
    4958:	68fa      	ldr	r2, [r7, #12]
    495a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    495c:	68fb      	ldr	r3, [r7, #12]
    495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4960:	2b00      	cmp	r3, #0
    4962:	d106      	bne.n	4972 <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4964:	68f8      	ldr	r0, [r7, #12]
    4966:	f000 fabb 	bl	4ee0 <vPortFree>
			pxNewTCB = NULL;
    496a:	f04f 0300 	mov.w	r3, #0
    496e:	60fb      	str	r3, [r7, #12]
    4970:	e00a      	b.n	4988 <prvAllocateTCBAndStack+0x64>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    4972:	68fb      	ldr	r3, [r7, #12]
    4974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4976:	88fb      	ldrh	r3, [r7, #6]
    4978:	ea4f 0383 	mov.w	r3, r3, lsl #2
    497c:	4610      	mov	r0, r2
    497e:	f04f 01a5 	mov.w	r1, #165	; 0xa5
    4982:	461a      	mov	r2, r3
    4984:	f001 fb2a 	bl	5fdc <memset>
		}
	}

	return pxNewTCB;
    4988:	68fb      	ldr	r3, [r7, #12]
}
    498a:	4618      	mov	r0, r3
    498c:	f107 0710 	add.w	r7, r7, #16
    4990:	46bd      	mov	sp, r7
    4992:	bd80      	pop	{r7, pc}

00004994 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed char cStatus )
	{
    4994:	b590      	push	{r4, r7, lr}
    4996:	b08f      	sub	sp, #60	; 0x3c
    4998:	af04      	add	r7, sp, #16
    499a:	60f8      	str	r0, [r7, #12]
    499c:	60b9      	str	r1, [r7, #8]
    499e:	4613      	mov	r3, r2
    49a0:	71fb      	strb	r3, [r7, #7]
	volatile tskTCB *pxNextTCB, *pxFirstTCB;
	unsigned short usStackRemaining;
	PRIVILEGED_DATA static char pcStatusString[ 50 ];

		/* Write the details of all the TCB's in pxList into the buffer. */
		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    49a2:	68bb      	ldr	r3, [r7, #8]
    49a4:	627b      	str	r3, [r7, #36]	; 0x24
    49a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49a8:	685b      	ldr	r3, [r3, #4]
    49aa:	685a      	ldr	r2, [r3, #4]
    49ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49ae:	605a      	str	r2, [r3, #4]
    49b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49b2:	685a      	ldr	r2, [r3, #4]
    49b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49b6:	f103 0308 	add.w	r3, r3, #8
    49ba:	429a      	cmp	r2, r3
    49bc:	d104      	bne.n	49c8 <prvListTaskWithinSingleList+0x34>
    49be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49c0:	685b      	ldr	r3, [r3, #4]
    49c2:	685a      	ldr	r2, [r3, #4]
    49c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49c6:	605a      	str	r2, [r3, #4]
    49c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    49ca:	685b      	ldr	r3, [r3, #4]
    49cc:	68db      	ldr	r3, [r3, #12]
    49ce:	623b      	str	r3, [r7, #32]
		do
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    49d0:	68bb      	ldr	r3, [r7, #8]
    49d2:	61fb      	str	r3, [r7, #28]
    49d4:	69fb      	ldr	r3, [r7, #28]
    49d6:	685b      	ldr	r3, [r3, #4]
    49d8:	685a      	ldr	r2, [r3, #4]
    49da:	69fb      	ldr	r3, [r7, #28]
    49dc:	605a      	str	r2, [r3, #4]
    49de:	69fb      	ldr	r3, [r7, #28]
    49e0:	685a      	ldr	r2, [r3, #4]
    49e2:	69fb      	ldr	r3, [r7, #28]
    49e4:	f103 0308 	add.w	r3, r3, #8
    49e8:	429a      	cmp	r2, r3
    49ea:	d104      	bne.n	49f6 <prvListTaskWithinSingleList+0x62>
    49ec:	69fb      	ldr	r3, [r7, #28]
    49ee:	685b      	ldr	r3, [r3, #4]
    49f0:	685a      	ldr	r2, [r3, #4]
    49f2:	69fb      	ldr	r3, [r7, #28]
    49f4:	605a      	str	r2, [r3, #4]
    49f6:	69fb      	ldr	r3, [r7, #28]
    49f8:	685b      	ldr	r3, [r3, #4]
    49fa:	68db      	ldr	r3, [r3, #12]
    49fc:	61bb      	str	r3, [r7, #24]
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
			}
			#else
			{
				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
    49fe:	69bb      	ldr	r3, [r7, #24]
    4a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4a02:	4618      	mov	r0, r3
    4a04:	f000 f828 	bl	4a58 <usTaskCheckFreeStackSpace>
    4a08:	4603      	mov	r3, r0
    4a0a:	82fb      	strh	r3, [r7, #22]
			}
			#endif			
			
			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, ( unsigned int ) pxNextTCB->uxPriority, usStackRemaining, ( unsigned int ) pxNextTCB->uxTCBNumber );
    4a0c:	69bb      	ldr	r3, [r7, #24]
    4a0e:	f103 0234 	add.w	r2, r3, #52	; 0x34
    4a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4a16:	69b9      	ldr	r1, [r7, #24]
    4a18:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    4a1a:	8af8      	ldrh	r0, [r7, #22]
    4a1c:	69b9      	ldr	r1, [r7, #24]
    4a1e:	6c49      	ldr	r1, [r1, #68]	; 0x44
    4a20:	9400      	str	r4, [sp, #0]
    4a22:	9001      	str	r0, [sp, #4]
    4a24:	9102      	str	r1, [sp, #8]
    4a26:	f240 10b8 	movw	r0, #440	; 0x1b8
    4a2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4a2e:	f646 317c 	movw	r1, #27516	; 0x6b7c
    4a32:	f2c0 0100 	movt	r1, #0
    4a36:	f001 f9a9 	bl	5d8c <sprintf>
			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
    4a3a:	68f8      	ldr	r0, [r7, #12]
    4a3c:	f240 11b8 	movw	r1, #440	; 0x1b8
    4a40:	f2c2 0100 	movt	r1, #8192	; 0x2000
    4a44:	f001 fc78 	bl	6338 <strcat>

		} while( pxNextTCB != pxFirstTCB );
    4a48:	69ba      	ldr	r2, [r7, #24]
    4a4a:	6a3b      	ldr	r3, [r7, #32]
    4a4c:	429a      	cmp	r2, r3
    4a4e:	d1bf      	bne.n	49d0 <prvListTaskWithinSingleList+0x3c>
	}
    4a50:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    4a54:	46bd      	mov	sp, r7
    4a56:	bd90      	pop	{r4, r7, pc}

00004a58 <usTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
    4a58:	b490      	push	{r4, r7}
    4a5a:	b082      	sub	sp, #8
    4a5c:	af00      	add	r7, sp, #0
    4a5e:	6078      	str	r0, [r7, #4]
	register unsigned short usCount = 0U;
    4a60:	f04f 0400 	mov.w	r4, #0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    4a64:	e006      	b.n	4a74 <usTaskCheckFreeStackSpace+0x1c>
		{
			pucStackByte -= portSTACK_GROWTH;
    4a66:	687b      	ldr	r3, [r7, #4]
    4a68:	f103 0301 	add.w	r3, r3, #1
    4a6c:	607b      	str	r3, [r7, #4]
			usCount++;
    4a6e:	f104 0301 	add.w	r3, r4, #1
    4a72:	b29c      	uxth	r4, r3

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    4a74:	687b      	ldr	r3, [r7, #4]
    4a76:	781b      	ldrb	r3, [r3, #0]
    4a78:	2ba5      	cmp	r3, #165	; 0xa5
    4a7a:	d0f4      	beq.n	4a66 <usTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
		}

		usCount /= sizeof( portSTACK_TYPE );
    4a7c:	ea4f 0394 	mov.w	r3, r4, lsr #2
    4a80:	b29c      	uxth	r4, r3

		return usCount;
    4a82:	4623      	mov	r3, r4
	}
    4a84:	4618      	mov	r0, r3
    4a86:	f107 0708 	add.w	r7, r7, #8
    4a8a:	46bd      	mov	sp, r7
    4a8c:	bc90      	pop	{r4, r7}
    4a8e:	4770      	bx	lr

00004a90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    4a90:	b580      	push	{r7, lr}
    4a92:	b082      	sub	sp, #8
    4a94:	af00      	add	r7, sp, #0
    4a96:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    4a98:	687b      	ldr	r3, [r7, #4]
    4a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4a9c:	4618      	mov	r0, r3
    4a9e:	f000 fa1f 	bl	4ee0 <vPortFree>
		vPortFree( pxTCB );
    4aa2:	6878      	ldr	r0, [r7, #4]
    4aa4:	f000 fa1c 	bl	4ee0 <vPortFree>
	}
    4aa8:	f107 0708 	add.w	r7, r7, #8
    4aac:	46bd      	mov	sp, r7
    4aae:	bd80      	pop	{r7, pc}

00004ab0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    4ab0:	b480      	push	{r7}
    4ab2:	b083      	sub	sp, #12
    4ab4:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    4ab6:	f240 03b8 	movw	r3, #184	; 0xb8
    4aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4abe:	681b      	ldr	r3, [r3, #0]
    4ac0:	607b      	str	r3, [r7, #4]

		return xReturn;
    4ac2:	687b      	ldr	r3, [r7, #4]
	}
    4ac4:	4618      	mov	r0, r3
    4ac6:	f107 070c 	add.w	r7, r7, #12
    4aca:	46bd      	mov	sp, r7
    4acc:	bc80      	pop	{r7}
    4ace:	4770      	bx	lr

00004ad0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    4ad0:	b580      	push	{r7, lr}
    4ad2:	b084      	sub	sp, #16
    4ad4:	af00      	add	r7, sp, #0
    4ad6:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4ae0:	f240 03b8 	movw	r3, #184	; 0xb8
    4ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ae8:	681b      	ldr	r3, [r3, #0]
    4aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4aec:	429a      	cmp	r2, r3
    4aee:	d257      	bcs.n	4ba0 <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4af0:	f240 03b8 	movw	r3, #184	; 0xb8
    4af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4af8:	681b      	ldr	r3, [r3, #0]
    4afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4afc:	f1c3 0205 	rsb	r2, r3, #5
    4b00:	68fb      	ldr	r3, [r7, #12]
    4b02:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4b04:	68fb      	ldr	r3, [r7, #12]
    4b06:	6959      	ldr	r1, [r3, #20]
    4b08:	68fb      	ldr	r3, [r7, #12]
    4b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b0c:	4613      	mov	r3, r2
    4b0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4b12:	189b      	adds	r3, r3, r2
    4b14:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4b18:	461a      	mov	r2, r3
    4b1a:	f240 03bc 	movw	r3, #188	; 0xbc
    4b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b22:	18d3      	adds	r3, r2, r3
    4b24:	4299      	cmp	r1, r3
    4b26:	d133      	bne.n	4b90 <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    4b28:	68fb      	ldr	r3, [r7, #12]
    4b2a:	f103 0304 	add.w	r3, r3, #4
    4b2e:	4618      	mov	r0, r3
    4b30:	f7fe f90c 	bl	2d4c <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4b34:	f240 03b8 	movw	r3, #184	; 0xb8
    4b38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b40:	68fb      	ldr	r3, [r7, #12]
    4b42:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    4b44:	68fb      	ldr	r3, [r7, #12]
    4b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b48:	f240 139c 	movw	r3, #412	; 0x19c
    4b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b50:	681b      	ldr	r3, [r3, #0]
    4b52:	429a      	cmp	r2, r3
    4b54:	d906      	bls.n	4b64 <vTaskPriorityInherit+0x94>
    4b56:	68fb      	ldr	r3, [r7, #12]
    4b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b5a:	f240 139c 	movw	r3, #412	; 0x19c
    4b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b62:	601a      	str	r2, [r3, #0]
    4b64:	68fb      	ldr	r3, [r7, #12]
    4b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b68:	4613      	mov	r3, r2
    4b6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4b6e:	189b      	adds	r3, r3, r2
    4b70:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4b74:	461a      	mov	r2, r3
    4b76:	f240 03bc 	movw	r3, #188	; 0xbc
    4b7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b7e:	18d2      	adds	r2, r2, r3
    4b80:	68fb      	ldr	r3, [r7, #12]
    4b82:	f103 0304 	add.w	r3, r3, #4
    4b86:	4610      	mov	r0, r2
    4b88:	4619      	mov	r1, r3
    4b8a:	f7fe f87d 	bl	2c88 <vListInsertEnd>
    4b8e:	e007      	b.n	4ba0 <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4b90:	f240 03b8 	movw	r3, #184	; 0xb8
    4b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4b98:	681b      	ldr	r3, [r3, #0]
    4b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4b9c:	68fb      	ldr	r3, [r7, #12]
    4b9e:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    4ba0:	f107 0710 	add.w	r7, r7, #16
    4ba4:	46bd      	mov	sp, r7
    4ba6:	bd80      	pop	{r7, pc}

00004ba8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    4ba8:	b580      	push	{r7, lr}
    4baa:	b084      	sub	sp, #16
    4bac:	af00      	add	r7, sp, #0
    4bae:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    4bb0:	687b      	ldr	r3, [r7, #4]
    4bb2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    4bb4:	687b      	ldr	r3, [r7, #4]
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	d03a      	beq.n	4c30 <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    4bba:	68fb      	ldr	r3, [r7, #12]
    4bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bbe:	68fb      	ldr	r3, [r7, #12]
    4bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4bc2:	429a      	cmp	r2, r3
    4bc4:	d034      	beq.n	4c30 <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    4bc6:	68fb      	ldr	r3, [r7, #12]
    4bc8:	f103 0304 	add.w	r3, r3, #4
    4bcc:	4618      	mov	r0, r3
    4bce:	f7fe f8bd 	bl	2d4c <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4bd2:	68fb      	ldr	r3, [r7, #12]
    4bd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    4bd6:	68fb      	ldr	r3, [r7, #12]
    4bd8:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4bda:	68fb      	ldr	r3, [r7, #12]
    4bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bde:	f1c3 0205 	rsb	r2, r3, #5
    4be2:	68fb      	ldr	r3, [r7, #12]
    4be4:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    4be6:	68fb      	ldr	r3, [r7, #12]
    4be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bea:	f240 139c 	movw	r3, #412	; 0x19c
    4bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4bf2:	681b      	ldr	r3, [r3, #0]
    4bf4:	429a      	cmp	r2, r3
    4bf6:	d906      	bls.n	4c06 <vTaskPriorityDisinherit+0x5e>
    4bf8:	68fb      	ldr	r3, [r7, #12]
    4bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4bfc:	f240 139c 	movw	r3, #412	; 0x19c
    4c00:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c04:	601a      	str	r2, [r3, #0]
    4c06:	68fb      	ldr	r3, [r7, #12]
    4c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4c0a:	4613      	mov	r3, r2
    4c0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4c10:	189b      	adds	r3, r3, r2
    4c12:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4c16:	461a      	mov	r2, r3
    4c18:	f240 03bc 	movw	r3, #188	; 0xbc
    4c1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4c20:	18d2      	adds	r2, r2, r3
    4c22:	68fb      	ldr	r3, [r7, #12]
    4c24:	f103 0304 	add.w	r3, r3, #4
    4c28:	4610      	mov	r0, r2
    4c2a:	4619      	mov	r1, r3
    4c2c:	f7fe f82c 	bl	2c88 <vListInsertEnd>
			}
		}
	}
    4c30:	f107 0710 	add.w	r7, r7, #16
    4c34:	46bd      	mov	sp, r7
    4c36:	bd80      	pop	{r7, pc}

00004c38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    4c38:	b480      	push	{r7}
    4c3a:	b085      	sub	sp, #20
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	60f8      	str	r0, [r7, #12]
    4c40:	60b9      	str	r1, [r7, #8]
    4c42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    4c44:	68fb      	ldr	r3, [r7, #12]
    4c46:	f1a3 0304 	sub.w	r3, r3, #4
    4c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    4c4c:	68fb      	ldr	r3, [r7, #12]
    4c4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4c52:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4c54:	68fb      	ldr	r3, [r7, #12]
    4c56:	f1a3 0304 	sub.w	r3, r3, #4
    4c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    4c5c:	68ba      	ldr	r2, [r7, #8]
    4c5e:	68fb      	ldr	r3, [r7, #12]
    4c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    4c62:	68fb      	ldr	r3, [r7, #12]
    4c64:	f1a3 0304 	sub.w	r3, r3, #4
    4c68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    4c6a:	68fb      	ldr	r3, [r7, #12]
    4c6c:	f04f 0200 	mov.w	r2, #0
    4c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    4c72:	68fb      	ldr	r3, [r7, #12]
    4c74:	f1a3 0314 	sub.w	r3, r3, #20
    4c78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    4c7a:	687a      	ldr	r2, [r7, #4]
    4c7c:	68fb      	ldr	r3, [r7, #12]
    4c7e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    4c80:	68fb      	ldr	r3, [r7, #12]
    4c82:	f1a3 0320 	sub.w	r3, r3, #32
    4c86:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    4c88:	68fb      	ldr	r3, [r7, #12]
}
    4c8a:	4618      	mov	r0, r3
    4c8c:	f107 0714 	add.w	r7, r7, #20
    4c90:	46bd      	mov	sp, r7
    4c92:	bc80      	pop	{r7}
    4c94:	4770      	bx	lr
    4c96:	bf00      	nop

00004c98 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    4c98:	4b06      	ldr	r3, [pc, #24]	; (4cb4 <pxCurrentTCBConst2>)
    4c9a:	6819      	ldr	r1, [r3, #0]
    4c9c:	6808      	ldr	r0, [r1, #0]
    4c9e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4ca2:	f380 8809 	msr	PSP, r0
    4ca6:	f04f 0000 	mov.w	r0, #0
    4caa:	f380 8811 	msr	BASEPRI, r0
    4cae:	f04e 0e0d 	orr.w	lr, lr, #13
    4cb2:	4770      	bx	lr

00004cb4 <pxCurrentTCBConst2>:
    4cb4:	200000b8 	.word	0x200000b8

00004cb8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    4cb8:	4862      	ldr	r0, [pc, #392]	; (4e44 <prvSetupTimerInterrupt+0x2c>)
    4cba:	6800      	ldr	r0, [r0, #0]
    4cbc:	6800      	ldr	r0, [r0, #0]
    4cbe:	f380 8808 	msr	MSP, r0
    4cc2:	b662      	cpsie	i
    4cc4:	df00      	svc	0
    4cc6:	bf00      	nop

00004cc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    4cc8:	b580      	push	{r7, lr}
    4cca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    4ccc:	f64e 5320 	movw	r3, #60704	; 0xed20
    4cd0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4cd4:	f64e 5220 	movw	r2, #60704	; 0xed20
    4cd8:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4cdc:	6812      	ldr	r2, [r2, #0]
    4cde:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    4ce2:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    4ce4:	f64e 5320 	movw	r3, #60704	; 0xed20
    4ce8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4cec:	f64e 5220 	movw	r2, #60704	; 0xed20
    4cf0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4cf4:	6812      	ldr	r2, [r2, #0]
    4cf6:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    4cfa:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    4cfc:	f000 f88c 	bl	4e18 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    4d00:	f240 032c 	movw	r3, #44	; 0x2c
    4d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d08:	f04f 0200 	mov.w	r2, #0
    4d0c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    4d0e:	f7ff ffd3 	bl	4cb8 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    4d12:	f04f 0300 	mov.w	r3, #0
}
    4d16:	4618      	mov	r0, r3
    4d18:	bd80      	pop	{r7, pc}
    4d1a:	bf00      	nop

00004d1c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    4d1c:	b480      	push	{r7}
    4d1e:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    4d20:	46bd      	mov	sp, r7
    4d22:	bc80      	pop	{r7}
    4d24:	4770      	bx	lr
    4d26:	bf00      	nop

00004d28 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    4d28:	b480      	push	{r7}
    4d2a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4d2c:	f64e 5304 	movw	r3, #60676	; 0xed04
    4d30:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4d38:	601a      	str	r2, [r3, #0]
}
    4d3a:	46bd      	mov	sp, r7
    4d3c:	bc80      	pop	{r7}
    4d3e:	4770      	bx	lr

00004d40 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    4d40:	b480      	push	{r7}
    4d42:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4d44:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4d48:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    4d4c:	f240 032c 	movw	r3, #44	; 0x2c
    4d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d54:	681b      	ldr	r3, [r3, #0]
    4d56:	f103 0201 	add.w	r2, r3, #1
    4d5a:	f240 032c 	movw	r3, #44	; 0x2c
    4d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d62:	601a      	str	r2, [r3, #0]
}
    4d64:	46bd      	mov	sp, r7
    4d66:	bc80      	pop	{r7}
    4d68:	4770      	bx	lr
    4d6a:	bf00      	nop

00004d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    4d6c:	b480      	push	{r7}
    4d6e:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    4d70:	f240 032c 	movw	r3, #44	; 0x2c
    4d74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d78:	681b      	ldr	r3, [r3, #0]
    4d7a:	f103 32ff 	add.w	r2, r3, #4294967295
    4d7e:	f240 032c 	movw	r3, #44	; 0x2c
    4d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d86:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    4d88:	f240 032c 	movw	r3, #44	; 0x2c
    4d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4d90:	681b      	ldr	r3, [r3, #0]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d103      	bne.n	4d9e <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
    4d96:	f04f 0000 	mov.w	r0, #0
    4d9a:	f380 8811 	msr	BASEPRI, r0
	}
}
    4d9e:	46bd      	mov	sp, r7
    4da0:	bc80      	pop	{r7}
    4da2:	4770      	bx	lr

00004da4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4da4:	f3ef 8009 	mrs	r0, PSP
    4da8:	4b0c      	ldr	r3, [pc, #48]	; (4ddc <pxCurrentTCBConst>)
    4daa:	681a      	ldr	r2, [r3, #0]
    4dac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4db0:	6010      	str	r0, [r2, #0]
    4db2:	e92d 4008 	stmdb	sp!, {r3, lr}
    4db6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4dba:	f380 8811 	msr	BASEPRI, r0
    4dbe:	f7ff fadd 	bl	437c <vTaskSwitchContext>
    4dc2:	f04f 0000 	mov.w	r0, #0
    4dc6:	f380 8811 	msr	BASEPRI, r0
    4dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4dce:	6819      	ldr	r1, [r3, #0]
    4dd0:	6808      	ldr	r0, [r1, #0]
    4dd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    4dd6:	f380 8809 	msr	PSP, r0
    4dda:	4770      	bx	lr

00004ddc <pxCurrentTCBConst>:
    4ddc:	200000b8 	.word	0x200000b8

00004de0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    4de0:	b580      	push	{r7, lr}
    4de2:	b082      	sub	sp, #8
    4de4:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    4de6:	f64e 5304 	movw	r3, #60676	; 0xed04
    4dea:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4df2:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    4df4:	f04f 0300 	mov.w	r3, #0
    4df8:	607b      	str	r3, [r7, #4]
    4dfa:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    4dfe:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    4e02:	f7ff f9d5 	bl	41b0 <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    4e06:	f04f 0000 	mov.w	r0, #0
    4e0a:	f380 8811 	msr	BASEPRI, r0
}
    4e0e:	f107 0708 	add.w	r7, r7, #8
    4e12:	46bd      	mov	sp, r7
    4e14:	bd80      	pop	{r7, pc}
    4e16:	bf00      	nop

00004e18 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    4e18:	b480      	push	{r7}
    4e1a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    4e1c:	f24e 0314 	movw	r3, #57364	; 0xe014
    4e20:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4e24:	f64f 427f 	movw	r2, #64639	; 0xfc7f
    4e28:	f2c0 020a 	movt	r2, #10
    4e2c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    4e2e:	f24e 0310 	movw	r3, #57360	; 0xe010
    4e32:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4e36:	f04f 0207 	mov.w	r2, #7
    4e3a:	601a      	str	r2, [r3, #0]
}
    4e3c:	46bd      	mov	sp, r7
    4e3e:	bc80      	pop	{r7}
    4e40:	4770      	bx	lr
    4e42:	0000      	.short	0x0000
    4e44:	e000ed08 	.word	0xe000ed08

00004e48 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4e48:	b580      	push	{r7, lr}
    4e4a:	b084      	sub	sp, #16
    4e4c:	af00      	add	r7, sp, #0
    4e4e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    4e50:	f04f 0300 	mov.w	r3, #0
    4e54:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    4e56:	687b      	ldr	r3, [r7, #4]
    4e58:	f003 0307 	and.w	r3, r3, #7
    4e5c:	2b00      	cmp	r3, #0
    4e5e:	d005      	beq.n	4e6c <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    4e60:	687b      	ldr	r3, [r7, #4]
    4e62:	f023 0307 	bic.w	r3, r3, #7
    4e66:	f103 0308 	add.w	r3, r3, #8
    4e6a:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
    4e6c:	f7ff f812 	bl	3e94 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    4e70:	f244 53f0 	movw	r3, #17904	; 0x45f0
    4e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e78:	681a      	ldr	r2, [r3, #0]
    4e7a:	687b      	ldr	r3, [r7, #4]
    4e7c:	18d2      	adds	r2, r2, r3
    4e7e:	f244 33ff 	movw	r3, #17407	; 0x43ff
    4e82:	429a      	cmp	r2, r3
    4e84:	d824      	bhi.n	4ed0 <pvPortMalloc+0x88>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    4e86:	f244 53f0 	movw	r3, #17904	; 0x45f0
    4e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e8e:	681a      	ldr	r2, [r3, #0]
    4e90:	687b      	ldr	r3, [r7, #4]
    4e92:	18d2      	adds	r2, r2, r3
    4e94:	f244 53f0 	movw	r3, #17904	; 0x45f0
    4e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4e9c:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    4e9e:	429a      	cmp	r2, r3
    4ea0:	d916      	bls.n	4ed0 <pvPortMalloc+0x88>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    4ea2:	f244 53f0 	movw	r3, #17904	; 0x45f0
    4ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eaa:	681a      	ldr	r2, [r3, #0]
    4eac:	f240 13f0 	movw	r3, #496	; 0x1f0
    4eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4eb4:	18d3      	adds	r3, r2, r3
    4eb6:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
    4eb8:	f244 53f0 	movw	r3, #17904	; 0x45f0
    4ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ec0:	681a      	ldr	r2, [r3, #0]
    4ec2:	687b      	ldr	r3, [r7, #4]
    4ec4:	18d2      	adds	r2, r2, r3
    4ec6:	f244 53f0 	movw	r3, #17904	; 0x45f0
    4eca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4ece:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
    4ed0:	f7fe fff2 	bl	3eb8 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    4ed4:	68fb      	ldr	r3, [r7, #12]
}
    4ed6:	4618      	mov	r0, r3
    4ed8:	f107 0710 	add.w	r7, r7, #16
    4edc:	46bd      	mov	sp, r7
    4ede:	bd80      	pop	{r7, pc}

00004ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    4ee0:	b480      	push	{r7}
    4ee2:	b083      	sub	sp, #12
    4ee4:	af00      	add	r7, sp, #0
    4ee6:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c
	for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    4ee8:	f107 070c 	add.w	r7, r7, #12
    4eec:	46bd      	mov	sp, r7
    4eee:	bc80      	pop	{r7}
    4ef0:	4770      	bx	lr
    4ef2:	bf00      	nop

00004ef4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4ef4:	b480      	push	{r7}
    4ef6:	af00      	add	r7, sp, #0
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    4ef8:	f244 53f0 	movw	r3, #17904	; 0x45f0
    4efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f00:	f04f 0200 	mov.w	r2, #0
    4f04:	601a      	str	r2, [r3, #0]
}
    4f06:	46bd      	mov	sp, r7
    4f08:	bc80      	pop	{r7}
    4f0a:	4770      	bx	lr

00004f0c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4f0c:	b480      	push	{r7}
    4f0e:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    4f10:	f244 53f0 	movw	r3, #17904	; 0x45f0
    4f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4f18:	681b      	ldr	r3, [r3, #0]
    4f1a:	f5c3 4388 	rsb	r3, r3, #17408	; 0x4400
}
    4f1e:	4618      	mov	r0, r3
    4f20:	46bd      	mov	sp, r7
    4f22:	bc80      	pop	{r7}
    4f24:	4770      	bx	lr
    4f26:	bf00      	nop

00004f28 <init_led>:
#include "stm32f10x_usart.h"
#include "stm32f10x_exti.h"
#include "misc.h"

void init_led(void)
{
    4f28:	b580      	push	{r7, lr}
    4f2a:	b082      	sub	sp, #8
    4f2c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
    4f2e:	f04f 0010 	mov.w	r0, #16
    4f32:	f04f 0101 	mov.w	r1, #1
    4f36:	f7fb ffa5 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
    4f3a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4f3e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4f42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4f46:	f04f 0201 	mov.w	r2, #1
    4f4a:	f7fc fb03 	bl	1554 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
    4f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    4f52:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    4f54:	f04f 0310 	mov.w	r3, #16
    4f58:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4f5a:	f04f 0303 	mov.w	r3, #3
    4f5e:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    4f60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4f64:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4f68:	f107 0304 	add.w	r3, r7, #4
    4f6c:	4619      	mov	r1, r3
    4f6e:	f7fc f98f 	bl	1290 <GPIO_Init>
}
    4f72:	f107 0708 	add.w	r7, r7, #8
    4f76:	46bd      	mov	sp, r7
    4f78:	bd80      	pop	{r7, pc}
    4f7a:	bf00      	nop

00004f7c <init_button>:

void init_button(void)
{
    4f7c:	b580      	push	{r7, lr}
    4f7e:	b082      	sub	sp, #8
    4f80:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    4f82:	f04f 0004 	mov.w	r0, #4
    4f86:	f04f 0101 	mov.w	r1, #1
    4f8a:	f7fb ff7b 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
    4f8e:	f04f 0301 	mov.w	r3, #1
    4f92:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    4f94:	f04f 0304 	mov.w	r3, #4
    4f98:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    4f9a:	f04f 0303 	mov.w	r3, #3
    4f9e:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    4fa0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4fa4:	f2c4 0001 	movt	r0, #16385	; 0x4001
    4fa8:	f107 0304 	add.w	r3, r7, #4
    4fac:	4619      	mov	r1, r3
    4fae:	f7fc f96f 	bl	1290 <GPIO_Init>
}
    4fb2:	f107 0708 	add.w	r7, r7, #8
    4fb6:	46bd      	mov	sp, r7
    4fb8:	bd80      	pop	{r7, pc}
    4fba:	bf00      	nop

00004fbc <enable_button_interrupts>:

void enable_button_interrupts(void)
{
    4fbc:	b580      	push	{r7, lr}
    4fbe:	b084      	sub	sp, #16
    4fc0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    4fc2:	f04f 0001 	mov.w	r0, #1
    4fc6:	f04f 0101 	mov.w	r1, #1
    4fca:	f7fb ff5b 	bl	e84 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
    4fce:	f04f 0000 	mov.w	r0, #0
    4fd2:	f04f 0100 	mov.w	r1, #0
    4fd6:	f7fc fbcf 	bl	1778 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
    4fda:	f04f 0301 	mov.w	r3, #1
    4fde:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    4fe0:	f04f 0300 	mov.w	r3, #0
    4fe4:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    4fe6:	f04f 0308 	mov.w	r3, #8
    4fea:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    4fec:	f04f 0301 	mov.w	r3, #1
    4ff0:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
    4ff2:	f107 0308 	add.w	r3, r7, #8
    4ff6:	4618      	mov	r0, r3
    4ff8:	f7fd f92c 	bl	2254 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    4ffc:	f04f 0306 	mov.w	r3, #6
    5000:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
    5002:	f04f 030f 	mov.w	r3, #15
    5006:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
    5008:	f04f 030f 	mov.w	r3, #15
    500c:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    500e:	f04f 0301 	mov.w	r3, #1
    5012:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    5014:	f107 0304 	add.w	r3, r7, #4
    5018:	4618      	mov	r0, r3
    501a:	f7fd fa65 	bl	24e8 <NVIC_Init>
}
    501e:	f107 0710 	add.w	r7, r7, #16
    5022:	46bd      	mov	sp, r7
    5024:	bd80      	pop	{r7, pc}
    5026:	bf00      	nop

00005028 <init_rs232>:

void init_rs232(void)
{
    5028:	b580      	push	{r7, lr}
    502a:	b086      	sub	sp, #24
    502c:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    502e:	f04f 0005 	mov.w	r0, #5
    5032:	f04f 0101 	mov.w	r1, #1
    5036:	f7fb ff25 	bl	e84 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    503a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    503e:	f04f 0101 	mov.w	r1, #1
    5042:	f7fb ff49 	bl	ed8 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    5046:	f04f 0308 	mov.w	r3, #8
    504a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    504c:	f04f 0304 	mov.w	r3, #4
    5050:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5052:	f44f 6000 	mov.w	r0, #2048	; 0x800
    5056:	f2c4 0001 	movt	r0, #16385	; 0x4001
    505a:	f107 0304 	add.w	r3, r7, #4
    505e:	4619      	mov	r1, r3
    5060:	f7fc f916 	bl	1290 <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    5064:	f04f 0304 	mov.w	r3, #4
    5068:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    506a:	f04f 0303 	mov.w	r3, #3
    506e:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    5070:	f04f 0318 	mov.w	r3, #24
    5074:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    5076:	f44f 6000 	mov.w	r0, #2048	; 0x800
    507a:	f2c4 0001 	movt	r0, #16385	; 0x4001
    507e:	f107 0304 	add.w	r3, r7, #4
    5082:	4619      	mov	r1, r3
    5084:	f7fc f904 	bl	1290 <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
    5088:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    508c:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    508e:	f04f 0300 	mov.w	r3, #0
    5092:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    5094:	f04f 0300 	mov.w	r3, #0
    5098:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    509a:	f04f 0300 	mov.w	r3, #0
    509e:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    50a0:	f04f 0300 	mov.w	r3, #0
    50a4:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
    50a6:	f04f 030c 	mov.w	r3, #12
    50aa:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
    50ac:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    50b0:	f2c4 0000 	movt	r0, #16384	; 0x4000
    50b4:	f107 0308 	add.w	r3, r7, #8
    50b8:	4619      	mov	r1, r3
    50ba:	f7fc fc31 	bl	1920 <USART_Init>
    USART_Cmd(USART2, ENABLE);
    50be:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    50c2:	f2c4 0000 	movt	r0, #16384	; 0x4000
    50c6:	f04f 0101 	mov.w	r1, #1
    50ca:	f7fc fd67 	bl	1b9c <USART_Cmd>
}
    50ce:	f107 0718 	add.w	r7, r7, #24
    50d2:	46bd      	mov	sp, r7
    50d4:	bd80      	pop	{r7, pc}
    50d6:	bf00      	nop

000050d8 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
    50d8:	b580      	push	{r7, lr}
    50da:	b082      	sub	sp, #8
    50dc:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    50de:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    50e2:	f2c4 0000 	movt	r0, #16384	; 0x4000
    50e6:	f240 7127 	movw	r1, #1831	; 0x727
    50ea:	f04f 0200 	mov.w	r2, #0
    50ee:	f7fc fd75 	bl	1bdc <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
    50f2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    50f6:	f2c4 0000 	movt	r0, #16384	; 0x4000
    50fa:	f240 5125 	movw	r1, #1317	; 0x525
    50fe:	f04f 0201 	mov.w	r2, #1
    5102:	f7fc fd6b 	bl	1bdc <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    5106:	f04f 0326 	mov.w	r3, #38	; 0x26
    510a:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    510c:	f04f 0300 	mov.w	r3, #0
    5110:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    5112:	f04f 0301 	mov.w	r3, #1
    5116:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
    5118:	f107 0304 	add.w	r3, r7, #4
    511c:	4618      	mov	r0, r3
    511e:	f7fd f9e3 	bl	24e8 <NVIC_Init>
}
    5122:	f107 0708 	add.w	r7, r7, #8
    5126:	46bd      	mov	sp, r7
    5128:	bd80      	pop	{r7, pc}
    512a:	bf00      	nop

0000512c <enable_rs232>:

void enable_rs232(void)
{
    512c:	b580      	push	{r7, lr}
    512e:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
    5130:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    5134:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5138:	f04f 0101 	mov.w	r1, #1
    513c:	f7fc fd2e 	bl	1b9c <USART_Cmd>
}
    5140:	bd80      	pop	{r7, pc}
    5142:	bf00      	nop

00005144 <get_unaligned>:
    uint32_t cursor;
};

static struct romfs_fds_t romfs_fds[MAX_FDS];

static uint32_t get_unaligned(const uint8_t * d) {
    5144:	b480      	push	{r7}
    5146:	b083      	sub	sp, #12
    5148:	af00      	add	r7, sp, #0
    514a:	6078      	str	r0, [r7, #4]
    return ((uint32_t) d[0]) | ((uint32_t) (d[1] << 8)) | ((uint32_t) (d[2] << 16)) | ((uint32_t) (d[3] << 24));
    514c:	687b      	ldr	r3, [r7, #4]
    514e:	781b      	ldrb	r3, [r3, #0]
    5150:	461a      	mov	r2, r3
    5152:	687b      	ldr	r3, [r7, #4]
    5154:	f103 0301 	add.w	r3, r3, #1
    5158:	781b      	ldrb	r3, [r3, #0]
    515a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    515e:	431a      	orrs	r2, r3
    5160:	687b      	ldr	r3, [r7, #4]
    5162:	f103 0302 	add.w	r3, r3, #2
    5166:	781b      	ldrb	r3, [r3, #0]
    5168:	ea4f 4303 	mov.w	r3, r3, lsl #16
    516c:	431a      	orrs	r2, r3
    516e:	687b      	ldr	r3, [r7, #4]
    5170:	f103 0303 	add.w	r3, r3, #3
    5174:	781b      	ldrb	r3, [r3, #0]
    5176:	ea4f 6303 	mov.w	r3, r3, lsl #24
    517a:	4313      	orrs	r3, r2
}
    517c:	4618      	mov	r0, r3
    517e:	f107 070c 	add.w	r7, r7, #12
    5182:	46bd      	mov	sp, r7
    5184:	bc80      	pop	{r7}
    5186:	4770      	bx	lr

00005188 <romfs_read>:

static ssize_t romfs_read(void * opaque, void * buf, size_t count) {
    5188:	b580      	push	{r7, lr}
    518a:	b088      	sub	sp, #32
    518c:	af00      	add	r7, sp, #0
    518e:	60f8      	str	r0, [r7, #12]
    5190:	60b9      	str	r1, [r7, #8]
    5192:	607a      	str	r2, [r7, #4]
    struct romfs_fds_t * f = (struct romfs_fds_t *) opaque;
    5194:	68fb      	ldr	r3, [r7, #12]
    5196:	61fb      	str	r3, [r7, #28]
    const uint8_t * size_p = f->file - 4;
    5198:	69fb      	ldr	r3, [r7, #28]
    519a:	681b      	ldr	r3, [r3, #0]
    519c:	f1a3 0304 	sub.w	r3, r3, #4
    51a0:	61bb      	str	r3, [r7, #24]
    uint32_t size = get_unaligned(size_p);
    51a2:	69b8      	ldr	r0, [r7, #24]
    51a4:	f7ff ffce 	bl	5144 <get_unaligned>
    51a8:	6178      	str	r0, [r7, #20]
    
    if ((f->cursor + count) > size)
    51aa:	69fb      	ldr	r3, [r7, #28]
    51ac:	685a      	ldr	r2, [r3, #4]
    51ae:	687b      	ldr	r3, [r7, #4]
    51b0:	18d2      	adds	r2, r2, r3
    51b2:	697b      	ldr	r3, [r7, #20]
    51b4:	429a      	cmp	r2, r3
    51b6:	d904      	bls.n	51c2 <romfs_read+0x3a>
        count = size - f->cursor;
    51b8:	69fb      	ldr	r3, [r7, #28]
    51ba:	685b      	ldr	r3, [r3, #4]
    51bc:	697a      	ldr	r2, [r7, #20]
    51be:	1ad3      	subs	r3, r2, r3
    51c0:	607b      	str	r3, [r7, #4]

    memcpy(buf, f->file + f->cursor, count);
    51c2:	69fb      	ldr	r3, [r7, #28]
    51c4:	681a      	ldr	r2, [r3, #0]
    51c6:	69fb      	ldr	r3, [r7, #28]
    51c8:	685b      	ldr	r3, [r3, #4]
    51ca:	18d3      	adds	r3, r2, r3
    51cc:	68ba      	ldr	r2, [r7, #8]
    51ce:	4611      	mov	r1, r2
    51d0:	461a      	mov	r2, r3
    51d2:	687b      	ldr	r3, [r7, #4]
    51d4:	4608      	mov	r0, r1
    51d6:	4611      	mov	r1, r2
    51d8:	461a      	mov	r2, r3
    51da:	f000 ff55 	bl	6088 <memcpy>
    f->cursor += count;
    51de:	69fb      	ldr	r3, [r7, #28]
    51e0:	685a      	ldr	r2, [r3, #4]
    51e2:	687b      	ldr	r3, [r7, #4]
    51e4:	18d2      	adds	r2, r2, r3
    51e6:	69fb      	ldr	r3, [r7, #28]
    51e8:	605a      	str	r2, [r3, #4]

    return count;
    51ea:	687b      	ldr	r3, [r7, #4]
}
    51ec:	4618      	mov	r0, r3
    51ee:	f107 0720 	add.w	r7, r7, #32
    51f2:	46bd      	mov	sp, r7
    51f4:	bd80      	pop	{r7, pc}
    51f6:	bf00      	nop

000051f8 <romfs_seek>:

static off_t romfs_seek(void * opaque, off_t offset, int whence) {
    51f8:	b580      	push	{r7, lr}
    51fa:	b088      	sub	sp, #32
    51fc:	af00      	add	r7, sp, #0
    51fe:	60f8      	str	r0, [r7, #12]
    5200:	60b9      	str	r1, [r7, #8]
    5202:	607a      	str	r2, [r7, #4]
    struct romfs_fds_t * f = (struct romfs_fds_t *) opaque;
    5204:	68fb      	ldr	r3, [r7, #12]
    5206:	61bb      	str	r3, [r7, #24]
    const uint8_t * size_p = f->file - 4;
    5208:	69bb      	ldr	r3, [r7, #24]
    520a:	681b      	ldr	r3, [r3, #0]
    520c:	f1a3 0304 	sub.w	r3, r3, #4
    5210:	617b      	str	r3, [r7, #20]
    uint32_t size = get_unaligned(size_p);
    5212:	6978      	ldr	r0, [r7, #20]
    5214:	f7ff ff96 	bl	5144 <get_unaligned>
    5218:	6138      	str	r0, [r7, #16]
    uint32_t origin;
    
    switch (whence) {
    521a:	687b      	ldr	r3, [r7, #4]
    521c:	2b01      	cmp	r3, #1
    521e:	d007      	beq.n	5230 <romfs_seek+0x38>
    5220:	2b02      	cmp	r3, #2
    5222:	d009      	beq.n	5238 <romfs_seek+0x40>
    5224:	2b00      	cmp	r3, #0
    5226:	d10a      	bne.n	523e <romfs_seek+0x46>
    case SEEK_SET:
        origin = 0;
    5228:	f04f 0300 	mov.w	r3, #0
    522c:	61fb      	str	r3, [r7, #28]
        break;
    522e:	e009      	b.n	5244 <romfs_seek+0x4c>
    case SEEK_CUR:
        origin = f->cursor;
    5230:	69bb      	ldr	r3, [r7, #24]
    5232:	685b      	ldr	r3, [r3, #4]
    5234:	61fb      	str	r3, [r7, #28]
        break;
    5236:	e005      	b.n	5244 <romfs_seek+0x4c>
    case SEEK_END:
        origin = size;
    5238:	693b      	ldr	r3, [r7, #16]
    523a:	61fb      	str	r3, [r7, #28]
        break;
    523c:	e002      	b.n	5244 <romfs_seek+0x4c>
    default:
        return -1;
    523e:	f04f 33ff 	mov.w	r3, #4294967295
    5242:	e013      	b.n	526c <romfs_seek+0x74>
    }

    offset = origin + offset;
    5244:	68ba      	ldr	r2, [r7, #8]
    5246:	69fb      	ldr	r3, [r7, #28]
    5248:	18d3      	adds	r3, r2, r3
    524a:	60bb      	str	r3, [r7, #8]

    if (offset < 0)
    524c:	68bb      	ldr	r3, [r7, #8]
    524e:	2b00      	cmp	r3, #0
    5250:	da02      	bge.n	5258 <romfs_seek+0x60>
        return -1;
    5252:	f04f 33ff 	mov.w	r3, #4294967295
    5256:	e009      	b.n	526c <romfs_seek+0x74>
    if (offset > size)
    5258:	68ba      	ldr	r2, [r7, #8]
    525a:	693b      	ldr	r3, [r7, #16]
    525c:	429a      	cmp	r2, r3
    525e:	d901      	bls.n	5264 <romfs_seek+0x6c>
        offset = size;
    5260:	693b      	ldr	r3, [r7, #16]
    5262:	60bb      	str	r3, [r7, #8]

    f->cursor = offset;
    5264:	68ba      	ldr	r2, [r7, #8]
    5266:	69bb      	ldr	r3, [r7, #24]
    5268:	605a      	str	r2, [r3, #4]

    return offset;
    526a:	68bb      	ldr	r3, [r7, #8]
}
    526c:	4618      	mov	r0, r3
    526e:	f107 0720 	add.w	r7, r7, #32
    5272:	46bd      	mov	sp, r7
    5274:	bd80      	pop	{r7, pc}
    5276:	bf00      	nop

00005278 <romfs_get_file_by_hash>:

const uint8_t * romfs_get_file_by_hash(const uint8_t * romfs, uint32_t h, uint32_t * len) {
    5278:	b580      	push	{r7, lr}
    527a:	b086      	sub	sp, #24
    527c:	af00      	add	r7, sp, #0
    527e:	60f8      	str	r0, [r7, #12]
    5280:	60b9      	str	r1, [r7, #8]
    5282:	607a      	str	r2, [r7, #4]
    const uint8_t * meta;

    for (meta = romfs; get_unaligned(meta) && get_unaligned(meta + 4); meta += get_unaligned(meta + 4) + 8) {
    5284:	68fb      	ldr	r3, [r7, #12]
    5286:	617b      	str	r3, [r7, #20]
    5288:	e022      	b.n	52d0 <romfs_get_file_by_hash+0x58>
        if (get_unaligned(meta) == h) {
    528a:	6978      	ldr	r0, [r7, #20]
    528c:	f7ff ff5a 	bl	5144 <get_unaligned>
    5290:	4602      	mov	r2, r0
    5292:	68bb      	ldr	r3, [r7, #8]
    5294:	429a      	cmp	r2, r3
    5296:	d10f      	bne.n	52b8 <romfs_get_file_by_hash+0x40>
            if (len) {
    5298:	687b      	ldr	r3, [r7, #4]
    529a:	2b00      	cmp	r3, #0
    529c:	d008      	beq.n	52b0 <romfs_get_file_by_hash+0x38>
                *len = get_unaligned(meta + 4);
    529e:	697b      	ldr	r3, [r7, #20]
    52a0:	f103 0304 	add.w	r3, r3, #4
    52a4:	4618      	mov	r0, r3
    52a6:	f7ff ff4d 	bl	5144 <get_unaligned>
    52aa:	4602      	mov	r2, r0
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	601a      	str	r2, [r3, #0]
            }
            return meta + 8;
    52b0:	697b      	ldr	r3, [r7, #20]
    52b2:	f103 0308 	add.w	r3, r3, #8
    52b6:	e01c      	b.n	52f2 <romfs_get_file_by_hash+0x7a>
}

const uint8_t * romfs_get_file_by_hash(const uint8_t * romfs, uint32_t h, uint32_t * len) {
    const uint8_t * meta;

    for (meta = romfs; get_unaligned(meta) && get_unaligned(meta + 4); meta += get_unaligned(meta + 4) + 8) {
    52b8:	697b      	ldr	r3, [r7, #20]
    52ba:	f103 0304 	add.w	r3, r3, #4
    52be:	4618      	mov	r0, r3
    52c0:	f7ff ff40 	bl	5144 <get_unaligned>
    52c4:	4603      	mov	r3, r0
    52c6:	f103 0308 	add.w	r3, r3, #8
    52ca:	697a      	ldr	r2, [r7, #20]
    52cc:	18d3      	adds	r3, r2, r3
    52ce:	617b      	str	r3, [r7, #20]
    52d0:	6978      	ldr	r0, [r7, #20]
    52d2:	f7ff ff37 	bl	5144 <get_unaligned>
    52d6:	4603      	mov	r3, r0
    52d8:	2b00      	cmp	r3, #0
    52da:	d008      	beq.n	52ee <romfs_get_file_by_hash+0x76>
    52dc:	697b      	ldr	r3, [r7, #20]
    52de:	f103 0304 	add.w	r3, r3, #4
    52e2:	4618      	mov	r0, r3
    52e4:	f7ff ff2e 	bl	5144 <get_unaligned>
    52e8:	4603      	mov	r3, r0
    52ea:	2b00      	cmp	r3, #0
    52ec:	d1cd      	bne.n	528a <romfs_get_file_by_hash+0x12>
            }
            return meta + 8;
        }
    }

    return NULL;
    52ee:	f04f 0300 	mov.w	r3, #0
}
    52f2:	4618      	mov	r0, r3
    52f4:	f107 0718 	add.w	r7, r7, #24
    52f8:	46bd      	mov	sp, r7
    52fa:	bd80      	pop	{r7, pc}

000052fc <romfs_open>:

static int romfs_open(void * opaque, const char * path, int flags, int mode) {
    52fc:	b580      	push	{r7, lr}
    52fe:	b08a      	sub	sp, #40	; 0x28
    5300:	af02      	add	r7, sp, #8
    5302:	60f8      	str	r0, [r7, #12]
    5304:	60b9      	str	r1, [r7, #8]
    5306:	607a      	str	r2, [r7, #4]
    5308:	603b      	str	r3, [r7, #0]
    uint32_t h = hash_djb2((const uint8_t *) path, -1);
    530a:	68b8      	ldr	r0, [r7, #8]
    530c:	f04f 31ff 	mov.w	r1, #4294967295
    5310:	f000 f85c 	bl	53cc <hash_djb2>
    5314:	61b8      	str	r0, [r7, #24]
    const uint8_t * romfs = (const uint8_t *) opaque;
    5316:	68fb      	ldr	r3, [r7, #12]
    5318:	617b      	str	r3, [r7, #20]
    const uint8_t * file;
    int r = -1;
    531a:	f04f 33ff 	mov.w	r3, #4294967295
    531e:	61fb      	str	r3, [r7, #28]

    file = romfs_get_file_by_hash(romfs, h, NULL);
    5320:	6978      	ldr	r0, [r7, #20]
    5322:	69b9      	ldr	r1, [r7, #24]
    5324:	f04f 0200 	mov.w	r2, #0
    5328:	f7ff ffa6 	bl	5278 <romfs_get_file_by_hash>
    532c:	6138      	str	r0, [r7, #16]

    if (file) {
    532e:	693b      	ldr	r3, [r7, #16]
    5330:	2b00      	cmp	r3, #0
    5332:	d033      	beq.n	539c <romfs_open+0xa0>
        r = fio_open(romfs_read, NULL, romfs_seek, NULL, NULL);
    5334:	f04f 0300 	mov.w	r3, #0
    5338:	9300      	str	r3, [sp, #0]
    533a:	f245 1089 	movw	r0, #20873	; 0x5189
    533e:	f2c0 0000 	movt	r0, #0
    5342:	f04f 0100 	mov.w	r1, #0
    5346:	f245 12f9 	movw	r2, #20985	; 0x51f9
    534a:	f2c0 0200 	movt	r2, #0
    534e:	f04f 0300 	mov.w	r3, #0
    5352:	f000 fa97 	bl	5884 <fio_open>
    5356:	61f8      	str	r0, [r7, #28]
        if (r > 0) {
    5358:	69fb      	ldr	r3, [r7, #28]
    535a:	2b00      	cmp	r3, #0
    535c:	dd1e      	ble.n	539c <romfs_open+0xa0>
            romfs_fds[r].file = file;
    535e:	f244 53f8 	movw	r3, #17912	; 0x45f8
    5362:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5366:	69fa      	ldr	r2, [r7, #28]
    5368:	6939      	ldr	r1, [r7, #16]
    536a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            romfs_fds[r].cursor = 0;
    536e:	f244 52f8 	movw	r2, #17912	; 0x45f8
    5372:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5376:	69fb      	ldr	r3, [r7, #28]
    5378:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    537c:	18d3      	adds	r3, r2, r3
    537e:	f04f 0200 	mov.w	r2, #0
    5382:	605a      	str	r2, [r3, #4]
            fio_set_opaque(r, romfs_fds + r);
    5384:	69fb      	ldr	r3, [r7, #28]
    5386:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    538a:	f244 53f8 	movw	r3, #17912	; 0x45f8
    538e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5392:	18d3      	adds	r3, r2, r3
    5394:	69f8      	ldr	r0, [r7, #28]
    5396:	4619      	mov	r1, r3
    5398:	f000 fc60 	bl	5c5c <fio_set_opaque>
        }
    }
    return r;
    539c:	69fb      	ldr	r3, [r7, #28]
}
    539e:	4618      	mov	r0, r3
    53a0:	f107 0720 	add.w	r7, r7, #32
    53a4:	46bd      	mov	sp, r7
    53a6:	bd80      	pop	{r7, pc}

000053a8 <register_romfs>:

void register_romfs(const char * mountpoint, const uint8_t * romfs) {
    53a8:	b580      	push	{r7, lr}
    53aa:	b082      	sub	sp, #8
    53ac:	af00      	add	r7, sp, #0
    53ae:	6078      	str	r0, [r7, #4]
    53b0:	6039      	str	r1, [r7, #0]
//    DBGOUT("Registering romfs `%s' @ %p\r\n", mountpoint, romfs);
    register_fs(mountpoint, romfs_open, (void *) romfs);
    53b2:	6878      	ldr	r0, [r7, #4]
    53b4:	f245 21fd 	movw	r1, #21245	; 0x52fd
    53b8:	f2c0 0100 	movt	r1, #0
    53bc:	683a      	ldr	r2, [r7, #0]
    53be:	f000 f84b 	bl	5458 <register_fs>
}
    53c2:	f107 0708 	add.w	r7, r7, #8
    53c6:	46bd      	mov	sp, r7
    53c8:	bd80      	pop	{r7, pc}
    53ca:	bf00      	nop

000053cc <hash_djb2>:
#include <stdint.h>
#include "hash-djb2.h"
#include "osdebug.h"

uint32_t hash_djb2(const uint8_t * str, ssize_t _max) {
    53cc:	b480      	push	{r7}
    53ce:	b087      	sub	sp, #28
    53d0:	af00      	add	r7, sp, #0
    53d2:	6078      	str	r0, [r7, #4]
    53d4:	6039      	str	r1, [r7, #0]
    uint32_t hash = 5381;
    53d6:	f241 5305 	movw	r3, #5381	; 0x1505
    53da:	617b      	str	r3, [r7, #20]
    uint32_t max = (uint32_t) _max;
    53dc:	683b      	ldr	r3, [r7, #0]
    53de:	613b      	str	r3, [r7, #16]
    int c;
    
    while (((c = *str++)) && max--) {
    53e0:	e007      	b.n	53f2 <hash_djb2+0x26>
        hash = ((hash << 5) + hash) ^ c;
    53e2:	697b      	ldr	r3, [r7, #20]
    53e4:	ea4f 1243 	mov.w	r2, r3, lsl #5
    53e8:	697b      	ldr	r3, [r7, #20]
    53ea:	18d2      	adds	r2, r2, r3
    53ec:	68fb      	ldr	r3, [r7, #12]
    53ee:	4053      	eors	r3, r2
    53f0:	617b      	str	r3, [r7, #20]
uint32_t hash_djb2(const uint8_t * str, ssize_t _max) {
    uint32_t hash = 5381;
    uint32_t max = (uint32_t) _max;
    int c;
    
    while (((c = *str++)) && max--) {
    53f2:	687b      	ldr	r3, [r7, #4]
    53f4:	781b      	ldrb	r3, [r3, #0]
    53f6:	60fb      	str	r3, [r7, #12]
    53f8:	68fb      	ldr	r3, [r7, #12]
    53fa:	2b00      	cmp	r3, #0
    53fc:	bf0c      	ite	eq
    53fe:	2300      	moveq	r3, #0
    5400:	2301      	movne	r3, #1
    5402:	b2db      	uxtb	r3, r3
    5404:	687a      	ldr	r2, [r7, #4]
    5406:	f102 0201 	add.w	r2, r2, #1
    540a:	607a      	str	r2, [r7, #4]
    540c:	2b00      	cmp	r3, #0
    540e:	d00b      	beq.n	5428 <hash_djb2+0x5c>
    5410:	693b      	ldr	r3, [r7, #16]
    5412:	2b00      	cmp	r3, #0
    5414:	bf0c      	ite	eq
    5416:	2300      	moveq	r3, #0
    5418:	2301      	movne	r3, #1
    541a:	b2db      	uxtb	r3, r3
    541c:	693a      	ldr	r2, [r7, #16]
    541e:	f102 32ff 	add.w	r2, r2, #4294967295
    5422:	613a      	str	r2, [r7, #16]
    5424:	2b00      	cmp	r3, #0
    5426:	d1dc      	bne.n	53e2 <hash_djb2+0x16>
        hash = ((hash << 5) + hash) ^ c;
    }
    
    return hash;
    5428:	697b      	ldr	r3, [r7, #20]
}
    542a:	4618      	mov	r0, r3
    542c:	f107 071c 	add.w	r7, r7, #28
    5430:	46bd      	mov	sp, r7
    5432:	bc80      	pop	{r7}
    5434:	4770      	bx	lr
    5436:	bf00      	nop

00005438 <fs_init>:
    void * opaque;
};

static struct fs_t fss[MAX_FS];

__attribute__((constructor)) void fs_init() {
    5438:	b580      	push	{r7, lr}
    543a:	af00      	add	r7, sp, #0
    memset(fss, 0, sizeof(fss));
    543c:	f244 63f8 	movw	r3, #18168	; 0x46f8
    5440:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5444:	f04f 02c0 	mov.w	r2, #192	; 0xc0
    5448:	4618      	mov	r0, r3
    544a:	f04f 0100 	mov.w	r1, #0
    544e:	4613      	mov	r3, r2
    5450:	461a      	mov	r2, r3
    5452:	f000 fdc3 	bl	5fdc <memset>
}
    5456:	bd80      	pop	{r7, pc}

00005458 <register_fs>:

int register_fs(const char * mountpoint, fs_open_t callback, void * opaque) {
    5458:	b580      	push	{r7, lr}
    545a:	b086      	sub	sp, #24
    545c:	af00      	add	r7, sp, #0
    545e:	60f8      	str	r0, [r7, #12]
    5460:	60b9      	str	r1, [r7, #8]
    5462:	607a      	str	r2, [r7, #4]
    int i;
    DBGOUT("register_fs(\"%s\", %p, %p)\r\n", mountpoint, callback, opaque);
    5464:	f646 3094 	movw	r0, #27540	; 0x6b94
    5468:	f2c0 0000 	movt	r0, #0
    546c:	68f9      	ldr	r1, [r7, #12]
    546e:	68ba      	ldr	r2, [r7, #8]
    5470:	687b      	ldr	r3, [r7, #4]
    5472:	f000 fdab 	bl	5fcc <osDbgPrintf>
    
    for (i = 0; i < MAX_FS; i++) {
    5476:	f04f 0300 	mov.w	r3, #0
    547a:	617b      	str	r3, [r7, #20]
    547c:	e049      	b.n	5512 <register_fs+0xba>
        if (!fss[i].cb) {
    547e:	f244 62f8 	movw	r2, #18168	; 0x46f8
    5482:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5486:	6979      	ldr	r1, [r7, #20]
    5488:	460b      	mov	r3, r1
    548a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    548e:	185b      	adds	r3, r3, r1
    5490:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5494:	18d3      	adds	r3, r2, r3
    5496:	f103 0304 	add.w	r3, r3, #4
    549a:	681b      	ldr	r3, [r3, #0]
    549c:	2b00      	cmp	r3, #0
    549e:	d134      	bne.n	550a <register_fs+0xb2>
            fss[i].hash = hash_djb2((const uint8_t *) mountpoint, -1);
    54a0:	68f8      	ldr	r0, [r7, #12]
    54a2:	f04f 31ff 	mov.w	r1, #4294967295
    54a6:	f7ff ff91 	bl	53cc <hash_djb2>
    54aa:	f244 62f8 	movw	r2, #18168	; 0x46f8
    54ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54b2:	6979      	ldr	r1, [r7, #20]
    54b4:	460b      	mov	r3, r1
    54b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    54ba:	185b      	adds	r3, r3, r1
    54bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    54c0:	18d3      	adds	r3, r2, r3
    54c2:	6018      	str	r0, [r3, #0]
            fss[i].cb = callback;
    54c4:	f244 62f8 	movw	r2, #18168	; 0x46f8
    54c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54cc:	6979      	ldr	r1, [r7, #20]
    54ce:	460b      	mov	r3, r1
    54d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    54d4:	185b      	adds	r3, r3, r1
    54d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    54da:	18d3      	adds	r3, r2, r3
    54dc:	f103 0304 	add.w	r3, r3, #4
    54e0:	68ba      	ldr	r2, [r7, #8]
    54e2:	601a      	str	r2, [r3, #0]
            fss[i].opaque = opaque;
    54e4:	f244 62f8 	movw	r2, #18168	; 0x46f8
    54e8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    54ec:	6979      	ldr	r1, [r7, #20]
    54ee:	460b      	mov	r3, r1
    54f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    54f4:	185b      	adds	r3, r3, r1
    54f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    54fa:	18d3      	adds	r3, r2, r3
    54fc:	f103 0308 	add.w	r3, r3, #8
    5500:	687a      	ldr	r2, [r7, #4]
    5502:	601a      	str	r2, [r3, #0]
            return 0;
    5504:	f04f 0300 	mov.w	r3, #0
    5508:	e008      	b.n	551c <register_fs+0xc4>

int register_fs(const char * mountpoint, fs_open_t callback, void * opaque) {
    int i;
    DBGOUT("register_fs(\"%s\", %p, %p)\r\n", mountpoint, callback, opaque);
    
    for (i = 0; i < MAX_FS; i++) {
    550a:	697b      	ldr	r3, [r7, #20]
    550c:	f103 0301 	add.w	r3, r3, #1
    5510:	617b      	str	r3, [r7, #20]
    5512:	697b      	ldr	r3, [r7, #20]
    5514:	2b0f      	cmp	r3, #15
    5516:	ddb2      	ble.n	547e <register_fs+0x26>
            fss[i].opaque = opaque;
            return 0;
        }
    }
    
    return -1;
    5518:	f04f 33ff 	mov.w	r3, #4294967295
}
    551c:	4618      	mov	r0, r3
    551e:	f107 0718 	add.w	r7, r7, #24
    5522:	46bd      	mov	sp, r7
    5524:	bd80      	pop	{r7, pc}
    5526:	bf00      	nop

00005528 <fs_open>:

int fs_open(const char * path, int flags, int mode) {
    5528:	b590      	push	{r4, r7, lr}
    552a:	b089      	sub	sp, #36	; 0x24
    552c:	af00      	add	r7, sp, #0
    552e:	60f8      	str	r0, [r7, #12]
    5530:	60b9      	str	r1, [r7, #8]
    5532:	607a      	str	r2, [r7, #4]
    const char * slash;
    uint32_t hash;
    int i;
//    DBGOUT("fs_open(\"%s\", %i, %i)\r\n", path, flags, mode);
    
    while (path[0] == '/')
    5534:	e003      	b.n	553e <fs_open+0x16>
        path++;
    5536:	68fb      	ldr	r3, [r7, #12]
    5538:	f103 0301 	add.w	r3, r3, #1
    553c:	60fb      	str	r3, [r7, #12]
    const char * slash;
    uint32_t hash;
    int i;
//    DBGOUT("fs_open(\"%s\", %i, %i)\r\n", path, flags, mode);
    
    while (path[0] == '/')
    553e:	68fb      	ldr	r3, [r7, #12]
    5540:	781b      	ldrb	r3, [r3, #0]
    5542:	2b2f      	cmp	r3, #47	; 0x2f
    5544:	d0f7      	beq.n	5536 <fs_open+0xe>
        path++;
    
    slash = strchr(path, '/');
    5546:	68f8      	ldr	r0, [r7, #12]
    5548:	f04f 012f 	mov.w	r1, #47	; 0x2f
    554c:	f000 fdfe 	bl	614c <strchr>
    5550:	61b8      	str	r0, [r7, #24]
    
    if (!slash)
    5552:	69bb      	ldr	r3, [r7, #24]
    5554:	2b00      	cmp	r3, #0
    5556:	d102      	bne.n	555e <fs_open+0x36>
        return -2;
    5558:	f06f 0301 	mvn.w	r3, #1
    555c:	e04d      	b.n	55fa <fs_open+0xd2>

    hash = hash_djb2((const uint8_t *) path, slash - path);
    555e:	69ba      	ldr	r2, [r7, #24]
    5560:	68fb      	ldr	r3, [r7, #12]
    5562:	1ad3      	subs	r3, r2, r3
    5564:	68f8      	ldr	r0, [r7, #12]
    5566:	4619      	mov	r1, r3
    5568:	f7ff ff30 	bl	53cc <hash_djb2>
    556c:	6178      	str	r0, [r7, #20]
    path = slash + 1;
    556e:	69bb      	ldr	r3, [r7, #24]
    5570:	f103 0301 	add.w	r3, r3, #1
    5574:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_FS; i++) {
    5576:	f04f 0300 	mov.w	r3, #0
    557a:	61fb      	str	r3, [r7, #28]
    557c:	e038      	b.n	55f0 <fs_open+0xc8>
        if (fss[i].hash == hash)
    557e:	f244 62f8 	movw	r2, #18168	; 0x46f8
    5582:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5586:	69f9      	ldr	r1, [r7, #28]
    5588:	460b      	mov	r3, r1
    558a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    558e:	185b      	adds	r3, r3, r1
    5590:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5594:	18d3      	adds	r3, r2, r3
    5596:	681a      	ldr	r2, [r3, #0]
    5598:	697b      	ldr	r3, [r7, #20]
    559a:	429a      	cmp	r2, r3
    559c:	d124      	bne.n	55e8 <fs_open+0xc0>
            return fss[i].cb(fss[i].opaque, path, flags, mode);
    559e:	f244 62f8 	movw	r2, #18168	; 0x46f8
    55a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55a6:	69f9      	ldr	r1, [r7, #28]
    55a8:	460b      	mov	r3, r1
    55aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
    55ae:	185b      	adds	r3, r3, r1
    55b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    55b4:	18d3      	adds	r3, r2, r3
    55b6:	f103 0304 	add.w	r3, r3, #4
    55ba:	681c      	ldr	r4, [r3, #0]
    55bc:	f244 62f8 	movw	r2, #18168	; 0x46f8
    55c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    55c4:	69f9      	ldr	r1, [r7, #28]
    55c6:	460b      	mov	r3, r1
    55c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    55cc:	185b      	adds	r3, r3, r1
    55ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
    55d2:	18d3      	adds	r3, r2, r3
    55d4:	f103 0308 	add.w	r3, r3, #8
    55d8:	681b      	ldr	r3, [r3, #0]
    55da:	4618      	mov	r0, r3
    55dc:	68f9      	ldr	r1, [r7, #12]
    55de:	68ba      	ldr	r2, [r7, #8]
    55e0:	687b      	ldr	r3, [r7, #4]
    55e2:	47a0      	blx	r4
    55e4:	4603      	mov	r3, r0
    55e6:	e008      	b.n	55fa <fs_open+0xd2>
        return -2;

    hash = hash_djb2((const uint8_t *) path, slash - path);
    path = slash + 1;

    for (i = 0; i < MAX_FS; i++) {
    55e8:	69fb      	ldr	r3, [r7, #28]
    55ea:	f103 0301 	add.w	r3, r3, #1
    55ee:	61fb      	str	r3, [r7, #28]
    55f0:	69fb      	ldr	r3, [r7, #28]
    55f2:	2b0f      	cmp	r3, #15
    55f4:	ddc3      	ble.n	557e <fs_open+0x56>
        if (fss[i].hash == hash)
            return fss[i].cb(fss[i].opaque, path, flags, mode);
    }
    
    return -2;
    55f6:	f06f 0301 	mvn.w	r3, #1
}
    55fa:	4618      	mov	r0, r3
    55fc:	f107 0724 	add.w	r7, r7, #36	; 0x24
    5600:	46bd      	mov	sp, r7
    5602:	bd90      	pop	{r4, r7, pc}

00005604 <stdin_read>:
#include "osdebug.h"
#include "hash-djb2.h"

static struct fddef_t fio_fds[MAX_FDS];

static ssize_t stdin_read(void * opaque, void * buf, size_t count) {
    5604:	b480      	push	{r7}
    5606:	b085      	sub	sp, #20
    5608:	af00      	add	r7, sp, #0
    560a:	60f8      	str	r0, [r7, #12]
    560c:	60b9      	str	r1, [r7, #8]
    560e:	607a      	str	r2, [r7, #4]
    return 0;
    5610:	f04f 0300 	mov.w	r3, #0
}
    5614:	4618      	mov	r0, r3
    5616:	f107 0714 	add.w	r7, r7, #20
    561a:	46bd      	mov	sp, r7
    561c:	bc80      	pop	{r7}
    561e:	4770      	bx	lr

00005620 <stdout_write>:

static ssize_t stdout_write(void * opaque, const void * buf, size_t count) {
    5620:	b580      	push	{r7, lr}
    5622:	b086      	sub	sp, #24
    5624:	af00      	add	r7, sp, #0
    5626:	60f8      	str	r0, [r7, #12]
    5628:	60b9      	str	r1, [r7, #8]
    562a:	607a      	str	r2, [r7, #4]
    int i;
    const char * data = (const char *) buf;
    562c:	68bb      	ldr	r3, [r7, #8]
    562e:	613b      	str	r3, [r7, #16]
    
    for (i = 0; i < count; i++)
    5630:	f04f 0300 	mov.w	r3, #0
    5634:	617b      	str	r3, [r7, #20]
    5636:	e00a      	b.n	564e <stdout_write+0x2e>
        send_byte(data[i]);
    5638:	697b      	ldr	r3, [r7, #20]
    563a:	693a      	ldr	r2, [r7, #16]
    563c:	18d3      	adds	r3, r2, r3
    563e:	781b      	ldrb	r3, [r3, #0]
    5640:	4618      	mov	r0, r3
    5642:	f000 ff65 	bl	6510 <send_byte>

static ssize_t stdout_write(void * opaque, const void * buf, size_t count) {
    int i;
    const char * data = (const char *) buf;
    
    for (i = 0; i < count; i++)
    5646:	697b      	ldr	r3, [r7, #20]
    5648:	f103 0301 	add.w	r3, r3, #1
    564c:	617b      	str	r3, [r7, #20]
    564e:	697a      	ldr	r2, [r7, #20]
    5650:	687b      	ldr	r3, [r7, #4]
    5652:	429a      	cmp	r2, r3
    5654:	d3f0      	bcc.n	5638 <stdout_write+0x18>
        send_byte(data[i]);
    
    return count;
    5656:	687b      	ldr	r3, [r7, #4]
}
    5658:	4618      	mov	r0, r3
    565a:	f107 0718 	add.w	r7, r7, #24
    565e:	46bd      	mov	sp, r7
    5660:	bd80      	pop	{r7, pc}
    5662:	bf00      	nop

00005664 <fio_init>:

static xSemaphoreHandle fio_sem = NULL;

__attribute__((constructor)) void fio_init() {
    5664:	b580      	push	{r7, lr}
    5666:	af00      	add	r7, sp, #0
    memset(fio_fds, 0, sizeof(fio_fds));
    5668:	f244 73b8 	movw	r3, #18360	; 0x47b8
    566c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5670:	f44f 7220 	mov.w	r2, #640	; 0x280
    5674:	4618      	mov	r0, r3
    5676:	f04f 0100 	mov.w	r1, #0
    567a:	4613      	mov	r3, r2
    567c:	461a      	mov	r2, r3
    567e:	f000 fcad 	bl	5fdc <memset>
    fio_fds[0].fdread = stdin_read;
    5682:	f244 73b8 	movw	r3, #18360	; 0x47b8
    5686:	f2c2 0300 	movt	r3, #8192	; 0x2000
    568a:	f245 6205 	movw	r2, #22021	; 0x5605
    568e:	f2c0 0200 	movt	r2, #0
    5692:	601a      	str	r2, [r3, #0]
    fio_fds[1].fdwrite = stdout_write;
    5694:	f244 73b8 	movw	r3, #18360	; 0x47b8
    5698:	f2c2 0300 	movt	r3, #8192	; 0x2000
    569c:	f245 6221 	movw	r2, #22049	; 0x5621
    56a0:	f2c0 0200 	movt	r2, #0
    56a4:	619a      	str	r2, [r3, #24]
    fio_fds[2].fdwrite = stdout_write;
    56a6:	f244 73b8 	movw	r3, #18360	; 0x47b8
    56aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ae:	f245 6221 	movw	r2, #22049	; 0x5621
    56b2:	f2c0 0200 	movt	r2, #0
    56b6:	62da      	str	r2, [r3, #44]	; 0x2c
    fio_sem = xSemaphoreCreateMutex();
    56b8:	f04f 0001 	mov.w	r0, #1
    56bc:	f7fd fc08 	bl	2ed0 <xQueueCreateMutex>
    56c0:	4602      	mov	r2, r0
    56c2:	f644 2338 	movw	r3, #19000	; 0x4a38
    56c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    56ca:	601a      	str	r2, [r3, #0]
}
    56cc:	bd80      	pop	{r7, pc}
    56ce:	bf00      	nop

000056d0 <fio_getfd>:

struct fddef_t * fio_getfd(int fd) {
    56d0:	b480      	push	{r7}
    56d2:	b083      	sub	sp, #12
    56d4:	af00      	add	r7, sp, #0
    56d6:	6078      	str	r0, [r7, #4]
    if ((fd < 0) || (fd >= MAX_FDS))
    56d8:	687b      	ldr	r3, [r7, #4]
    56da:	2b00      	cmp	r3, #0
    56dc:	db02      	blt.n	56e4 <fio_getfd+0x14>
    56de:	687b      	ldr	r3, [r7, #4]
    56e0:	2b1f      	cmp	r3, #31
    56e2:	dd02      	ble.n	56ea <fio_getfd+0x1a>
        return NULL;
    56e4:	f04f 0300 	mov.w	r3, #0
    56e8:	e00c      	b.n	5704 <fio_getfd+0x34>
    return fio_fds + fd;
    56ea:	687a      	ldr	r2, [r7, #4]
    56ec:	4613      	mov	r3, r2
    56ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    56f2:	189b      	adds	r3, r3, r2
    56f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    56f8:	461a      	mov	r2, r3
    56fa:	f244 73b8 	movw	r3, #18360	; 0x47b8
    56fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5702:	18d3      	adds	r3, r2, r3
}
    5704:	4618      	mov	r0, r3
    5706:	f107 070c 	add.w	r7, r7, #12
    570a:	46bd      	mov	sp, r7
    570c:	bc80      	pop	{r7}
    570e:	4770      	bx	lr

00005710 <fio_is_open_int>:

static int fio_is_open_int(int fd) {
    5710:	b480      	push	{r7}
    5712:	b085      	sub	sp, #20
    5714:	af00      	add	r7, sp, #0
    5716:	6078      	str	r0, [r7, #4]
    if ((fd < 0) || (fd >= MAX_FDS))
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	2b00      	cmp	r3, #0
    571c:	db02      	blt.n	5724 <fio_is_open_int+0x14>
    571e:	687b      	ldr	r3, [r7, #4]
    5720:	2b1f      	cmp	r3, #31
    5722:	dd02      	ble.n	572a <fio_is_open_int+0x1a>
        return 0;
    5724:	f04f 0300 	mov.w	r3, #0
    5728:	e059      	b.n	57de <fio_is_open_int+0xce>
    int r = !((fio_fds[fd].fdread == NULL) &&
    572a:	f244 72b8 	movw	r2, #18360	; 0x47b8
    572e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5732:	6879      	ldr	r1, [r7, #4]
    5734:	460b      	mov	r3, r1
    5736:	ea4f 0383 	mov.w	r3, r3, lsl #2
    573a:	185b      	adds	r3, r3, r1
    573c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5740:	18d3      	adds	r3, r2, r3
    5742:	681b      	ldr	r3, [r3, #0]
    5744:	2b00      	cmp	r3, #0
    5746:	d143      	bne.n	57d0 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdwrite == NULL) &&
    5748:	f244 72b8 	movw	r2, #18360	; 0x47b8
    574c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5750:	6879      	ldr	r1, [r7, #4]
    5752:	460b      	mov	r3, r1
    5754:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5758:	185b      	adds	r3, r3, r1
    575a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    575e:	18d3      	adds	r3, r2, r3
    5760:	f103 0304 	add.w	r3, r3, #4
    5764:	681b      	ldr	r3, [r3, #0]
}

static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
    5766:	2b00      	cmp	r3, #0
    5768:	d132      	bne.n	57d0 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdwrite == NULL) &&
              (fio_fds[fd].fdseek == NULL) &&
    576a:	f244 72b8 	movw	r2, #18360	; 0x47b8
    576e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5772:	6879      	ldr	r1, [r7, #4]
    5774:	460b      	mov	r3, r1
    5776:	ea4f 0383 	mov.w	r3, r3, lsl #2
    577a:	185b      	adds	r3, r3, r1
    577c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5780:	18d3      	adds	r3, r2, r3
    5782:	f103 0308 	add.w	r3, r3, #8
    5786:	681b      	ldr	r3, [r3, #0]

static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
              (fio_fds[fd].fdwrite == NULL) &&
    5788:	2b00      	cmp	r3, #0
    578a:	d121      	bne.n	57d0 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdseek == NULL) &&
              (fio_fds[fd].fdclose == NULL) &&
    578c:	f244 72b8 	movw	r2, #18360	; 0x47b8
    5790:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5794:	6879      	ldr	r1, [r7, #4]
    5796:	460b      	mov	r3, r1
    5798:	ea4f 0383 	mov.w	r3, r3, lsl #2
    579c:	185b      	adds	r3, r3, r1
    579e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    57a2:	18d3      	adds	r3, r2, r3
    57a4:	f103 030c 	add.w	r3, r3, #12
    57a8:	681b      	ldr	r3, [r3, #0]
static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
              (fio_fds[fd].fdwrite == NULL) &&
              (fio_fds[fd].fdseek == NULL) &&
    57aa:	2b00      	cmp	r3, #0
    57ac:	d110      	bne.n	57d0 <fio_is_open_int+0xc0>
              (fio_fds[fd].fdclose == NULL) &&
              (fio_fds[fd].opaque == NULL));
    57ae:	f244 72b8 	movw	r2, #18360	; 0x47b8
    57b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    57b6:	6879      	ldr	r1, [r7, #4]
    57b8:	460b      	mov	r3, r1
    57ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    57be:	185b      	adds	r3, r3, r1
    57c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    57c4:	18d3      	adds	r3, r2, r3
    57c6:	f103 0310 	add.w	r3, r3, #16
    57ca:	681b      	ldr	r3, [r3, #0]
}

static int fio_is_open_int(int fd) {
    if ((fd < 0) || (fd >= MAX_FDS))
        return 0;
    int r = !((fio_fds[fd].fdread == NULL) &&
    57cc:	2b00      	cmp	r3, #0
    57ce:	d002      	beq.n	57d6 <fio_is_open_int+0xc6>
    57d0:	f04f 0301 	mov.w	r3, #1
    57d4:	e001      	b.n	57da <fio_is_open_int+0xca>
    57d6:	f04f 0300 	mov.w	r3, #0
    57da:	60fb      	str	r3, [r7, #12]
              (fio_fds[fd].fdwrite == NULL) &&
              (fio_fds[fd].fdseek == NULL) &&
              (fio_fds[fd].fdclose == NULL) &&
              (fio_fds[fd].opaque == NULL));
    return r;
    57dc:	68fb      	ldr	r3, [r7, #12]
}
    57de:	4618      	mov	r0, r3
    57e0:	f107 0714 	add.w	r7, r7, #20
    57e4:	46bd      	mov	sp, r7
    57e6:	bc80      	pop	{r7}
    57e8:	4770      	bx	lr
    57ea:	bf00      	nop

000057ec <fio_findfd>:

static int fio_findfd() {
    57ec:	b580      	push	{r7, lr}
    57ee:	b082      	sub	sp, #8
    57f0:	af00      	add	r7, sp, #0
    int i;
    
    for (i = 0; i < MAX_FDS; i++) {
    57f2:	f04f 0300 	mov.w	r3, #0
    57f6:	607b      	str	r3, [r7, #4]
    57f8:	e00b      	b.n	5812 <fio_findfd+0x26>
        if (!fio_is_open_int(i))
    57fa:	6878      	ldr	r0, [r7, #4]
    57fc:	f7ff ff88 	bl	5710 <fio_is_open_int>
    5800:	4603      	mov	r3, r0
    5802:	2b00      	cmp	r3, #0
    5804:	d101      	bne.n	580a <fio_findfd+0x1e>
            return i;
    5806:	687b      	ldr	r3, [r7, #4]
    5808:	e008      	b.n	581c <fio_findfd+0x30>
}

static int fio_findfd() {
    int i;
    
    for (i = 0; i < MAX_FDS; i++) {
    580a:	687b      	ldr	r3, [r7, #4]
    580c:	f103 0301 	add.w	r3, r3, #1
    5810:	607b      	str	r3, [r7, #4]
    5812:	687b      	ldr	r3, [r7, #4]
    5814:	2b1f      	cmp	r3, #31
    5816:	ddf0      	ble.n	57fa <fio_findfd+0xe>
        if (!fio_is_open_int(i))
            return i;
    }
    
    return -1;
    5818:	f04f 33ff 	mov.w	r3, #4294967295
}
    581c:	4618      	mov	r0, r3
    581e:	f107 0708 	add.w	r7, r7, #8
    5822:	46bd      	mov	sp, r7
    5824:	bd80      	pop	{r7, pc}
    5826:	bf00      	nop

00005828 <fio_is_open>:

int fio_is_open(int fd) {
    5828:	b580      	push	{r7, lr}
    582a:	b084      	sub	sp, #16
    582c:	af00      	add	r7, sp, #0
    582e:	6078      	str	r0, [r7, #4]
    int r = 0;
    5830:	f04f 0300 	mov.w	r3, #0
    5834:	60fb      	str	r3, [r7, #12]
    xSemaphoreTake(fio_sem, portMAX_DELAY);
    5836:	f644 2338 	movw	r3, #19000	; 0x4a38
    583a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    583e:	681b      	ldr	r3, [r3, #0]
    5840:	4618      	mov	r0, r3
    5842:	f04f 0100 	mov.w	r1, #0
    5846:	f04f 32ff 	mov.w	r2, #4294967295
    584a:	f04f 0300 	mov.w	r3, #0
    584e:	f7fd fc81 	bl	3154 <xQueueGenericReceive>
    r = fio_is_open_int(fd);
    5852:	6878      	ldr	r0, [r7, #4]
    5854:	f7ff ff5c 	bl	5710 <fio_is_open_int>
    5858:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(fio_sem);
    585a:	f644 2338 	movw	r3, #19000	; 0x4a38
    585e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5862:	681b      	ldr	r3, [r3, #0]
    5864:	4618      	mov	r0, r3
    5866:	f04f 0100 	mov.w	r1, #0
    586a:	f04f 0200 	mov.w	r2, #0
    586e:	f04f 0300 	mov.w	r3, #0
    5872:	f7fd fb97 	bl	2fa4 <xQueueGenericSend>
    return r;
    5876:	68fb      	ldr	r3, [r7, #12]
}
    5878:	4618      	mov	r0, r3
    587a:	f107 0710 	add.w	r7, r7, #16
    587e:	46bd      	mov	sp, r7
    5880:	bd80      	pop	{r7, pc}
    5882:	bf00      	nop

00005884 <fio_open>:

int fio_open(fdread_t fdread, fdwrite_t fdwrite, fdseek_t fdseek, fdclose_t fdclose, void * opaque) {
    5884:	b580      	push	{r7, lr}
    5886:	b086      	sub	sp, #24
    5888:	af00      	add	r7, sp, #0
    588a:	60f8      	str	r0, [r7, #12]
    588c:	60b9      	str	r1, [r7, #8]
    588e:	607a      	str	r2, [r7, #4]
    5890:	603b      	str	r3, [r7, #0]
    int fd;
//    DBGOUT("fio_open(%p, %p, %p, %p, %p)\r\n", fdread, fdwrite, fdseek, fdclose, opaque);
    xSemaphoreTake(fio_sem, portMAX_DELAY);
    5892:	f644 2338 	movw	r3, #19000	; 0x4a38
    5896:	f2c2 0300 	movt	r3, #8192	; 0x2000
    589a:	681b      	ldr	r3, [r3, #0]
    589c:	4618      	mov	r0, r3
    589e:	f04f 0100 	mov.w	r1, #0
    58a2:	f04f 32ff 	mov.w	r2, #4294967295
    58a6:	f04f 0300 	mov.w	r3, #0
    58aa:	f7fd fc53 	bl	3154 <xQueueGenericReceive>
    fd = fio_findfd();
    58ae:	f7ff ff9d 	bl	57ec <fio_findfd>
    58b2:	6178      	str	r0, [r7, #20]
    
    if (fd >= 0) {
    58b4:	697b      	ldr	r3, [r7, #20]
    58b6:	2b00      	cmp	r3, #0
    58b8:	db4d      	blt.n	5956 <fio_open+0xd2>
        fio_fds[fd].fdread = fdread;
    58ba:	f244 72b8 	movw	r2, #18360	; 0x47b8
    58be:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58c2:	6979      	ldr	r1, [r7, #20]
    58c4:	460b      	mov	r3, r1
    58c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    58ca:	185b      	adds	r3, r3, r1
    58cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    58d0:	18d3      	adds	r3, r2, r3
    58d2:	68fa      	ldr	r2, [r7, #12]
    58d4:	601a      	str	r2, [r3, #0]
        fio_fds[fd].fdwrite = fdwrite;
    58d6:	f244 72b8 	movw	r2, #18360	; 0x47b8
    58da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58de:	6979      	ldr	r1, [r7, #20]
    58e0:	460b      	mov	r3, r1
    58e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    58e6:	185b      	adds	r3, r3, r1
    58e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    58ec:	18d3      	adds	r3, r2, r3
    58ee:	f103 0304 	add.w	r3, r3, #4
    58f2:	68ba      	ldr	r2, [r7, #8]
    58f4:	601a      	str	r2, [r3, #0]
        fio_fds[fd].fdseek = fdseek;
    58f6:	f244 72b8 	movw	r2, #18360	; 0x47b8
    58fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    58fe:	6979      	ldr	r1, [r7, #20]
    5900:	460b      	mov	r3, r1
    5902:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5906:	185b      	adds	r3, r3, r1
    5908:	ea4f 0383 	mov.w	r3, r3, lsl #2
    590c:	18d3      	adds	r3, r2, r3
    590e:	f103 0308 	add.w	r3, r3, #8
    5912:	687a      	ldr	r2, [r7, #4]
    5914:	601a      	str	r2, [r3, #0]
        fio_fds[fd].fdclose = fdclose;
    5916:	f244 72b8 	movw	r2, #18360	; 0x47b8
    591a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    591e:	6979      	ldr	r1, [r7, #20]
    5920:	460b      	mov	r3, r1
    5922:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5926:	185b      	adds	r3, r3, r1
    5928:	ea4f 0383 	mov.w	r3, r3, lsl #2
    592c:	18d3      	adds	r3, r2, r3
    592e:	f103 030c 	add.w	r3, r3, #12
    5932:	683a      	ldr	r2, [r7, #0]
    5934:	601a      	str	r2, [r3, #0]
        fio_fds[fd].opaque = opaque;
    5936:	f244 72b8 	movw	r2, #18360	; 0x47b8
    593a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    593e:	6979      	ldr	r1, [r7, #20]
    5940:	460b      	mov	r3, r1
    5942:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5946:	185b      	adds	r3, r3, r1
    5948:	ea4f 0383 	mov.w	r3, r3, lsl #2
    594c:	18d3      	adds	r3, r2, r3
    594e:	f103 0310 	add.w	r3, r3, #16
    5952:	6a3a      	ldr	r2, [r7, #32]
    5954:	601a      	str	r2, [r3, #0]
    }
    xSemaphoreGive(fio_sem);
    5956:	f644 2338 	movw	r3, #19000	; 0x4a38
    595a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    595e:	681b      	ldr	r3, [r3, #0]
    5960:	4618      	mov	r0, r3
    5962:	f04f 0100 	mov.w	r1, #0
    5966:	f04f 0200 	mov.w	r2, #0
    596a:	f04f 0300 	mov.w	r3, #0
    596e:	f7fd fb19 	bl	2fa4 <xQueueGenericSend>
    
    return fd;
    5972:	697b      	ldr	r3, [r7, #20]
}
    5974:	4618      	mov	r0, r3
    5976:	f107 0718 	add.w	r7, r7, #24
    597a:	46bd      	mov	sp, r7
    597c:	bd80      	pop	{r7, pc}
    597e:	bf00      	nop

00005980 <fio_read>:

ssize_t fio_read(int fd, void * buf, size_t count) {
    5980:	b590      	push	{r4, r7, lr}
    5982:	b087      	sub	sp, #28
    5984:	af00      	add	r7, sp, #0
    5986:	60f8      	str	r0, [r7, #12]
    5988:	60b9      	str	r1, [r7, #8]
    598a:	607a      	str	r2, [r7, #4]
    ssize_t r = 0;
    598c:	f04f 0300 	mov.w	r3, #0
    5990:	617b      	str	r3, [r7, #20]
//    DBGOUT("fio_read(%i, %p, %i)\r\n", fd, buf, count);
    if (fio_is_open_int(fd)) {
    5992:	68f8      	ldr	r0, [r7, #12]
    5994:	f7ff febc 	bl	5710 <fio_is_open_int>
    5998:	4603      	mov	r3, r0
    599a:	2b00      	cmp	r3, #0
    599c:	d034      	beq.n	5a08 <fio_read+0x88>
        if (fio_fds[fd].fdread) {
    599e:	f244 72b8 	movw	r2, #18360	; 0x47b8
    59a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59a6:	68f9      	ldr	r1, [r7, #12]
    59a8:	460b      	mov	r3, r1
    59aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    59ae:	185b      	adds	r3, r3, r1
    59b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    59b4:	18d3      	adds	r3, r2, r3
    59b6:	681b      	ldr	r3, [r3, #0]
    59b8:	2b00      	cmp	r3, #0
    59ba:	d021      	beq.n	5a00 <fio_read+0x80>
            r = fio_fds[fd].fdread(fio_fds[fd].opaque, buf, count);
    59bc:	f244 72b8 	movw	r2, #18360	; 0x47b8
    59c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59c4:	68f9      	ldr	r1, [r7, #12]
    59c6:	460b      	mov	r3, r1
    59c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    59cc:	185b      	adds	r3, r3, r1
    59ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
    59d2:	18d3      	adds	r3, r2, r3
    59d4:	681c      	ldr	r4, [r3, #0]
    59d6:	f244 72b8 	movw	r2, #18360	; 0x47b8
    59da:	f2c2 0200 	movt	r2, #8192	; 0x2000
    59de:	68f9      	ldr	r1, [r7, #12]
    59e0:	460b      	mov	r3, r1
    59e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    59e6:	185b      	adds	r3, r3, r1
    59e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    59ec:	18d3      	adds	r3, r2, r3
    59ee:	f103 0310 	add.w	r3, r3, #16
    59f2:	681b      	ldr	r3, [r3, #0]
    59f4:	4618      	mov	r0, r3
    59f6:	68b9      	ldr	r1, [r7, #8]
    59f8:	687a      	ldr	r2, [r7, #4]
    59fa:	47a0      	blx	r4
    59fc:	6178      	str	r0, [r7, #20]
    59fe:	e006      	b.n	5a0e <fio_read+0x8e>
        } else {
            r = -3;
    5a00:	f06f 0302 	mvn.w	r3, #2
    5a04:	617b      	str	r3, [r7, #20]
    5a06:	e002      	b.n	5a0e <fio_read+0x8e>
        }
    } else {
        r = -2;
    5a08:	f06f 0301 	mvn.w	r3, #1
    5a0c:	617b      	str	r3, [r7, #20]
    }
    return r;
    5a0e:	697b      	ldr	r3, [r7, #20]
}
    5a10:	4618      	mov	r0, r3
    5a12:	f107 071c 	add.w	r7, r7, #28
    5a16:	46bd      	mov	sp, r7
    5a18:	bd90      	pop	{r4, r7, pc}
    5a1a:	bf00      	nop

00005a1c <fio_write>:

ssize_t fio_write(int fd, const void * buf, size_t count) {
    5a1c:	b590      	push	{r4, r7, lr}
    5a1e:	b087      	sub	sp, #28
    5a20:	af00      	add	r7, sp, #0
    5a22:	60f8      	str	r0, [r7, #12]
    5a24:	60b9      	str	r1, [r7, #8]
    5a26:	607a      	str	r2, [r7, #4]
    ssize_t r = 0;
    5a28:	f04f 0300 	mov.w	r3, #0
    5a2c:	617b      	str	r3, [r7, #20]
//    DBGOUT("fio_write(%i, %p, %i)\r\n", fd, buf, count);
    if (fio_is_open_int(fd)) {
    5a2e:	68f8      	ldr	r0, [r7, #12]
    5a30:	f7ff fe6e 	bl	5710 <fio_is_open_int>
    5a34:	4603      	mov	r3, r0
    5a36:	2b00      	cmp	r3, #0
    5a38:	d038      	beq.n	5aac <fio_write+0x90>
        if (fio_fds[fd].fdwrite) {
    5a3a:	f244 72b8 	movw	r2, #18360	; 0x47b8
    5a3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a42:	68f9      	ldr	r1, [r7, #12]
    5a44:	460b      	mov	r3, r1
    5a46:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a4a:	185b      	adds	r3, r3, r1
    5a4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a50:	18d3      	adds	r3, r2, r3
    5a52:	f103 0304 	add.w	r3, r3, #4
    5a56:	681b      	ldr	r3, [r3, #0]
    5a58:	2b00      	cmp	r3, #0
    5a5a:	d023      	beq.n	5aa4 <fio_write+0x88>
            r = fio_fds[fd].fdwrite(fio_fds[fd].opaque, buf, count);
    5a5c:	f244 72b8 	movw	r2, #18360	; 0x47b8
    5a60:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a64:	68f9      	ldr	r1, [r7, #12]
    5a66:	460b      	mov	r3, r1
    5a68:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a6c:	185b      	adds	r3, r3, r1
    5a6e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a72:	18d3      	adds	r3, r2, r3
    5a74:	f103 0304 	add.w	r3, r3, #4
    5a78:	681c      	ldr	r4, [r3, #0]
    5a7a:	f244 72b8 	movw	r2, #18360	; 0x47b8
    5a7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5a82:	68f9      	ldr	r1, [r7, #12]
    5a84:	460b      	mov	r3, r1
    5a86:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a8a:	185b      	adds	r3, r3, r1
    5a8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a90:	18d3      	adds	r3, r2, r3
    5a92:	f103 0310 	add.w	r3, r3, #16
    5a96:	681b      	ldr	r3, [r3, #0]
    5a98:	4618      	mov	r0, r3
    5a9a:	68b9      	ldr	r1, [r7, #8]
    5a9c:	687a      	ldr	r2, [r7, #4]
    5a9e:	47a0      	blx	r4
    5aa0:	6178      	str	r0, [r7, #20]
    5aa2:	e006      	b.n	5ab2 <fio_write+0x96>
        } else {
            r = -3;
    5aa4:	f06f 0302 	mvn.w	r3, #2
    5aa8:	617b      	str	r3, [r7, #20]
    5aaa:	e002      	b.n	5ab2 <fio_write+0x96>
        }
    } else {
        r = -2;
    5aac:	f06f 0301 	mvn.w	r3, #1
    5ab0:	617b      	str	r3, [r7, #20]
    }
    return r;
    5ab2:	697b      	ldr	r3, [r7, #20]
}
    5ab4:	4618      	mov	r0, r3
    5ab6:	f107 071c 	add.w	r7, r7, #28
    5aba:	46bd      	mov	sp, r7
    5abc:	bd90      	pop	{r4, r7, pc}
    5abe:	bf00      	nop

00005ac0 <fio_seek>:

off_t fio_seek(int fd, off_t offset, int whence) {
    5ac0:	b590      	push	{r4, r7, lr}
    5ac2:	b087      	sub	sp, #28
    5ac4:	af00      	add	r7, sp, #0
    5ac6:	60f8      	str	r0, [r7, #12]
    5ac8:	60b9      	str	r1, [r7, #8]
    5aca:	607a      	str	r2, [r7, #4]
    off_t r = 0;
    5acc:	f04f 0300 	mov.w	r3, #0
    5ad0:	617b      	str	r3, [r7, #20]
//    DBGOUT("fio_seek(%i, %i, %i)\r\n", fd, offset, whence);
    if (fio_is_open_int(fd)) {
    5ad2:	68f8      	ldr	r0, [r7, #12]
    5ad4:	f7ff fe1c 	bl	5710 <fio_is_open_int>
    5ad8:	4603      	mov	r3, r0
    5ada:	2b00      	cmp	r3, #0
    5adc:	d038      	beq.n	5b50 <fio_seek+0x90>
        if (fio_fds[fd].fdseek) {
    5ade:	f244 72b8 	movw	r2, #18360	; 0x47b8
    5ae2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ae6:	68f9      	ldr	r1, [r7, #12]
    5ae8:	460b      	mov	r3, r1
    5aea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5aee:	185b      	adds	r3, r3, r1
    5af0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5af4:	18d3      	adds	r3, r2, r3
    5af6:	f103 0308 	add.w	r3, r3, #8
    5afa:	681b      	ldr	r3, [r3, #0]
    5afc:	2b00      	cmp	r3, #0
    5afe:	d023      	beq.n	5b48 <fio_seek+0x88>
            r = fio_fds[fd].fdseek(fio_fds[fd].opaque, offset, whence);
    5b00:	f244 72b8 	movw	r2, #18360	; 0x47b8
    5b04:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b08:	68f9      	ldr	r1, [r7, #12]
    5b0a:	460b      	mov	r3, r1
    5b0c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b10:	185b      	adds	r3, r3, r1
    5b12:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b16:	18d3      	adds	r3, r2, r3
    5b18:	f103 0308 	add.w	r3, r3, #8
    5b1c:	681c      	ldr	r4, [r3, #0]
    5b1e:	f244 72b8 	movw	r2, #18360	; 0x47b8
    5b22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b26:	68f9      	ldr	r1, [r7, #12]
    5b28:	460b      	mov	r3, r1
    5b2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b2e:	185b      	adds	r3, r3, r1
    5b30:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b34:	18d3      	adds	r3, r2, r3
    5b36:	f103 0310 	add.w	r3, r3, #16
    5b3a:	681b      	ldr	r3, [r3, #0]
    5b3c:	4618      	mov	r0, r3
    5b3e:	68b9      	ldr	r1, [r7, #8]
    5b40:	687a      	ldr	r2, [r7, #4]
    5b42:	47a0      	blx	r4
    5b44:	6178      	str	r0, [r7, #20]
    5b46:	e006      	b.n	5b56 <fio_seek+0x96>
        } else {
            r = -3;
    5b48:	f06f 0302 	mvn.w	r3, #2
    5b4c:	617b      	str	r3, [r7, #20]
    5b4e:	e002      	b.n	5b56 <fio_seek+0x96>
        }
    } else {
        r = -2;
    5b50:	f06f 0301 	mvn.w	r3, #1
    5b54:	617b      	str	r3, [r7, #20]
    }
    return r;
    5b56:	697b      	ldr	r3, [r7, #20]
}
    5b58:	4618      	mov	r0, r3
    5b5a:	f107 071c 	add.w	r7, r7, #28
    5b5e:	46bd      	mov	sp, r7
    5b60:	bd90      	pop	{r4, r7, pc}
    5b62:	bf00      	nop

00005b64 <fio_close>:

int fio_close(int fd) {
    5b64:	b590      	push	{r4, r7, lr}
    5b66:	b085      	sub	sp, #20
    5b68:	af00      	add	r7, sp, #0
    5b6a:	6078      	str	r0, [r7, #4]
    int r = 0;
    5b6c:	f04f 0300 	mov.w	r3, #0
    5b70:	60fb      	str	r3, [r7, #12]
//    DBGOUT("fio_close(%i)\r\n", fd);
    if (fio_is_open_int(fd)) {
    5b72:	6878      	ldr	r0, [r7, #4]
    5b74:	f7ff fdcc 	bl	5710 <fio_is_open_int>
    5b78:	4603      	mov	r3, r0
    5b7a:	2b00      	cmp	r3, #0
    5b7c:	d064      	beq.n	5c48 <fio_close+0xe4>
        if (fio_fds[fd].fdclose)
    5b7e:	f244 72b8 	movw	r2, #18360	; 0x47b8
    5b82:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5b86:	6879      	ldr	r1, [r7, #4]
    5b88:	460b      	mov	r3, r1
    5b8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b8e:	185b      	adds	r3, r3, r1
    5b90:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b94:	18d3      	adds	r3, r2, r3
    5b96:	f103 030c 	add.w	r3, r3, #12
    5b9a:	681b      	ldr	r3, [r3, #0]
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d020      	beq.n	5be2 <fio_close+0x7e>
            r = fio_fds[fd].fdclose(fio_fds[fd].opaque);
    5ba0:	f244 72b8 	movw	r2, #18360	; 0x47b8
    5ba4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5ba8:	6879      	ldr	r1, [r7, #4]
    5baa:	460b      	mov	r3, r1
    5bac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5bb0:	185b      	adds	r3, r3, r1
    5bb2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5bb6:	18d3      	adds	r3, r2, r3
    5bb8:	f103 030c 	add.w	r3, r3, #12
    5bbc:	681c      	ldr	r4, [r3, #0]
    5bbe:	f244 72b8 	movw	r2, #18360	; 0x47b8
    5bc2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5bc6:	6879      	ldr	r1, [r7, #4]
    5bc8:	460b      	mov	r3, r1
    5bca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5bce:	185b      	adds	r3, r3, r1
    5bd0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5bd4:	18d3      	adds	r3, r2, r3
    5bd6:	f103 0310 	add.w	r3, r3, #16
    5bda:	681b      	ldr	r3, [r3, #0]
    5bdc:	4618      	mov	r0, r3
    5bde:	47a0      	blx	r4
    5be0:	60f8      	str	r0, [r7, #12]
        xSemaphoreTake(fio_sem, portMAX_DELAY);
    5be2:	f644 2338 	movw	r3, #19000	; 0x4a38
    5be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bea:	681b      	ldr	r3, [r3, #0]
    5bec:	4618      	mov	r0, r3
    5bee:	f04f 0100 	mov.w	r1, #0
    5bf2:	f04f 32ff 	mov.w	r2, #4294967295
    5bf6:	f04f 0300 	mov.w	r3, #0
    5bfa:	f7fd faab 	bl	3154 <xQueueGenericReceive>
        memset(fio_fds + fd, 0, sizeof(struct fddef_t));
    5bfe:	687a      	ldr	r2, [r7, #4]
    5c00:	4613      	mov	r3, r2
    5c02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c06:	189b      	adds	r3, r3, r2
    5c08:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c0c:	461a      	mov	r2, r3
    5c0e:	f244 73b8 	movw	r3, #18360	; 0x47b8
    5c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c16:	18d3      	adds	r3, r2, r3
    5c18:	f04f 0214 	mov.w	r2, #20
    5c1c:	4618      	mov	r0, r3
    5c1e:	f04f 0100 	mov.w	r1, #0
    5c22:	4613      	mov	r3, r2
    5c24:	461a      	mov	r2, r3
    5c26:	f000 f9d9 	bl	5fdc <memset>
        xSemaphoreGive(fio_sem);
    5c2a:	f644 2338 	movw	r3, #19000	; 0x4a38
    5c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c32:	681b      	ldr	r3, [r3, #0]
    5c34:	4618      	mov	r0, r3
    5c36:	f04f 0100 	mov.w	r1, #0
    5c3a:	f04f 0200 	mov.w	r2, #0
    5c3e:	f04f 0300 	mov.w	r3, #0
    5c42:	f7fd f9af 	bl	2fa4 <xQueueGenericSend>
    5c46:	e002      	b.n	5c4e <fio_close+0xea>
    } else {
        r = -2;
    5c48:	f06f 0301 	mvn.w	r3, #1
    5c4c:	60fb      	str	r3, [r7, #12]
    }
    return r;
    5c4e:	68fb      	ldr	r3, [r7, #12]
}
    5c50:	4618      	mov	r0, r3
    5c52:	f107 0714 	add.w	r7, r7, #20
    5c56:	46bd      	mov	sp, r7
    5c58:	bd90      	pop	{r4, r7, pc}
    5c5a:	bf00      	nop

00005c5c <fio_set_opaque>:

void fio_set_opaque(int fd, void * opaque) {
    5c5c:	b580      	push	{r7, lr}
    5c5e:	b082      	sub	sp, #8
    5c60:	af00      	add	r7, sp, #0
    5c62:	6078      	str	r0, [r7, #4]
    5c64:	6039      	str	r1, [r7, #0]
    if (fio_is_open_int(fd))
    5c66:	6878      	ldr	r0, [r7, #4]
    5c68:	f7ff fd52 	bl	5710 <fio_is_open_int>
    5c6c:	4603      	mov	r3, r0
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d00f      	beq.n	5c92 <fio_set_opaque+0x36>
        fio_fds[fd].opaque = opaque;
    5c72:	f244 72b8 	movw	r2, #18360	; 0x47b8
    5c76:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5c7a:	6879      	ldr	r1, [r7, #4]
    5c7c:	460b      	mov	r3, r1
    5c7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c82:	185b      	adds	r3, r3, r1
    5c84:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c88:	18d3      	adds	r3, r2, r3
    5c8a:	f103 0310 	add.w	r3, r3, #16
    5c8e:	683a      	ldr	r2, [r7, #0]
    5c90:	601a      	str	r2, [r3, #0]
}
    5c92:	f107 0708 	add.w	r7, r7, #8
    5c96:	46bd      	mov	sp, r7
    5c98:	bd80      	pop	{r7, pc}
    5c9a:	bf00      	nop

00005c9c <devfs_open>:

#define stdin_hash 0x0BA00421
#define stdout_hash 0x7FA08308
#define stderr_hash 0x7FA058A3

static int devfs_open(void * opaque, const char * path, int flags, int mode) {
    5c9c:	b580      	push	{r7, lr}
    5c9e:	b088      	sub	sp, #32
    5ca0:	af02      	add	r7, sp, #8
    5ca2:	60f8      	str	r0, [r7, #12]
    5ca4:	60b9      	str	r1, [r7, #8]
    5ca6:	607a      	str	r2, [r7, #4]
    5ca8:	603b      	str	r3, [r7, #0]
    uint32_t h = hash_djb2((const uint8_t *) path, -1);
    5caa:	68b8      	ldr	r0, [r7, #8]
    5cac:	f04f 31ff 	mov.w	r1, #4294967295
    5cb0:	f7ff fb8c 	bl	53cc <hash_djb2>
    5cb4:	6178      	str	r0, [r7, #20]
//    DBGOUT("devfs_open(%p, \"%s\", %i, %i)\r\n", opaque, path, flags, mode);
    switch (h) {
    5cb6:	697a      	ldr	r2, [r7, #20]
    5cb8:	f645 03a3 	movw	r3, #22691	; 0x58a3
    5cbc:	f6c7 73a0 	movt	r3, #32672	; 0x7fa0
    5cc0:	429a      	cmp	r2, r3
    5cc2:	d035      	beq.n	5d30 <devfs_open+0x94>
    5cc4:	f248 3308 	movw	r3, #33544	; 0x8308
    5cc8:	f6c7 73a0 	movt	r3, #32672	; 0x7fa0
    5ccc:	429a      	cmp	r2, r3
    5cce:	d01e      	beq.n	5d0e <devfs_open+0x72>
    5cd0:	f240 4321 	movw	r3, #1057	; 0x421
    5cd4:	f6c0 33a0 	movt	r3, #2976	; 0xba0
    5cd8:	429a      	cmp	r2, r3
    5cda:	d13a      	bne.n	5d52 <devfs_open+0xb6>
    case stdin_hash:
        if (flags & (O_WRONLY | O_RDWR))
    5cdc:	687b      	ldr	r3, [r7, #4]
    5cde:	f003 0303 	and.w	r3, r3, #3
    5ce2:	2b00      	cmp	r3, #0
    5ce4:	d002      	beq.n	5cec <devfs_open+0x50>
            return -1;
    5ce6:	f04f 33ff 	mov.w	r3, #4294967295
    5cea:	e034      	b.n	5d56 <devfs_open+0xba>
        return fio_open(stdin_read, NULL, NULL, NULL, NULL);
    5cec:	f04f 0300 	mov.w	r3, #0
    5cf0:	9300      	str	r3, [sp, #0]
    5cf2:	f245 6005 	movw	r0, #22021	; 0x5605
    5cf6:	f2c0 0000 	movt	r0, #0
    5cfa:	f04f 0100 	mov.w	r1, #0
    5cfe:	f04f 0200 	mov.w	r2, #0
    5d02:	f04f 0300 	mov.w	r3, #0
    5d06:	f7ff fdbd 	bl	5884 <fio_open>
    5d0a:	4603      	mov	r3, r0
    5d0c:	e023      	b.n	5d56 <devfs_open+0xba>
        break;
    case stdout_hash:
        if (flags & O_RDONLY)
            return -1;
        return fio_open(NULL, stdout_write, NULL, NULL, NULL);
    5d0e:	f04f 0300 	mov.w	r3, #0
    5d12:	9300      	str	r3, [sp, #0]
    5d14:	f04f 0000 	mov.w	r0, #0
    5d18:	f245 6121 	movw	r1, #22049	; 0x5621
    5d1c:	f2c0 0100 	movt	r1, #0
    5d20:	f04f 0200 	mov.w	r2, #0
    5d24:	f04f 0300 	mov.w	r3, #0
    5d28:	f7ff fdac 	bl	5884 <fio_open>
    5d2c:	4603      	mov	r3, r0
    5d2e:	e012      	b.n	5d56 <devfs_open+0xba>
        break;
    case stderr_hash:
        if (flags & O_RDONLY)
            return -1;
        return fio_open(NULL, stdout_write, NULL, NULL, NULL);
    5d30:	f04f 0300 	mov.w	r3, #0
    5d34:	9300      	str	r3, [sp, #0]
    5d36:	f04f 0000 	mov.w	r0, #0
    5d3a:	f245 6121 	movw	r1, #22049	; 0x5621
    5d3e:	f2c0 0100 	movt	r1, #0
    5d42:	f04f 0200 	mov.w	r2, #0
    5d46:	f04f 0300 	mov.w	r3, #0
    5d4a:	f7ff fd9b 	bl	5884 <fio_open>
    5d4e:	4603      	mov	r3, r0
    5d50:	e001      	b.n	5d56 <devfs_open+0xba>
        break;
    }
    return -1;
    5d52:	f04f 33ff 	mov.w	r3, #4294967295
}
    5d56:	4618      	mov	r0, r3
    5d58:	f107 0718 	add.w	r7, r7, #24
    5d5c:	46bd      	mov	sp, r7
    5d5e:	bd80      	pop	{r7, pc}

00005d60 <register_devfs>:

void register_devfs() {
    5d60:	b580      	push	{r7, lr}
    5d62:	af00      	add	r7, sp, #0
    DBGOUT("Registering devfs.\r\n");
    5d64:	f646 30b0 	movw	r0, #27568	; 0x6bb0
    5d68:	f2c0 0000 	movt	r0, #0
    5d6c:	f000 f92e 	bl	5fcc <osDbgPrintf>
    register_fs("dev", devfs_open, NULL);
    5d70:	f646 30c8 	movw	r0, #27592	; 0x6bc8
    5d74:	f2c0 0000 	movt	r0, #0
    5d78:	f645 419d 	movw	r1, #23709	; 0x5c9d
    5d7c:	f2c0 0100 	movt	r1, #0
    5d80:	f04f 0200 	mov.w	r2, #0
    5d84:	f7ff fb68 	bl	5458 <register_fs>
}
    5d88:	bd80      	pop	{r7, pc}
    5d8a:	bf00      	nop

00005d8c <sprintf>:

int sprintf ( char * str, const char * format, ... )//only support %s (string), %c (charater) and %i(%d) (integer)
{
    5d8c:	b40e      	push	{r1, r2, r3}
    5d8e:	b580      	push	{r7, lr}
    5d90:	b089      	sub	sp, #36	; 0x24
    5d92:	af00      	add	r7, sp, #0
    5d94:	6078      	str	r0, [r7, #4]
    va_list para;
    va_start(para,format);
    5d96:	f107 0330 	add.w	r3, r7, #48	; 0x30
    5d9a:	61bb      	str	r3, [r7, #24]
    int curr_pos=0;
    5d9c:	f04f 0300 	mov.w	r3, #0
    5da0:	61fb      	str	r3, [r7, #28]
    char ch[]={'0','\0'};
    5da2:	f04f 0330 	mov.w	r3, #48	; 0x30
    5da6:	753b      	strb	r3, [r7, #20]
    5da8:	f04f 0300 	mov.w	r3, #0
    5dac:	757b      	strb	r3, [r7, #21]
    char integer[11];
    str[0]='\0';
    5dae:	687b      	ldr	r3, [r7, #4]
    5db0:	f04f 0200 	mov.w	r2, #0
    5db4:	701a      	strb	r2, [r3, #0]
    while(format[curr_pos]!='\0')
    5db6:	e086      	b.n	5ec6 <sprintf+0x13a>
    {
        if(format[curr_pos]!='%')
    5db8:	69fb      	ldr	r3, [r7, #28]
    5dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5dbc:	18d3      	adds	r3, r2, r3
    5dbe:	781b      	ldrb	r3, [r3, #0]
    5dc0:	2b25      	cmp	r3, #37	; 0x25
    5dc2:	d00b      	beq.n	5ddc <sprintf+0x50>
        {
            ch[0]=format[curr_pos];
    5dc4:	69fb      	ldr	r3, [r7, #28]
    5dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5dc8:	18d3      	adds	r3, r2, r3
    5dca:	781b      	ldrb	r3, [r3, #0]
    5dcc:	753b      	strb	r3, [r7, #20]
            strcat(str,ch);
    5dce:	6878      	ldr	r0, [r7, #4]
    5dd0:	f107 0314 	add.w	r3, r7, #20
    5dd4:	4619      	mov	r1, r3
    5dd6:	f000 faaf 	bl	6338 <strcat>
    5dda:	e070      	b.n	5ebe <sprintf+0x132>
        }
        else
        {
            switch(format[++curr_pos])
    5ddc:	69fb      	ldr	r3, [r7, #28]
    5dde:	f103 0301 	add.w	r3, r3, #1
    5de2:	61fb      	str	r3, [r7, #28]
    5de4:	69fb      	ldr	r3, [r7, #28]
    5de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5de8:	18d3      	adds	r3, r2, r3
    5dea:	781b      	ldrb	r3, [r3, #0]
    5dec:	f1a3 0363 	sub.w	r3, r3, #99	; 0x63
    5df0:	2b12      	cmp	r3, #18
    5df2:	d863      	bhi.n	5ebc <sprintf+0x130>
    5df4:	a201      	add	r2, pc, #4	; (adr r2, 5dfc <sprintf+0x70>)
    5df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5dfa:	bf00      	nop
    5dfc:	00005e5d 	.word	0x00005e5d
    5e00:	00005e79 	.word	0x00005e79
    5e04:	00005ebd 	.word	0x00005ebd
    5e08:	00005ebd 	.word	0x00005ebd
    5e0c:	00005ebd 	.word	0x00005ebd
    5e10:	00005ebd 	.word	0x00005ebd
    5e14:	00005e79 	.word	0x00005e79
    5e18:	00005ebd 	.word	0x00005ebd
    5e1c:	00005ebd 	.word	0x00005ebd
    5e20:	00005ebd 	.word	0x00005ebd
    5e24:	00005ebd 	.word	0x00005ebd
    5e28:	00005ebd 	.word	0x00005ebd
    5e2c:	00005ebd 	.word	0x00005ebd
    5e30:	00005ebd 	.word	0x00005ebd
    5e34:	00005ebd 	.word	0x00005ebd
    5e38:	00005ebd 	.word	0x00005ebd
    5e3c:	00005e49 	.word	0x00005e49
    5e40:	00005ebd 	.word	0x00005ebd
    5e44:	00005e9b 	.word	0x00005e9b
            {
                case 's':
                    strcat(str,va_arg(para,char*));
    5e48:	69bb      	ldr	r3, [r7, #24]
    5e4a:	f103 0204 	add.w	r2, r3, #4
    5e4e:	61ba      	str	r2, [r7, #24]
    5e50:	681b      	ldr	r3, [r3, #0]
    5e52:	6878      	ldr	r0, [r7, #4]
    5e54:	4619      	mov	r1, r3
    5e56:	f000 fa6f 	bl	6338 <strcat>
                    break;
    5e5a:	e030      	b.n	5ebe <sprintf+0x132>
                case 'c':
                    ch[0]=(char)va_arg(para,int);
    5e5c:	69bb      	ldr	r3, [r7, #24]
    5e5e:	f103 0204 	add.w	r2, r3, #4
    5e62:	61ba      	str	r2, [r7, #24]
    5e64:	681b      	ldr	r3, [r3, #0]
    5e66:	b2db      	uxtb	r3, r3
    5e68:	753b      	strb	r3, [r7, #20]
                    strcat(str,ch);
    5e6a:	6878      	ldr	r0, [r7, #4]
    5e6c:	f107 0314 	add.w	r3, r7, #20
    5e70:	4619      	mov	r1, r3
    5e72:	f000 fa61 	bl	6338 <strcat>
                    break;
    5e76:	e022      	b.n	5ebe <sprintf+0x132>
                case 'i':
                case 'd':
                    strcat(str,itoa(va_arg(para,int),integer));
    5e78:	69bb      	ldr	r3, [r7, #24]
    5e7a:	f103 0204 	add.w	r2, r3, #4
    5e7e:	61ba      	str	r2, [r7, #24]
    5e80:	681b      	ldr	r3, [r3, #0]
    5e82:	4618      	mov	r0, r3
    5e84:	f107 0308 	add.w	r3, r7, #8
    5e88:	4619      	mov	r1, r3
    5e8a:	f000 fa89 	bl	63a0 <itoa>
    5e8e:	4603      	mov	r3, r0
    5e90:	6878      	ldr	r0, [r7, #4]
    5e92:	4619      	mov	r1, r3
    5e94:	f000 fa50 	bl	6338 <strcat>
                    break;
    5e98:	e011      	b.n	5ebe <sprintf+0x132>
                case 'u':
                    strcat(str,itoa(va_arg(para,unsigned),integer));
    5e9a:	69bb      	ldr	r3, [r7, #24]
    5e9c:	f103 0204 	add.w	r2, r3, #4
    5ea0:	61ba      	str	r2, [r7, #24]
    5ea2:	681b      	ldr	r3, [r3, #0]
    5ea4:	4618      	mov	r0, r3
    5ea6:	f107 0308 	add.w	r3, r7, #8
    5eaa:	4619      	mov	r1, r3
    5eac:	f000 fa78 	bl	63a0 <itoa>
    5eb0:	4603      	mov	r3, r0
    5eb2:	6878      	ldr	r0, [r7, #4]
    5eb4:	4619      	mov	r1, r3
    5eb6:	f000 fa3f 	bl	6338 <strcat>
                    break;
    5eba:	e000      	b.n	5ebe <sprintf+0x132>
                default:
                    break;
    5ebc:	bf00      	nop
            }
        }
        curr_pos++;
    5ebe:	69fb      	ldr	r3, [r7, #28]
    5ec0:	f103 0301 	add.w	r3, r3, #1
    5ec4:	61fb      	str	r3, [r7, #28]
    va_start(para,format);
    int curr_pos=0;
    char ch[]={'0','\0'};
    char integer[11];
    str[0]='\0';
    while(format[curr_pos]!='\0')
    5ec6:	69fb      	ldr	r3, [r7, #28]
    5ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5eca:	18d3      	adds	r3, r2, r3
    5ecc:	781b      	ldrb	r3, [r3, #0]
    5ece:	2b00      	cmp	r3, #0
    5ed0:	f47f af72 	bne.w	5db8 <sprintf+0x2c>
            }
        }
        curr_pos++;
    }
    va_end(para);
    return strlen(str);
    5ed4:	6878      	ldr	r0, [r7, #4]
    5ed6:	f000 f9b7 	bl	6248 <strlen>
    5eda:	4603      	mov	r3, r0
}
    5edc:	4618      	mov	r0, r3
    5ede:	f107 0724 	add.w	r7, r7, #36	; 0x24
    5ee2:	46bd      	mov	sp, r7
    5ee4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    5ee8:	b003      	add	sp, #12
    5eea:	4770      	bx	lr

00005eec <Puts>:


void Puts(char *msg)
{
    5eec:	b580      	push	{r7, lr}
    5eee:	b082      	sub	sp, #8
    5ef0:	af00      	add	r7, sp, #0
    5ef2:	6078      	str	r0, [r7, #4]
	if(!msg)return;
    5ef4:	687b      	ldr	r3, [r7, #4]
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	d00a      	beq.n	5f10 <Puts+0x24>
	fio_write(1,msg,strlen(msg));
    5efa:	6878      	ldr	r0, [r7, #4]
    5efc:	f000 f9a4 	bl	6248 <strlen>
    5f00:	4603      	mov	r3, r0
    5f02:	f04f 0001 	mov.w	r0, #1
    5f06:	6879      	ldr	r1, [r7, #4]
    5f08:	461a      	mov	r2, r3
    5f0a:	f7ff fd87 	bl	5a1c <fio_write>
    5f0e:	e000      	b.n	5f12 <Puts+0x26>
}


void Puts(char *msg)
{
	if(!msg)return;
    5f10:	bf00      	nop
	fio_write(1,msg,strlen(msg));
}
    5f12:	f107 0708 	add.w	r7, r7, #8
    5f16:	46bd      	mov	sp, r7
    5f18:	bd80      	pop	{r7, pc}
    5f1a:	bf00      	nop

00005f1c <Print>:

void Print(char *msg)
{
    5f1c:	b580      	push	{r7, lr}
    5f1e:	b084      	sub	sp, #16
    5f20:	af00      	add	r7, sp, #0
    5f22:	6078      	str	r0, [r7, #4]
	if(!msg)return;
    5f24:	687b      	ldr	r3, [r7, #4]
    5f26:	2b00      	cmp	r3, #0
    5f28:	d026      	beq.n	5f78 <Print+0x5c>
	char newLine[]="\n\r";
    5f2a:	f646 32cc 	movw	r2, #27596	; 0x6bcc
    5f2e:	f2c0 0200 	movt	r2, #0
    5f32:	f107 030c 	add.w	r3, r7, #12
    5f36:	6812      	ldr	r2, [r2, #0]
    5f38:	4611      	mov	r1, r2
    5f3a:	8019      	strh	r1, [r3, #0]
    5f3c:	f103 0302 	add.w	r3, r3, #2
    5f40:	ea4f 4212 	mov.w	r2, r2, lsr #16
    5f44:	701a      	strb	r2, [r3, #0]
	fio_write(1,msg,strlen(msg));
    5f46:	6878      	ldr	r0, [r7, #4]
    5f48:	f000 f97e 	bl	6248 <strlen>
    5f4c:	4603      	mov	r3, r0
    5f4e:	f04f 0001 	mov.w	r0, #1
    5f52:	6879      	ldr	r1, [r7, #4]
    5f54:	461a      	mov	r2, r3
    5f56:	f7ff fd61 	bl	5a1c <fio_write>
	fio_write(1,newLine,strlen(newLine));
    5f5a:	f107 030c 	add.w	r3, r7, #12
    5f5e:	4618      	mov	r0, r3
    5f60:	f000 f972 	bl	6248 <strlen>
    5f64:	4603      	mov	r3, r0
    5f66:	f04f 0001 	mov.w	r0, #1
    5f6a:	f107 020c 	add.w	r2, r7, #12
    5f6e:	4611      	mov	r1, r2
    5f70:	461a      	mov	r2, r3
    5f72:	f7ff fd53 	bl	5a1c <fio_write>
    5f76:	e000      	b.n	5f7a <Print+0x5e>
	fio_write(1,msg,strlen(msg));
}

void Print(char *msg)
{
	if(!msg)return;
    5f78:	bf00      	nop
	char newLine[]="\n\r";
	fio_write(1,msg,strlen(msg));
	fio_write(1,newLine,strlen(newLine));
}
    5f7a:	f107 0710 	add.w	r7, r7, #16
    5f7e:	46bd      	mov	sp, r7
    5f80:	bd80      	pop	{r7, pc}
    5f82:	bf00      	nop

00005f84 <Print_nextLine>:

void Print_nextLine()
{
    5f84:	b580      	push	{r7, lr}
    5f86:	b082      	sub	sp, #8
    5f88:	af00      	add	r7, sp, #0
	char newLine[]="\n\r";
    5f8a:	f646 32cc 	movw	r2, #27596	; 0x6bcc
    5f8e:	f2c0 0200 	movt	r2, #0
    5f92:	f107 0304 	add.w	r3, r7, #4
    5f96:	6812      	ldr	r2, [r2, #0]
    5f98:	4611      	mov	r1, r2
    5f9a:	8019      	strh	r1, [r3, #0]
    5f9c:	f103 0302 	add.w	r3, r3, #2
    5fa0:	ea4f 4212 	mov.w	r2, r2, lsr #16
    5fa4:	701a      	strb	r2, [r3, #0]
	fio_write(1,newLine,strlen(newLine));
    5fa6:	f107 0304 	add.w	r3, r7, #4
    5faa:	4618      	mov	r0, r3
    5fac:	f000 f94c 	bl	6248 <strlen>
    5fb0:	4603      	mov	r3, r0
    5fb2:	f04f 0001 	mov.w	r0, #1
    5fb6:	f107 0204 	add.w	r2, r7, #4
    5fba:	4611      	mov	r1, r2
    5fbc:	461a      	mov	r2, r3
    5fbe:	f7ff fd2d 	bl	5a1c <fio_write>
}
    5fc2:	f107 0708 	add.w	r7, r7, #8
    5fc6:	46bd      	mov	sp, r7
    5fc8:	bd80      	pop	{r7, pc}
    5fca:	bf00      	nop

00005fcc <osDbgPrintf>:
void osDbgPrintf(const char * fmt, ...) { }
    5fcc:	b40f      	push	{r0, r1, r2, r3}
    5fce:	b480      	push	{r7}
    5fd0:	af00      	add	r7, sp, #0
    5fd2:	46bd      	mov	sp, r7
    5fd4:	bc80      	pop	{r7}
    5fd6:	b004      	add	sp, #16
    5fd8:	4770      	bx	lr
    5fda:	bf00      	nop

00005fdc <memset>:
#define HIGHS (ONES * (UCHAR_MAX/2+1))
#define HASZERO(x) ((x)-ONES & ~(x) & HIGHS)

#define SS (sizeof(size_t))
void *memset(void *dest, int c, size_t n)
{
    5fdc:	b480      	push	{r7}
    5fde:	b089      	sub	sp, #36	; 0x24
    5fe0:	af00      	add	r7, sp, #0
    5fe2:	60f8      	str	r0, [r7, #12]
    5fe4:	60b9      	str	r1, [r7, #8]
    5fe6:	607a      	str	r2, [r7, #4]
	unsigned char *s = dest;
    5fe8:	68fb      	ldr	r3, [r7, #12]
    5fea:	61fb      	str	r3, [r7, #28]
	c = (unsigned char)c;
    5fec:	68bb      	ldr	r3, [r7, #8]
    5fee:	b2db      	uxtb	r3, r3
    5ff0:	60bb      	str	r3, [r7, #8]
	for (; ((uintptr_t)s & ALIGN) && n; n--) *s++ = c;
    5ff2:	e00b      	b.n	600c <memset+0x30>
    5ff4:	68bb      	ldr	r3, [r7, #8]
    5ff6:	b2da      	uxtb	r2, r3
    5ff8:	69fb      	ldr	r3, [r7, #28]
    5ffa:	701a      	strb	r2, [r3, #0]
    5ffc:	69fb      	ldr	r3, [r7, #28]
    5ffe:	f103 0301 	add.w	r3, r3, #1
    6002:	61fb      	str	r3, [r7, #28]
    6004:	687b      	ldr	r3, [r7, #4]
    6006:	f103 33ff 	add.w	r3, r3, #4294967295
    600a:	607b      	str	r3, [r7, #4]
    600c:	69fb      	ldr	r3, [r7, #28]
    600e:	f003 0304 	and.w	r3, r3, #4
    6012:	2b00      	cmp	r3, #0
    6014:	d002      	beq.n	601c <memset+0x40>
    6016:	687b      	ldr	r3, [r7, #4]
    6018:	2b00      	cmp	r3, #0
    601a:	d1eb      	bne.n	5ff4 <memset+0x18>
	if (n) {
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	2b00      	cmp	r3, #0
    6020:	d02b      	beq.n	607a <memset+0x9e>
		size_t *w, k = ONES * c;
    6022:	68ba      	ldr	r2, [r7, #8]
    6024:	4613      	mov	r3, r2
    6026:	ea4f 2303 	mov.w	r3, r3, lsl #8
    602a:	189b      	adds	r3, r3, r2
    602c:	ea4f 4203 	mov.w	r2, r3, lsl #16
    6030:	189b      	adds	r3, r3, r2
    6032:	617b      	str	r3, [r7, #20]
		for (w = (void *)s; n>=SS; n-=SS, w++) *w = k;
    6034:	69fb      	ldr	r3, [r7, #28]
    6036:	61bb      	str	r3, [r7, #24]
    6038:	e00a      	b.n	6050 <memset+0x74>
    603a:	69bb      	ldr	r3, [r7, #24]
    603c:	697a      	ldr	r2, [r7, #20]
    603e:	601a      	str	r2, [r3, #0]
    6040:	687b      	ldr	r3, [r7, #4]
    6042:	f1a3 0304 	sub.w	r3, r3, #4
    6046:	607b      	str	r3, [r7, #4]
    6048:	69bb      	ldr	r3, [r7, #24]
    604a:	f103 0304 	add.w	r3, r3, #4
    604e:	61bb      	str	r3, [r7, #24]
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	2b03      	cmp	r3, #3
    6054:	d8f1      	bhi.n	603a <memset+0x5e>
		for (s = (void *)w; n; n--, s++) *s = c;
    6056:	69bb      	ldr	r3, [r7, #24]
    6058:	61fb      	str	r3, [r7, #28]
    605a:	e00b      	b.n	6074 <memset+0x98>
    605c:	68bb      	ldr	r3, [r7, #8]
    605e:	b2da      	uxtb	r2, r3
    6060:	69fb      	ldr	r3, [r7, #28]
    6062:	701a      	strb	r2, [r3, #0]
    6064:	687b      	ldr	r3, [r7, #4]
    6066:	f103 33ff 	add.w	r3, r3, #4294967295
    606a:	607b      	str	r3, [r7, #4]
    606c:	69fb      	ldr	r3, [r7, #28]
    606e:	f103 0301 	add.w	r3, r3, #1
    6072:	61fb      	str	r3, [r7, #28]
    6074:	687b      	ldr	r3, [r7, #4]
    6076:	2b00      	cmp	r3, #0
    6078:	d1f0      	bne.n	605c <memset+0x80>
	}
	return dest;
    607a:	68fb      	ldr	r3, [r7, #12]
}
    607c:	4618      	mov	r0, r3
    607e:	f107 0724 	add.w	r7, r7, #36	; 0x24
    6082:	46bd      	mov	sp, r7
    6084:	bc80      	pop	{r7}
    6086:	4770      	bx	lr

00006088 <memcpy>:

void *memcpy(void *dest, const void *src, size_t n)
{
    6088:	b480      	push	{r7}
    608a:	b08b      	sub	sp, #44	; 0x2c
    608c:	af00      	add	r7, sp, #0
    608e:	60f8      	str	r0, [r7, #12]
    6090:	60b9      	str	r1, [r7, #8]
    6092:	607a      	str	r2, [r7, #4]
	void *ret = dest;
    6094:	68fb      	ldr	r3, [r7, #12]
    6096:	617b      	str	r3, [r7, #20]
	
	//Cut rear
	uint8_t *dst8 = dest;
    6098:	68fb      	ldr	r3, [r7, #12]
    609a:	627b      	str	r3, [r7, #36]	; 0x24
	const uint8_t *src8 = src;
    609c:	68bb      	ldr	r3, [r7, #8]
    609e:	623b      	str	r3, [r7, #32]
	switch (n % 4) {
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	f003 0303 	and.w	r3, r3, #3
    60a6:	2b02      	cmp	r3, #2
    60a8:	d010      	beq.n	60cc <memcpy+0x44>
    60aa:	2b03      	cmp	r3, #3
    60ac:	d002      	beq.n	60b4 <memcpy+0x2c>
    60ae:	2b01      	cmp	r3, #1
    60b0:	d018      	beq.n	60e4 <memcpy+0x5c>
    60b2:	e023      	b.n	60fc <memcpy+0x74>
		case 3 : *dst8++ = *src8++;
    60b4:	6a3b      	ldr	r3, [r7, #32]
    60b6:	781a      	ldrb	r2, [r3, #0]
    60b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60ba:	701a      	strb	r2, [r3, #0]
    60bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60be:	f103 0301 	add.w	r3, r3, #1
    60c2:	627b      	str	r3, [r7, #36]	; 0x24
    60c4:	6a3b      	ldr	r3, [r7, #32]
    60c6:	f103 0301 	add.w	r3, r3, #1
    60ca:	623b      	str	r3, [r7, #32]
		case 2 : *dst8++ = *src8++;
    60cc:	6a3b      	ldr	r3, [r7, #32]
    60ce:	781a      	ldrb	r2, [r3, #0]
    60d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60d2:	701a      	strb	r2, [r3, #0]
    60d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60d6:	f103 0301 	add.w	r3, r3, #1
    60da:	627b      	str	r3, [r7, #36]	; 0x24
    60dc:	6a3b      	ldr	r3, [r7, #32]
    60de:	f103 0301 	add.w	r3, r3, #1
    60e2:	623b      	str	r3, [r7, #32]
		case 1 : *dst8++ = *src8++;
    60e4:	6a3b      	ldr	r3, [r7, #32]
    60e6:	781a      	ldrb	r2, [r3, #0]
    60e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60ea:	701a      	strb	r2, [r3, #0]
    60ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60ee:	f103 0301 	add.w	r3, r3, #1
    60f2:	627b      	str	r3, [r7, #36]	; 0x24
    60f4:	6a3b      	ldr	r3, [r7, #32]
    60f6:	f103 0301 	add.w	r3, r3, #1
    60fa:	623b      	str	r3, [r7, #32]
		case 0 : ;
	}
	
	//stm32 data bus width
	uint32_t *dst32 = (void *)dst8;
    60fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    60fe:	61fb      	str	r3, [r7, #28]
	const uint32_t *src32 = (void *)src8;
    6100:	6a3b      	ldr	r3, [r7, #32]
    6102:	61bb      	str	r3, [r7, #24]
	n = n / 4;
    6104:	687b      	ldr	r3, [r7, #4]
    6106:	ea4f 0393 	mov.w	r3, r3, lsr #2
    610a:	607b      	str	r3, [r7, #4]
	while (n--) {
    610c:	e00b      	b.n	6126 <memcpy+0x9e>
		*dst32++ = *src32++;
    610e:	69bb      	ldr	r3, [r7, #24]
    6110:	681a      	ldr	r2, [r3, #0]
    6112:	69fb      	ldr	r3, [r7, #28]
    6114:	601a      	str	r2, [r3, #0]
    6116:	69fb      	ldr	r3, [r7, #28]
    6118:	f103 0304 	add.w	r3, r3, #4
    611c:	61fb      	str	r3, [r7, #28]
    611e:	69bb      	ldr	r3, [r7, #24]
    6120:	f103 0304 	add.w	r3, r3, #4
    6124:	61bb      	str	r3, [r7, #24]
	
	//stm32 data bus width
	uint32_t *dst32 = (void *)dst8;
	const uint32_t *src32 = (void *)src8;
	n = n / 4;
	while (n--) {
    6126:	687b      	ldr	r3, [r7, #4]
    6128:	2b00      	cmp	r3, #0
    612a:	bf0c      	ite	eq
    612c:	2300      	moveq	r3, #0
    612e:	2301      	movne	r3, #1
    6130:	b2db      	uxtb	r3, r3
    6132:	687a      	ldr	r2, [r7, #4]
    6134:	f102 32ff 	add.w	r2, r2, #4294967295
    6138:	607a      	str	r2, [r7, #4]
    613a:	2b00      	cmp	r3, #0
    613c:	d1e7      	bne.n	610e <memcpy+0x86>
		*dst32++ = *src32++;
	}
	
	return ret;
    613e:	697b      	ldr	r3, [r7, #20]
}
    6140:	4618      	mov	r0, r3
    6142:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    6146:	46bd      	mov	sp, r7
    6148:	bc80      	pop	{r7}
    614a:	4770      	bx	lr

0000614c <strchr>:

char *strchr(const char *s, int c)
{
    614c:	b480      	push	{r7}
    614e:	b083      	sub	sp, #12
    6150:	af00      	add	r7, sp, #0
    6152:	6078      	str	r0, [r7, #4]
    6154:	6039      	str	r1, [r7, #0]
	for (; *s && *s != c; s++);
    6156:	e003      	b.n	6160 <strchr+0x14>
    6158:	687b      	ldr	r3, [r7, #4]
    615a:	f103 0301 	add.w	r3, r3, #1
    615e:	607b      	str	r3, [r7, #4]
    6160:	687b      	ldr	r3, [r7, #4]
    6162:	781b      	ldrb	r3, [r3, #0]
    6164:	2b00      	cmp	r3, #0
    6166:	d005      	beq.n	6174 <strchr+0x28>
    6168:	687b      	ldr	r3, [r7, #4]
    616a:	781b      	ldrb	r3, [r3, #0]
    616c:	461a      	mov	r2, r3
    616e:	683b      	ldr	r3, [r7, #0]
    6170:	429a      	cmp	r2, r3
    6172:	d1f1      	bne.n	6158 <strchr+0xc>
	return (*s == c) ? (char *)s : NULL;
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	781b      	ldrb	r3, [r3, #0]
    6178:	461a      	mov	r2, r3
    617a:	683b      	ldr	r3, [r7, #0]
    617c:	429a      	cmp	r2, r3
    617e:	d101      	bne.n	6184 <strchr+0x38>
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	e001      	b.n	6188 <strchr+0x3c>
    6184:	f04f 0300 	mov.w	r3, #0
}
    6188:	4618      	mov	r0, r3
    618a:	f107 070c 	add.w	r7, r7, #12
    618e:	46bd      	mov	sp, r7
    6190:	bc80      	pop	{r7}
    6192:	4770      	bx	lr

00006194 <strcpy>:

char *strcpy(char *dest, const char *src)
{
    6194:	b480      	push	{r7}
    6196:	b085      	sub	sp, #20
    6198:	af00      	add	r7, sp, #0
    619a:	6078      	str	r0, [r7, #4]
    619c:	6039      	str	r1, [r7, #0]
	const unsigned char *s = src;
    619e:	683b      	ldr	r3, [r7, #0]
    61a0:	60fb      	str	r3, [r7, #12]
	unsigned char *d = dest;
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	60bb      	str	r3, [r7, #8]
	while ((*d++ = *s++));
    61a6:	bf00      	nop
    61a8:	68fb      	ldr	r3, [r7, #12]
    61aa:	781a      	ldrb	r2, [r3, #0]
    61ac:	68bb      	ldr	r3, [r7, #8]
    61ae:	701a      	strb	r2, [r3, #0]
    61b0:	68bb      	ldr	r3, [r7, #8]
    61b2:	781b      	ldrb	r3, [r3, #0]
    61b4:	2b00      	cmp	r3, #0
    61b6:	bf0c      	ite	eq
    61b8:	2300      	moveq	r3, #0
    61ba:	2301      	movne	r3, #1
    61bc:	b2db      	uxtb	r3, r3
    61be:	68ba      	ldr	r2, [r7, #8]
    61c0:	f102 0201 	add.w	r2, r2, #1
    61c4:	60ba      	str	r2, [r7, #8]
    61c6:	68fa      	ldr	r2, [r7, #12]
    61c8:	f102 0201 	add.w	r2, r2, #1
    61cc:	60fa      	str	r2, [r7, #12]
    61ce:	2b00      	cmp	r3, #0
    61d0:	d1ea      	bne.n	61a8 <strcpy+0x14>
	return dest;
    61d2:	687b      	ldr	r3, [r7, #4]
}
    61d4:	4618      	mov	r0, r3
    61d6:	f107 0714 	add.w	r7, r7, #20
    61da:	46bd      	mov	sp, r7
    61dc:	bc80      	pop	{r7}
    61de:	4770      	bx	lr

000061e0 <strncpy>:

char *strncpy(char *dest, const char *src, size_t n)
{
    61e0:	b480      	push	{r7}
    61e2:	b087      	sub	sp, #28
    61e4:	af00      	add	r7, sp, #0
    61e6:	60f8      	str	r0, [r7, #12]
    61e8:	60b9      	str	r1, [r7, #8]
    61ea:	607a      	str	r2, [r7, #4]
	const unsigned char *s = src;
    61ec:	68bb      	ldr	r3, [r7, #8]
    61ee:	617b      	str	r3, [r7, #20]
	unsigned char *d = dest;
    61f0:	68fb      	ldr	r3, [r7, #12]
    61f2:	613b      	str	r3, [r7, #16]
	while (n-- && (*d++ = *s++));
    61f4:	bf00      	nop
    61f6:	687b      	ldr	r3, [r7, #4]
    61f8:	2b00      	cmp	r3, #0
    61fa:	bf0c      	ite	eq
    61fc:	2300      	moveq	r3, #0
    61fe:	2301      	movne	r3, #1
    6200:	b2db      	uxtb	r3, r3
    6202:	687a      	ldr	r2, [r7, #4]
    6204:	f102 32ff 	add.w	r2, r2, #4294967295
    6208:	607a      	str	r2, [r7, #4]
    620a:	2b00      	cmp	r3, #0
    620c:	d014      	beq.n	6238 <strncpy+0x58>
    620e:	697b      	ldr	r3, [r7, #20]
    6210:	781a      	ldrb	r2, [r3, #0]
    6212:	693b      	ldr	r3, [r7, #16]
    6214:	701a      	strb	r2, [r3, #0]
    6216:	693b      	ldr	r3, [r7, #16]
    6218:	781b      	ldrb	r3, [r3, #0]
    621a:	2b00      	cmp	r3, #0
    621c:	bf0c      	ite	eq
    621e:	2300      	moveq	r3, #0
    6220:	2301      	movne	r3, #1
    6222:	b2db      	uxtb	r3, r3
    6224:	693a      	ldr	r2, [r7, #16]
    6226:	f102 0201 	add.w	r2, r2, #1
    622a:	613a      	str	r2, [r7, #16]
    622c:	697a      	ldr	r2, [r7, #20]
    622e:	f102 0201 	add.w	r2, r2, #1
    6232:	617a      	str	r2, [r7, #20]
    6234:	2b00      	cmp	r3, #0
    6236:	d1de      	bne.n	61f6 <strncpy+0x16>
	return dest;
    6238:	68fb      	ldr	r3, [r7, #12]
}
    623a:	4618      	mov	r0, r3
    623c:	f107 071c 	add.w	r7, r7, #28
    6240:	46bd      	mov	sp, r7
    6242:	bc80      	pop	{r7}
    6244:	4770      	bx	lr
    6246:	bf00      	nop

00006248 <strlen>:

size_t strlen(const char *s)
{
    6248:	b480      	push	{r7}
    624a:	b085      	sub	sp, #20
    624c:	af00      	add	r7, sp, #0
    624e:	6078      	str	r0, [r7, #4]
        const char *a = s;
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	60bb      	str	r3, [r7, #8]
        const size_t *w;
        for (; (uintptr_t) s % ALIGN; s++)
    6254:	e00b      	b.n	626e <strlen+0x26>
                if (!*s) return (s - a);
    6256:	687b      	ldr	r3, [r7, #4]
    6258:	781b      	ldrb	r3, [r3, #0]
    625a:	2b00      	cmp	r3, #0
    625c:	d103      	bne.n	6266 <strlen+0x1e>
    625e:	687a      	ldr	r2, [r7, #4]
    6260:	68bb      	ldr	r3, [r7, #8]
    6262:	1ad3      	subs	r3, r2, r3
    6264:	e02a      	b.n	62bc <strlen+0x74>

size_t strlen(const char *s)
{
        const char *a = s;
        const size_t *w;
        for (; (uintptr_t) s % ALIGN; s++)
    6266:	687b      	ldr	r3, [r7, #4]
    6268:	f103 0301 	add.w	r3, r3, #1
    626c:	607b      	str	r3, [r7, #4]
    626e:	687b      	ldr	r3, [r7, #4]
    6270:	f003 0303 	and.w	r3, r3, #3
    6274:	2b00      	cmp	r3, #0
    6276:	d1ee      	bne.n	6256 <strlen+0xe>
                if (!*s) return (s - a);
	for (w = (const void *) s; !HASZERO(*w); w++);
    6278:	687b      	ldr	r3, [r7, #4]
    627a:	60fb      	str	r3, [r7, #12]
    627c:	e003      	b.n	6286 <strlen+0x3e>
    627e:	68fb      	ldr	r3, [r7, #12]
    6280:	f103 0304 	add.w	r3, r3, #4
    6284:	60fb      	str	r3, [r7, #12]
    6286:	68fb      	ldr	r3, [r7, #12]
    6288:	681b      	ldr	r3, [r3, #0]
    628a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    628e:	68fb      	ldr	r3, [r7, #12]
    6290:	681b      	ldr	r3, [r3, #0]
    6292:	ea6f 0303 	mvn.w	r3, r3
    6296:	4013      	ands	r3, r2
    6298:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
    629c:	2b00      	cmp	r3, #0
    629e:	d0ee      	beq.n	627e <strlen+0x36>
	for (s = (const void *) w; *s; s++);	
    62a0:	68fb      	ldr	r3, [r7, #12]
    62a2:	607b      	str	r3, [r7, #4]
    62a4:	e003      	b.n	62ae <strlen+0x66>
    62a6:	687b      	ldr	r3, [r7, #4]
    62a8:	f103 0301 	add.w	r3, r3, #1
    62ac:	607b      	str	r3, [r7, #4]
    62ae:	687b      	ldr	r3, [r7, #4]
    62b0:	781b      	ldrb	r3, [r3, #0]
    62b2:	2b00      	cmp	r3, #0
    62b4:	d1f7      	bne.n	62a6 <strlen+0x5e>
	return (s - a);
    62b6:	687a      	ldr	r2, [r7, #4]
    62b8:	68bb      	ldr	r3, [r7, #8]
    62ba:	1ad3      	subs	r3, r2, r3
}
    62bc:	4618      	mov	r0, r3
    62be:	f107 0714 	add.w	r7, r7, #20
    62c2:	46bd      	mov	sp, r7
    62c4:	bc80      	pop	{r7}
    62c6:	4770      	bx	lr

000062c8 <strncmp>:

int strncmp(const char *s1, const char *s2, size_t n)
{
    62c8:	b480      	push	{r7}
    62ca:	b085      	sub	sp, #20
    62cc:	af00      	add	r7, sp, #0
    62ce:	60f8      	str	r0, [r7, #12]
    62d0:	60b9      	str	r1, [r7, #8]
    62d2:	607a      	str	r2, [r7, #4]
    for ( ; n > 0; s1++, s2++, --n)
    62d4:	e024      	b.n	6320 <strncmp+0x58>
	if (*s1 != *s2)
    62d6:	68fb      	ldr	r3, [r7, #12]
    62d8:	781a      	ldrb	r2, [r3, #0]
    62da:	68bb      	ldr	r3, [r7, #8]
    62dc:	781b      	ldrb	r3, [r3, #0]
    62de:	429a      	cmp	r2, r3
    62e0:	d00b      	beq.n	62fa <strncmp+0x32>
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
    62e2:	68fb      	ldr	r3, [r7, #12]
    62e4:	781a      	ldrb	r2, [r3, #0]
    62e6:	68bb      	ldr	r3, [r7, #8]
    62e8:	781b      	ldrb	r3, [r3, #0]
    62ea:	429a      	cmp	r2, r3
    62ec:	d202      	bcs.n	62f4 <strncmp+0x2c>
    62ee:	f04f 33ff 	mov.w	r3, #4294967295
    62f2:	e001      	b.n	62f8 <strncmp+0x30>
    62f4:	f04f 0301 	mov.w	r3, #1
    62f8:	e017      	b.n	632a <strncmp+0x62>
	else if (*s1 == '\0')
    62fa:	68fb      	ldr	r3, [r7, #12]
    62fc:	781b      	ldrb	r3, [r3, #0]
    62fe:	2b00      	cmp	r3, #0
    6300:	d102      	bne.n	6308 <strncmp+0x40>
	    return 0;
    6302:	f04f 0300 	mov.w	r3, #0
    6306:	e010      	b.n	632a <strncmp+0x62>
	return (s - a);
}

int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
    6308:	68fb      	ldr	r3, [r7, #12]
    630a:	f103 0301 	add.w	r3, r3, #1
    630e:	60fb      	str	r3, [r7, #12]
    6310:	68bb      	ldr	r3, [r7, #8]
    6312:	f103 0301 	add.w	r3, r3, #1
    6316:	60bb      	str	r3, [r7, #8]
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	f103 33ff 	add.w	r3, r3, #4294967295
    631e:	607b      	str	r3, [r7, #4]
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	2b00      	cmp	r3, #0
    6324:	d1d7      	bne.n	62d6 <strncmp+0xe>
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
    6326:	f04f 0300 	mov.w	r3, #0
}
    632a:	4618      	mov	r0, r3
    632c:	f107 0714 	add.w	r7, r7, #20
    6330:	46bd      	mov	sp, r7
    6332:	bc80      	pop	{r7}
    6334:	4770      	bx	lr
    6336:	bf00      	nop

00006338 <strcat>:

char * strcat ( char * destination, const char * source )
{
    6338:	b580      	push	{r7, lr}
    633a:	b086      	sub	sp, #24
    633c:	af00      	add	r7, sp, #0
    633e:	6078      	str	r0, [r7, #4]
    6340:	6039      	str	r1, [r7, #0]
    int dLength = strlen(destination);
    6342:	6878      	ldr	r0, [r7, #4]
    6344:	f7ff ff80 	bl	6248 <strlen>
    6348:	4603      	mov	r3, r0
    634a:	613b      	str	r3, [r7, #16]
    int sLength = strlen(source);
    634c:	6838      	ldr	r0, [r7, #0]
    634e:	f7ff ff7b 	bl	6248 <strlen>
    6352:	4603      	mov	r3, r0
    6354:	60fb      	str	r3, [r7, #12]
    int i;
    for (i = 0; i<sLength; i++)
    6356:	f04f 0300 	mov.w	r3, #0
    635a:	617b      	str	r3, [r7, #20]
    635c:	e00d      	b.n	637a <strcat+0x42>
    {
        destination[i+dLength]=source[i];
    635e:	697a      	ldr	r2, [r7, #20]
    6360:	693b      	ldr	r3, [r7, #16]
    6362:	18d3      	adds	r3, r2, r3
    6364:	687a      	ldr	r2, [r7, #4]
    6366:	18d3      	adds	r3, r2, r3
    6368:	697a      	ldr	r2, [r7, #20]
    636a:	6839      	ldr	r1, [r7, #0]
    636c:	188a      	adds	r2, r1, r2
    636e:	7812      	ldrb	r2, [r2, #0]
    6370:	701a      	strb	r2, [r3, #0]
char * strcat ( char * destination, const char * source )
{
    int dLength = strlen(destination);
    int sLength = strlen(source);
    int i;
    for (i = 0; i<sLength; i++)
    6372:	697b      	ldr	r3, [r7, #20]
    6374:	f103 0301 	add.w	r3, r3, #1
    6378:	617b      	str	r3, [r7, #20]
    637a:	697a      	ldr	r2, [r7, #20]
    637c:	68fb      	ldr	r3, [r7, #12]
    637e:	429a      	cmp	r2, r3
    6380:	dbed      	blt.n	635e <strcat+0x26>
    {
        destination[i+dLength]=source[i];
    }
    destination[dLength+sLength]='\0';
    6382:	693a      	ldr	r2, [r7, #16]
    6384:	68fb      	ldr	r3, [r7, #12]
    6386:	18d3      	adds	r3, r2, r3
    6388:	687a      	ldr	r2, [r7, #4]
    638a:	18d3      	adds	r3, r2, r3
    638c:	f04f 0200 	mov.w	r2, #0
    6390:	701a      	strb	r2, [r3, #0]
    return destination;
    6392:	687b      	ldr	r3, [r7, #4]
}
    6394:	4618      	mov	r0, r3
    6396:	f107 0718 	add.w	r7, r7, #24
    639a:	46bd      	mov	sp, r7
    639c:	bd80      	pop	{r7, pc}
    639e:	bf00      	nop

000063a0 <itoa>:

/*Ref andy79923*/
/*Support the sprintf*/
char* itoa(int value, char* str)
{
    63a0:	b480      	push	{r7}
    63a2:	b087      	sub	sp, #28
    63a4:	af00      	add	r7, sp, #0
    63a6:	6078      	str	r0, [r7, #4]
    63a8:	6039      	str	r1, [r7, #0]
    int base = 10;
    63aa:	f04f 030a 	mov.w	r3, #10
    63ae:	60fb      	str	r3, [r7, #12]
    int divideNum = base;
    63b0:	68fb      	ldr	r3, [r7, #12]
    63b2:	617b      	str	r3, [r7, #20]
    int i=0;
    63b4:	f04f 0300 	mov.w	r3, #0
    63b8:	613b      	str	r3, [r7, #16]
    while(value/divideNum > 0)
    63ba:	e004      	b.n	63c6 <itoa+0x26>
    {
        divideNum*=base;
    63bc:	697b      	ldr	r3, [r7, #20]
    63be:	68fa      	ldr	r2, [r7, #12]
    63c0:	fb02 f303 	mul.w	r3, r2, r3
    63c4:	617b      	str	r3, [r7, #20]
char* itoa(int value, char* str)
{
    int base = 10;
    int divideNum = base;
    int i=0;
    while(value/divideNum > 0)
    63c6:	687a      	ldr	r2, [r7, #4]
    63c8:	697b      	ldr	r3, [r7, #20]
    63ca:	fb92 f3f3 	sdiv	r3, r2, r3
    63ce:	2b00      	cmp	r3, #0
    63d0:	dcf4      	bgt.n	63bc <itoa+0x1c>
    {
        divideNum*=base;
    }
    if(value < 0)
    63d2:	687b      	ldr	r3, [r7, #4]
    63d4:	2b00      	cmp	r3, #0
    63d6:	da27      	bge.n	6428 <itoa+0x88>
    {
        str[0] = '-';
    63d8:	683b      	ldr	r3, [r7, #0]
    63da:	f04f 022d 	mov.w	r2, #45	; 0x2d
    63de:	701a      	strb	r2, [r3, #0]
        i++;
    63e0:	693b      	ldr	r3, [r7, #16]
    63e2:	f103 0301 	add.w	r3, r3, #1
    63e6:	613b      	str	r3, [r7, #16]
    }
    while(divideNum/base > 0)
    63e8:	e01e      	b.n	6428 <itoa+0x88>
    {
        divideNum/=base;
    63ea:	697a      	ldr	r2, [r7, #20]
    63ec:	68fb      	ldr	r3, [r7, #12]
    63ee:	fb92 f3f3 	sdiv	r3, r2, r3
    63f2:	617b      	str	r3, [r7, #20]
        str[i++]=value/divideNum+48;
    63f4:	693b      	ldr	r3, [r7, #16]
    63f6:	683a      	ldr	r2, [r7, #0]
    63f8:	18d3      	adds	r3, r2, r3
    63fa:	6879      	ldr	r1, [r7, #4]
    63fc:	697a      	ldr	r2, [r7, #20]
    63fe:	fb91 f2f2 	sdiv	r2, r1, r2
    6402:	b2d2      	uxtb	r2, r2
    6404:	f102 0230 	add.w	r2, r2, #48	; 0x30
    6408:	b2d2      	uxtb	r2, r2
    640a:	701a      	strb	r2, [r3, #0]
    640c:	693b      	ldr	r3, [r7, #16]
    640e:	f103 0301 	add.w	r3, r3, #1
    6412:	613b      	str	r3, [r7, #16]
        value%=divideNum;
    6414:	687b      	ldr	r3, [r7, #4]
    6416:	697a      	ldr	r2, [r7, #20]
    6418:	fb93 f2f2 	sdiv	r2, r3, r2
    641c:	6979      	ldr	r1, [r7, #20]
    641e:	fb01 f202 	mul.w	r2, r1, r2
    6422:	1a9b      	subs	r3, r3, r2
    6424:	607b      	str	r3, [r7, #4]
    6426:	e000      	b.n	642a <itoa+0x8a>
    if(value < 0)
    {
        str[0] = '-';
        i++;
    }
    while(divideNum/base > 0)
    6428:	bf00      	nop
    642a:	697a      	ldr	r2, [r7, #20]
    642c:	68fb      	ldr	r3, [r7, #12]
    642e:	fb92 f3f3 	sdiv	r3, r2, r3
    6432:	2b00      	cmp	r3, #0
    6434:	dcd9      	bgt.n	63ea <itoa+0x4a>
    {
        divideNum/=base;
        str[i++]=value/divideNum+48;
        value%=divideNum;
    }
    str[i]='\0';
    6436:	693b      	ldr	r3, [r7, #16]
    6438:	683a      	ldr	r2, [r7, #0]
    643a:	18d3      	adds	r3, r2, r3
    643c:	f04f 0200 	mov.w	r2, #0
    6440:	701a      	strb	r2, [r3, #0]
    return str;
    6442:	683b      	ldr	r3, [r7, #0]

}
    6444:	4618      	mov	r0, r3
    6446:	f107 071c 	add.w	r7, r7, #28
    644a:	46bd      	mov	sp, r7
    644c:	bc80      	pop	{r7}
    644e:	4770      	bx	lr

00006450 <USART2_IRQHandler>:
volatile xQueueHandle serial_rx_queue = NULL;

/* IRQ handler to handle USART2 interruptss (both transmit and receive
 * interrupts). */
void USART2_IRQHandler()
{
    6450:	b580      	push	{r7, lr}
    6452:	b082      	sub	sp, #8
    6454:	af00      	add	r7, sp, #0
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	char rx_msg;
	/* If this interrupt is for a transmit... */
	if (USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
    6456:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    645a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    645e:	f240 7127 	movw	r1, #1831	; 0x727
    6462:	f7fb fe49 	bl	20f8 <USART_GetITStatus>
    6466:	4603      	mov	r3, r0
    6468:	2b00      	cmp	r3, #0
    646a:	d01a      	beq.n	64a2 <USART2_IRQHandler+0x52>
		/* "give" the serial_tx_wait_sem semaphore to notfiy processes
		 * that the buffer has a spot free for the next byte.
		 */
		xSemaphoreGiveFromISR(serial_tx_wait_sem, &xHigherPriorityTaskWoken);
    646c:	f644 233c 	movw	r3, #19004	; 0x4a3c
    6470:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6474:	681b      	ldr	r3, [r3, #0]
    6476:	4618      	mov	r0, r3
    6478:	f04f 0100 	mov.w	r1, #0
    647c:	f644 2244 	movw	r2, #19012	; 0x4a44
    6480:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6484:	f04f 0300 	mov.w	r3, #0
    6488:	f7fc fe1c 	bl	30c4 <xQueueGenericSendFromISR>

		/* Diables the transmit interrupt. */
		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    648c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    6490:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6494:	f240 7127 	movw	r1, #1831	; 0x727
    6498:	f04f 0200 	mov.w	r2, #0
    649c:	f7fb fb9e 	bl	1bdc <USART_ITConfig>
    64a0:	e029      	b.n	64f6 <USART2_IRQHandler+0xa6>
		/* If this interrupt is for a receive... */
	}
        else if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
    64a2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    64a6:	f2c4 0000 	movt	r0, #16384	; 0x4000
    64aa:	f240 5125 	movw	r1, #1317	; 0x525
    64ae:	f7fb fe23 	bl	20f8 <USART_GetITStatus>
    64b2:	4603      	mov	r3, r0
    64b4:	2b00      	cmp	r3, #0
    64b6:	d01d      	beq.n	64f4 <USART2_IRQHandler+0xa4>
                /* Receive the byte from the buffer. */
                rx_msg = USART_ReceiveData(USART2);
    64b8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    64bc:	f2c4 0000 	movt	r0, #16384	; 0x4000
    64c0:	f7fb fcaa 	bl	1e18 <USART_ReceiveData>
    64c4:	4603      	mov	r3, r0
    64c6:	b2db      	uxtb	r3, r3
    64c8:	71fb      	strb	r3, [r7, #7]

                /* Queue the received byte. */
                if(!xQueueSendToBackFromISR(serial_rx_queue, &rx_msg, &xHigherPriorityTaskWoken)) {
    64ca:	f644 2340 	movw	r3, #19008	; 0x4a40
    64ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64d2:	681b      	ldr	r3, [r3, #0]
    64d4:	4618      	mov	r0, r3
    64d6:	f107 0307 	add.w	r3, r7, #7
    64da:	4619      	mov	r1, r3
    64dc:	f644 2244 	movw	r2, #19012	; 0x4a44
    64e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    64e4:	f04f 0300 	mov.w	r3, #0
    64e8:	f7fc fdec 	bl	30c4 <xQueueGenericSendFromISR>
    64ec:	4603      	mov	r3, r0
    64ee:	2b00      	cmp	r3, #0
    64f0:	d101      	bne.n	64f6 <USART2_IRQHandler+0xa6>
                        /* If there was an error queueing the received byte,
                         * freeze. */
                        while(1);
    64f2:	e7fe      	b.n	64f2 <USART2_IRQHandler+0xa2>

	else {
		/* Only transmit and receive interrupts should be enabled.
		 * If this is another type of interrupt, freeze.
		 */
		while(1);
    64f4:	e7fe      	b.n	64f4 <USART2_IRQHandler+0xa4>
	}

	if (xHigherPriorityTaskWoken) {
    64f6:	f644 2344 	movw	r3, #19012	; 0x4a44
    64fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64fe:	681b      	ldr	r3, [r3, #0]
    6500:	2b00      	cmp	r3, #0
    6502:	d001      	beq.n	6508 <USART2_IRQHandler+0xb8>
		taskYIELD();
    6504:	f7fe fc10 	bl	4d28 <vPortYieldFromISR>
	}
}
    6508:	f107 0708 	add.w	r7, r7, #8
    650c:	46bd      	mov	sp, r7
    650e:	bd80      	pop	{r7, pc}

00006510 <send_byte>:

void send_byte(char ch)
{
    6510:	b580      	push	{r7, lr}
    6512:	b082      	sub	sp, #8
    6514:	af00      	add	r7, sp, #0
    6516:	4603      	mov	r3, r0
    6518:	71fb      	strb	r3, [r7, #7]
	/* Wait until the RS232 port can receive another byte (this semaphore
	 * is "given" by the RS232 port interrupt when the buffer has room for
	 * another byte.
	 */
	while (!xSemaphoreTake(serial_tx_wait_sem, portMAX_DELAY));
    651a:	bf00      	nop
    651c:	f644 233c 	movw	r3, #19004	; 0x4a3c
    6520:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6524:	681b      	ldr	r3, [r3, #0]
    6526:	4618      	mov	r0, r3
    6528:	f04f 0100 	mov.w	r1, #0
    652c:	f04f 32ff 	mov.w	r2, #4294967295
    6530:	f04f 0300 	mov.w	r3, #0
    6534:	f7fc fe0e 	bl	3154 <xQueueGenericReceive>
    6538:	4603      	mov	r3, r0
    653a:	2b00      	cmp	r3, #0
    653c:	d0ee      	beq.n	651c <send_byte+0xc>

	/* Send the byte and enable the transmit interrupt (it is disabled by
	 * the interrupt).
	 */
	USART_SendData(USART2, ch);
    653e:	79fb      	ldrb	r3, [r7, #7]
    6540:	b29b      	uxth	r3, r3
    6542:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    6546:	f2c4 0000 	movt	r0, #16384	; 0x4000
    654a:	4619      	mov	r1, r3
    654c:	f7fb fc50 	bl	1df0 <USART_SendData>
	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    6550:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    6554:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6558:	f240 7127 	movw	r1, #1831	; 0x727
    655c:	f04f 0201 	mov.w	r2, #1
    6560:	f7fb fb3c 	bl	1bdc <USART_ITConfig>
}
    6564:	f107 0708 	add.w	r7, r7, #8
    6568:	46bd      	mov	sp, r7
    656a:	bd80      	pop	{r7, pc}

0000656c <receive_byte>:

char receive_byte()
{
    656c:	b580      	push	{r7, lr}
    656e:	b082      	sub	sp, #8
    6570:	af00      	add	r7, sp, #0
	char msg;

	/* Wait for a byte to be queued by the receive interrupts handler. */
	while (!xQueueReceive(serial_rx_queue, &msg, portMAX_DELAY));
    6572:	bf00      	nop
    6574:	f644 2340 	movw	r3, #19008	; 0x4a40
    6578:	f2c2 0300 	movt	r3, #8192	; 0x2000
    657c:	681b      	ldr	r3, [r3, #0]
    657e:	4618      	mov	r0, r3
    6580:	f107 0307 	add.w	r3, r7, #7
    6584:	4619      	mov	r1, r3
    6586:	f04f 32ff 	mov.w	r2, #4294967295
    658a:	f04f 0300 	mov.w	r3, #0
    658e:	f7fc fde1 	bl	3154 <xQueueGenericReceive>
    6592:	4603      	mov	r3, r0
    6594:	2b00      	cmp	r3, #0
    6596:	d0ed      	beq.n	6574 <receive_byte+0x8>
	return msg;
    6598:	79fb      	ldrb	r3, [r7, #7]
}
    659a:	4618      	mov	r0, r3
    659c:	f107 0708 	add.w	r7, r7, #8
    65a0:	46bd      	mov	sp, r7
    65a2:	bd80      	pop	{r7, pc}

000065a4 <ShellTask_Command>:
		Print("Transmit the command to semihost.");
	}
}
*/
void ShellTask_Command(char *str)
{		
    65a4:	b5b0      	push	{r4, r5, r7, lr}
    65a6:	b0a0      	sub	sp, #128	; 0x80
    65a8:	af00      	add	r7, sp, #0
    65aa:	6078      	str	r0, [r7, #4]
	char tmp[20];
	char i;
	if(!strncmp(str,"hello", 5)) {           
    65ac:	6878      	ldr	r0, [r7, #4]
    65ae:	f646 31d0 	movw	r1, #27600	; 0x6bd0
    65b2:	f2c0 0100 	movt	r1, #0
    65b6:	f04f 0205 	mov.w	r2, #5
    65ba:	f7ff fe85 	bl	62c8 <strncmp>
    65be:	4603      	mov	r3, r0
    65c0:	2b00      	cmp	r3, #0
    65c2:	d106      	bne.n	65d2 <ShellTask_Command+0x2e>
		Print("Hello! how are you?");
    65c4:	f646 30d8 	movw	r0, #27608	; 0x6bd8
    65c8:	f2c0 0000 	movt	r0, #0
    65cc:	f7ff fca6 	bl	5f1c <Print>
    65d0:	e0ab      	b.n	672a <ShellTask_Command+0x186>
	}
	else if(!strncmp(str,"echo", 4)&&(strlen(str)==4)||str[4]==' '){
    65d2:	6878      	ldr	r0, [r7, #4]
    65d4:	f646 31ec 	movw	r1, #27628	; 0x6bec
    65d8:	f2c0 0100 	movt	r1, #0
    65dc:	f04f 0204 	mov.w	r2, #4
    65e0:	f7ff fe72 	bl	62c8 <strncmp>
    65e4:	4603      	mov	r3, r0
    65e6:	2b00      	cmp	r3, #0
    65e8:	d105      	bne.n	65f6 <ShellTask_Command+0x52>
    65ea:	6878      	ldr	r0, [r7, #4]
    65ec:	f7ff fe2c 	bl	6248 <strlen>
    65f0:	4603      	mov	r3, r0
    65f2:	2b04      	cmp	r3, #4
    65f4:	d005      	beq.n	6602 <ShellTask_Command+0x5e>
    65f6:	687b      	ldr	r3, [r7, #4]
    65f8:	f103 0304 	add.w	r3, r3, #4
    65fc:	781b      	ldrb	r3, [r3, #0]
    65fe:	2b20      	cmp	r3, #32
    6600:	d12e      	bne.n	6660 <ShellTask_Command+0xbc>
		if(strlen(str)==4){
    6602:	6878      	ldr	r0, [r7, #4]
    6604:	f7ff fe20 	bl	6248 <strlen>
    6608:	4603      	mov	r3, r0
    660a:	2b04      	cmp	r3, #4
    660c:	d102      	bne.n	6614 <ShellTask_Command+0x70>
			Print_nextLine();
    660e:	f7ff fcb9 	bl	5f84 <Print_nextLine>
	char i;
	if(!strncmp(str,"hello", 5)) {           
		Print("Hello! how are you?");
	}
	else if(!strncmp(str,"echo", 4)&&(strlen(str)==4)||str[4]==' '){
		if(strlen(str)==4){
    6612:	e08a      	b.n	672a <ShellTask_Command+0x186>
			Print_nextLine();
		}
		else {
			for(i=5;i<strlen(str);i++){
    6614:	f04f 0305 	mov.w	r3, #5
    6618:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    661c:	e015      	b.n	664a <ShellTask_Command+0xa6>
				tmp[0]=str[i];
    661e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
    6622:	687a      	ldr	r2, [r7, #4]
    6624:	18d3      	adds	r3, r2, r3
    6626:	781b      	ldrb	r3, [r3, #0]
    6628:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
				tmp[1]='\0';
    662c:	f04f 0300 	mov.w	r3, #0
    6630:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
				Puts(&tmp);
    6634:	f107 0368 	add.w	r3, r7, #104	; 0x68
    6638:	4618      	mov	r0, r3
    663a:	f7ff fc57 	bl	5eec <Puts>
	else if(!strncmp(str,"echo", 4)&&(strlen(str)==4)||str[4]==' '){
		if(strlen(str)==4){
			Print_nextLine();
		}
		else {
			for(i=5;i<strlen(str);i++){
    663e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
    6642:	f103 0301 	add.w	r3, r3, #1
    6646:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    664a:	f897 407f 	ldrb.w	r4, [r7, #127]	; 0x7f
    664e:	6878      	ldr	r0, [r7, #4]
    6650:	f7ff fdfa 	bl	6248 <strlen>
    6654:	4603      	mov	r3, r0
    6656:	429c      	cmp	r4, r3
    6658:	d3e1      	bcc.n	661e <ShellTask_Command+0x7a>
				tmp[0]=str[i];
				tmp[1]='\0';
				Puts(&tmp);
			}
			Print_nextLine();
    665a:	f7ff fc93 	bl	5f84 <Print_nextLine>
	char i;
	if(!strncmp(str,"hello", 5)) {           
		Print("Hello! how are you?");
	}
	else if(!strncmp(str,"echo", 4)&&(strlen(str)==4)||str[4]==' '){
		if(strlen(str)==4){
    665e:	e064      	b.n	672a <ShellTask_Command+0x186>
				Puts(&tmp);
			}
			Print_nextLine();
		}
	}
	else if(!strncmp(str,"ps",2)){
    6660:	6878      	ldr	r0, [r7, #4]
    6662:	f646 31f4 	movw	r1, #27636	; 0x6bf4
    6666:	f2c0 0100 	movt	r1, #0
    666a:	f04f 0202 	mov.w	r2, #2
    666e:	f7ff fe2b 	bl	62c8 <strncmp>
    6672:	4603      	mov	r3, r0
    6674:	2b00      	cmp	r3, #0
    6676:	d120      	bne.n	66ba <ShellTask_Command+0x116>
		char title[]="Name\t\t\b\bState\t\b\b\bPriority\t\bStack\t\bNum";
    6678:	f646 4374 	movw	r3, #27764	; 0x6c74
    667c:	f2c0 0300 	movt	r3, #0
    6680:	f107 0440 	add.w	r4, r7, #64	; 0x40
    6684:	461d      	mov	r5, r3
    6686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    668a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    668c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    668e:	e895 0003 	ldmia.w	r5, {r0, r1}
    6692:	6020      	str	r0, [r4, #0]
    6694:	f104 0404 	add.w	r4, r4, #4
    6698:	8021      	strh	r1, [r4, #0]
		Puts(title);
    669a:	f107 0340 	add.w	r3, r7, #64	; 0x40
    669e:	4618      	mov	r0, r3
    66a0:	f7ff fc24 	bl	5eec <Puts>
		char catch[50];
		vTaskList(catch);
    66a4:	f107 030c 	add.w	r3, r7, #12
    66a8:	4618      	mov	r0, r3
    66aa:	f7fd fceb 	bl	4084 <vTaskList>
		Print(catch);
    66ae:	f107 030c 	add.w	r3, r7, #12
    66b2:	4618      	mov	r0, r3
    66b4:	f7ff fc32 	bl	5f1c <Print>
    66b8:	e037      	b.n	672a <ShellTask_Command+0x186>
	}
	else if(!strncmp(str,"help", 4)) {           
    66ba:	6878      	ldr	r0, [r7, #4]
    66bc:	f646 31f8 	movw	r1, #27640	; 0x6bf8
    66c0:	f2c0 0100 	movt	r1, #0
    66c4:	f04f 0204 	mov.w	r2, #4
    66c8:	f7ff fdfe 	bl	62c8 <strncmp>
    66cc:	4603      	mov	r3, r0
    66ce:	2b00      	cmp	r3, #0
    66d0:	d10c      	bne.n	66ec <ShellTask_Command+0x148>
		Print("You can use 4 command in the freeRTOS");	
    66d2:	f646 4000 	movw	r0, #27648	; 0x6c00
    66d6:	f2c0 0000 	movt	r0, #0
    66da:	f7ff fc1f 	bl	5f1c <Print>
		Print("hello , echo , ps , help");
    66de:	f646 4028 	movw	r0, #27688	; 0x6c28
    66e2:	f2c0 0000 	movt	r0, #0
    66e6:	f7ff fc19 	bl	5f1c <Print>
    66ea:	e01e      	b.n	672a <ShellTask_Command+0x186>
	}
	else if(!strncmp(str,"host",4)){
    66ec:	6878      	ldr	r0, [r7, #4]
    66ee:	f646 4144 	movw	r1, #27716	; 0x6c44
    66f2:	f2c0 0100 	movt	r1, #0
    66f6:	f04f 0204 	mov.w	r2, #4
    66fa:	f7ff fde5 	bl	62c8 <strncmp>
    66fe:	4603      	mov	r3, r0
    6700:	2b00      	cmp	r3, #0
    6702:	d10c      	bne.n	671e <ShellTask_Command+0x17a>
		//Host_command(str);
char host_cmd[32];
		host_system(host_cmd, strlen(host_cmd));
    6704:	f107 0340 	add.w	r3, r7, #64	; 0x40
    6708:	4618      	mov	r0, r3
    670a:	f7ff fd9d 	bl	6248 <strlen>
    670e:	4603      	mov	r3, r0
    6710:	f107 0240 	add.w	r2, r7, #64	; 0x40
    6714:	4610      	mov	r0, r2
    6716:	4619      	mov	r1, r3
    6718:	f000 f9da 	bl	6ad0 <host_system>
    671c:	e005      	b.n	672a <ShellTask_Command+0x186>
	}
	else{
		Print("Command not found, please input 'help'");
    671e:	f646 404c 	movw	r0, #27724	; 0x6c4c
    6722:	f2c0 0000 	movt	r0, #0
    6726:	f7ff fbf9 	bl	5f1c <Print>
	}
}
    672a:	f107 0780 	add.w	r7, r7, #128	; 0x80
    672e:	46bd      	mov	sp, r7
    6730:	bdb0      	pop	{r4, r5, r7, pc}
    6732:	bf00      	nop

00006734 <Shell>:
void Shell()
{
    6734:	b5b0      	push	{r4, r5, r7, lr}
    6736:	b0a2      	sub	sp, #136	; 0x88
    6738:	af00      	add	r7, sp, #0
	char str[MAX_SERIAL_STR];
	char ch;
	char pos[] = "zxc2694's RTOS~$ ";
    673a:	f646 43a0 	movw	r3, #27808	; 0x6ca0
    673e:	f2c0 0300 	movt	r3, #0
    6742:	f107 0408 	add.w	r4, r7, #8
    6746:	461d      	mov	r5, r3
    6748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    674a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    674c:	682b      	ldr	r3, [r5, #0]
    674e:	8023      	strh	r3, [r4, #0]
	char newLine[] = "\n\r";
    6750:	f646 42b4 	movw	r2, #27828	; 0x6cb4
    6754:	f2c0 0200 	movt	r2, #0
    6758:	f107 0304 	add.w	r3, r7, #4
    675c:	6812      	ldr	r2, [r2, #0]
    675e:	4611      	mov	r1, r2
    6760:	8019      	strh	r1, [r3, #0]
    6762:	f103 0302 	add.w	r3, r3, #2
    6766:	ea4f 4212 	mov.w	r2, r2, lsr #16
    676a:	701a      	strb	r2, [r3, #0]
    676c:	e000      	b.n	6770 <Shell+0x3c>
        fio_write(1, newLine, strlen(newLine));
        if(curr_char>0){
		/*This is my shell command*/
		ShellTask_Command(str);
	}
    }
    676e:	bf00      	nop
	char pos[] = "zxc2694's RTOS~$ ";
	char newLine[] = "\n\r";
	int curr_char, done;
	while (1)
    {
        fio_write(1, pos, strlen(pos));
    6770:	f107 0308 	add.w	r3, r7, #8
    6774:	4618      	mov	r0, r3
    6776:	f7ff fd67 	bl	6248 <strlen>
    677a:	4603      	mov	r3, r0
    677c:	f04f 0001 	mov.w	r0, #1
    6780:	f107 0208 	add.w	r2, r7, #8
    6784:	4611      	mov	r1, r2
    6786:	461a      	mov	r2, r3
    6788:	f7ff f948 	bl	5a1c <fio_write>
		curr_char = 0;
    678c:	f04f 0300 	mov.w	r3, #0
    6790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		done = 0;
    6794:	f04f 0300 	mov.w	r3, #0
    6798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		str[curr_char] = '\0';
    679c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    67a0:	f107 021c 	add.w	r2, r7, #28
    67a4:	18d3      	adds	r3, r2, r3
    67a6:	f04f 0200 	mov.w	r2, #0
    67aa:	701a      	strb	r2, [r3, #0]
		do
        {
			/* Receive a byte from the RS232 port (this call will
			 * block). */
            ch=receive_byte();
    67ac:	f7ff fede 	bl	656c <receive_byte>
    67b0:	4603      	mov	r3, r0
    67b2:	76fb      	strb	r3, [r7, #27]

			/* If the byte is an end-of-line type character, then
			 * finish the string and inidcate we are done.
			 */
			if (curr_char >= MAX_SERIAL_STR-1 || (ch == '\r') || (ch == '\n'))
    67b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    67b8:	2b62      	cmp	r3, #98	; 0x62
    67ba:	dc05      	bgt.n	67c8 <Shell+0x94>
    67bc:	7efb      	ldrb	r3, [r7, #27]
    67be:	2b0d      	cmp	r3, #13
    67c0:	d002      	beq.n	67c8 <Shell+0x94>
    67c2:	7efb      	ldrb	r3, [r7, #27]
    67c4:	2b0a      	cmp	r3, #10
    67c6:	d10c      	bne.n	67e2 <Shell+0xae>
            {
				str[curr_char] = '\0';
    67c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    67cc:	f107 021c 	add.w	r2, r7, #28
    67d0:	18d3      	adds	r3, r2, r3
    67d2:	f04f 0200 	mov.w	r2, #0
    67d6:	701a      	strb	r2, [r3, #0]
				done = -1;
    67d8:	f04f 33ff 	mov.w	r3, #4294967295
    67dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    67e0:	e05d      	b.n	689e <Shell+0x16a>
				/* Otherwise, add the character to the
				 * response string. */
			}
			else if(ch == 127)//press the backspace key
    67e2:	7efb      	ldrb	r3, [r7, #27]
    67e4:	2b7f      	cmp	r3, #127	; 0x7f
    67e6:	d114      	bne.n	6812 <Shell+0xde>
            {
                if(curr_char!=0)
    67e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    67ec:	2b00      	cmp	r3, #0
    67ee:	d056      	beq.n	689e <Shell+0x16a>
                {
                    curr_char--;
    67f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    67f4:	f103 33ff 	add.w	r3, r3, #4294967295
    67f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    fio_write(1,"\b \b", 3);
    67fc:	f04f 0001 	mov.w	r0, #1
    6800:	f646 419c 	movw	r1, #27804	; 0x6c9c
    6804:	f2c0 0100 	movt	r1, #0
    6808:	f04f 0203 	mov.w	r2, #3
    680c:	f7ff f906 	bl	5a1c <fio_write>
    6810:	e045      	b.n	689e <Shell+0x16a>
                }
            }
            else if(ch == 27)//press up, down, left, right, home, page up, delete, end, page down
    6812:	7efb      	ldrb	r3, [r7, #27]
    6814:	2b1b      	cmp	r3, #27
    6816:	d12c      	bne.n	6872 <Shell+0x13e>
            {
                ch=receive_byte();
    6818:	f7ff fea8 	bl	656c <receive_byte>
    681c:	4603      	mov	r3, r0
    681e:	76fb      	strb	r3, [r7, #27]
                if(ch != '[')
    6820:	7efb      	ldrb	r3, [r7, #27]
    6822:	2b5b      	cmp	r3, #91	; 0x5b
    6824:	d016      	beq.n	6854 <Shell+0x120>
                {
                    str[curr_char++] = ch;
    6826:	7efa      	ldrb	r2, [r7, #27]
    6828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    682c:	f107 011c 	add.w	r1, r7, #28
    6830:	18cb      	adds	r3, r1, r3
    6832:	701a      	strb	r2, [r3, #0]
    6834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6838:	f103 0301 	add.w	r3, r3, #1
    683c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    fio_write(1, &ch, 1);
    6840:	f04f 0001 	mov.w	r0, #1
    6844:	f107 031b 	add.w	r3, r7, #27
    6848:	4619      	mov	r1, r3
    684a:	f04f 0201 	mov.w	r2, #1
    684e:	f7ff f8e5 	bl	5a1c <fio_write>
    6852:	e024      	b.n	689e <Shell+0x16a>
                }
                else
                {
                    ch=receive_byte();
    6854:	f7ff fe8a 	bl	656c <receive_byte>
    6858:	4603      	mov	r3, r0
    685a:	76fb      	strb	r3, [r7, #27]
                    if(ch >= '1' && ch <= '6')
    685c:	7efb      	ldrb	r3, [r7, #27]
    685e:	2b30      	cmp	r3, #48	; 0x30
    6860:	d91d      	bls.n	689e <Shell+0x16a>
    6862:	7efb      	ldrb	r3, [r7, #27]
    6864:	2b36      	cmp	r3, #54	; 0x36
    6866:	d81a      	bhi.n	689e <Shell+0x16a>
                    {
                        ch=receive_byte();
    6868:	f7ff fe80 	bl	656c <receive_byte>
    686c:	4603      	mov	r3, r0
    686e:	76fb      	strb	r3, [r7, #27]
    6870:	e015      	b.n	689e <Shell+0x16a>
                    }
                }
            }
			else
            {
				str[curr_char++] = ch;
    6872:	7efa      	ldrb	r2, [r7, #27]
    6874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6878:	f107 011c 	add.w	r1, r7, #28
    687c:	18cb      	adds	r3, r1, r3
    687e:	701a      	strb	r2, [r3, #0]
    6880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6884:	f103 0301 	add.w	r3, r3, #1
    6888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				fio_write(1, &ch, 1);
    688c:	f04f 0001 	mov.w	r0, #1
    6890:	f107 031b 	add.w	r3, r7, #27
    6894:	4619      	mov	r1, r3
    6896:	f04f 0201 	mov.w	r2, #1
    689a:	f7ff f8bf 	bl	5a1c <fio_write>
			}
		} while (!done);
    689e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    68a2:	2b00      	cmp	r3, #0
    68a4:	d082      	beq.n	67ac <Shell+0x78>
        fio_write(1, newLine, strlen(newLine));
    68a6:	f107 0304 	add.w	r3, r7, #4
    68aa:	4618      	mov	r0, r3
    68ac:	f7ff fccc 	bl	6248 <strlen>
    68b0:	4603      	mov	r3, r0
    68b2:	f04f 0001 	mov.w	r0, #1
    68b6:	f107 0204 	add.w	r2, r7, #4
    68ba:	4611      	mov	r1, r2
    68bc:	461a      	mov	r2, r3
    68be:	f7ff f8ad 	bl	5a1c <fio_write>
        if(curr_char>0){
    68c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    68c6:	2b00      	cmp	r3, #0
    68c8:	f77f af51 	ble.w	676e <Shell+0x3a>
		/*This is my shell command*/
		ShellTask_Command(str);
    68cc:	f107 031c 	add.w	r3, r7, #28
    68d0:	4618      	mov	r0, r3
    68d2:	f7ff fe67 	bl	65a4 <ShellTask_Command>
	}
    }
    68d6:	e74a      	b.n	676e <Shell+0x3a>

000068d8 <main>:
}


int main()
{
    68d8:	b580      	push	{r7, lr}
    68da:	b084      	sub	sp, #16
    68dc:	af04      	add	r7, sp, #16
	init_rs232();
    68de:	f7fe fba3 	bl	5028 <init_rs232>
	enable_rs232_interrupts();
    68e2:	f7fe fbf9 	bl	50d8 <enable_rs232_interrupts>
	enable_rs232();
    68e6:	f7fe fc21 	bl	512c <enable_rs232>
	
	fs_init();
    68ea:	f7fe fda5 	bl	5438 <fs_init>
	fio_init();
    68ee:	f7fe feb9 	bl	5664 <fio_init>
	
	/* Create the queue used by the serial task.  Messages for write to
	 * the RS232. */
	vSemaphoreCreateBinary(serial_tx_wait_sem);
    68f2:	f04f 0001 	mov.w	r0, #1
    68f6:	f04f 0100 	mov.w	r1, #0
    68fa:	f04f 0203 	mov.w	r2, #3
    68fe:	f7fc faa5 	bl	2e4c <xQueueGenericCreate>
    6902:	4602      	mov	r2, r0
    6904:	f644 233c 	movw	r3, #19004	; 0x4a3c
    6908:	f2c2 0300 	movt	r3, #8192	; 0x2000
    690c:	601a      	str	r2, [r3, #0]
    690e:	f644 233c 	movw	r3, #19004	; 0x4a3c
    6912:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6916:	681b      	ldr	r3, [r3, #0]
    6918:	2b00      	cmp	r3, #0
    691a:	d00d      	beq.n	6938 <main+0x60>
    691c:	f644 233c 	movw	r3, #19004	; 0x4a3c
    6920:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6924:	681b      	ldr	r3, [r3, #0]
    6926:	4618      	mov	r0, r3
    6928:	f04f 0100 	mov.w	r1, #0
    692c:	f04f 0200 	mov.w	r2, #0
    6930:	f04f 0300 	mov.w	r3, #0
    6934:	f7fc fb36 	bl	2fa4 <xQueueGenericSend>
	serial_rx_queue = xQueueCreate(1, sizeof(char));
    6938:	f04f 0001 	mov.w	r0, #1
    693c:	f04f 0101 	mov.w	r1, #1
    6940:	f04f 0200 	mov.w	r2, #0
    6944:	f7fc fa82 	bl	2e4c <xQueueGenericCreate>
    6948:	4602      	mov	r2, r0
    694a:	f644 2340 	movw	r3, #19008	; 0x4a40
    694e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6952:	601a      	str	r2, [r3, #0]

	/* Create a task to receive char from the RS232 port. */
	xTaskCreate(Shell,
    6954:	f246 7335 	movw	r3, #26421	; 0x6735
    6958:	f2c0 0300 	movt	r3, #0
    695c:	f04f 0205 	mov.w	r2, #5
    6960:	9200      	str	r2, [sp, #0]
    6962:	f04f 0200 	mov.w	r2, #0
    6966:	9201      	str	r2, [sp, #4]
    6968:	f04f 0200 	mov.w	r2, #0
    696c:	9202      	str	r2, [sp, #8]
    696e:	f04f 0200 	mov.w	r2, #0
    6972:	9203      	str	r2, [sp, #12]
    6974:	4618      	mov	r0, r3
    6976:	f646 41b8 	movw	r1, #27832	; 0x6cb8
    697a:	f2c0 0100 	movt	r1, #0
    697e:	f44f 7200 	mov.w	r2, #512	; 0x200
    6982:	f04f 0300 	mov.w	r3, #0
    6986:	f7fc fe7f 	bl	3688 <xTaskGenericCreate>
	            (signed portCHAR *) "Shell",
	            512 /* stack size */, NULL, tskIDLE_PRIORITY + 5, NULL);
	
	/* Start running the tasks. */
	vTaskStartScheduler();
    698a:	f7fd fa39 	bl	3e00 <vTaskStartScheduler>

	return 0;
    698e:	f04f 0300 	mov.w	r3, #0
}
    6992:	4618      	mov	r0, r3
    6994:	46bd      	mov	sp, r7
    6996:	bd80      	pop	{r7, pc}

00006998 <vApplicationTickHook>:

void vApplicationTickHook()
{
    6998:	b480      	push	{r7}
    699a:	af00      	add	r7, sp, #0
}
    699c:	46bd      	mov	sp, r7
    699e:	bc80      	pop	{r7}
    69a0:	4770      	bx	lr
    69a2:	bf00      	nop

000069a4 <host_call>:
{
    /* For Thumb-2 code use the BKPT instruction instead of SWI.
     * Refer to:
     * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0471c/Bgbjhiea.html
     * http://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M4 */
    __asm__( \
    69a4:	beab      	bkpt	0x00ab
    69a6:	bf00      	nop
    69a8:	4770      	bx	lr
      "bkpt 0xAB\n"\
      "nop\n" \
      "bx lr\n"\
        :::\
    );
}
    69aa:	4618      	mov	r0, r3

000069ac <host_open>:

/* Detailed parameters please refer to
 * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0471c/Bgbjhiea.html */
int host_open(const char *pathname, int flags)
{
    69ac:	b580      	push	{r7, lr}
    69ae:	b086      	sub	sp, #24
    69b0:	af00      	add	r7, sp, #0
    69b2:	6078      	str	r0, [r7, #4]
    69b4:	6039      	str	r1, [r7, #0]
    param semi_param[3] = {
    69b6:	f107 030c 	add.w	r3, r7, #12
    69ba:	f04f 0200 	mov.w	r2, #0
    69be:	601a      	str	r2, [r3, #0]
    69c0:	f103 0304 	add.w	r3, r3, #4
    69c4:	f04f 0200 	mov.w	r2, #0
    69c8:	601a      	str	r2, [r3, #0]
    69ca:	f103 0304 	add.w	r3, r3, #4
    69ce:	f04f 0200 	mov.w	r2, #0
    69d2:	601a      	str	r2, [r3, #0]
    69d4:	f103 0304 	add.w	r3, r3, #4
    69d8:	687b      	ldr	r3, [r7, #4]
    69da:	60fb      	str	r3, [r7, #12]
    69dc:	683b      	ldr	r3, [r7, #0]
    69de:	613b      	str	r3, [r7, #16]
        { .pdChrPtr = (char *) pathname },
        { .pdInt    = flags },
        { .pdInt    = strlen(pathname) }
    69e0:	6878      	ldr	r0, [r7, #4]
    69e2:	f7ff fc31 	bl	6248 <strlen>
    69e6:	4603      	mov	r3, r0

/* Detailed parameters please refer to
 * http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0471c/Bgbjhiea.html */
int host_open(const char *pathname, int flags)
{
    param semi_param[3] = {
    69e8:	617b      	str	r3, [r7, #20]
        { .pdChrPtr = (char *) pathname },
        { .pdInt    = flags },
        { .pdInt    = strlen(pathname) }
    };

    return host_call(HOSTCALL_OPEN, semi_param);
    69ea:	f04f 0001 	mov.w	r0, #1
    69ee:	f107 030c 	add.w	r3, r7, #12
    69f2:	4619      	mov	r1, r3
    69f4:	f7ff ffd6 	bl	69a4 <host_call>
    69f8:	4603      	mov	r3, r0
}
    69fa:	4618      	mov	r0, r3
    69fc:	f107 0718 	add.w	r7, r7, #24
    6a00:	46bd      	mov	sp, r7
    6a02:	bd80      	pop	{r7, pc}

00006a04 <host_read>:

size_t host_read(int fd, void *buf, size_t count)
{
    6a04:	b580      	push	{r7, lr}
    6a06:	b088      	sub	sp, #32
    6a08:	af00      	add	r7, sp, #0
    6a0a:	60f8      	str	r0, [r7, #12]
    6a0c:	60b9      	str	r1, [r7, #8]
    6a0e:	607a      	str	r2, [r7, #4]
    param semi_param[3] = {
    6a10:	f107 0314 	add.w	r3, r7, #20
    6a14:	f04f 0200 	mov.w	r2, #0
    6a18:	601a      	str	r2, [r3, #0]
    6a1a:	f103 0304 	add.w	r3, r3, #4
    6a1e:	f04f 0200 	mov.w	r2, #0
    6a22:	601a      	str	r2, [r3, #0]
    6a24:	f103 0304 	add.w	r3, r3, #4
    6a28:	f04f 0200 	mov.w	r2, #0
    6a2c:	601a      	str	r2, [r3, #0]
    6a2e:	f103 0304 	add.w	r3, r3, #4
    6a32:	68fb      	ldr	r3, [r7, #12]
    6a34:	617b      	str	r3, [r7, #20]
    6a36:	68bb      	ldr	r3, [r7, #8]
    6a38:	61bb      	str	r3, [r7, #24]
    6a3a:	687b      	ldr	r3, [r7, #4]
    6a3c:	61fb      	str	r3, [r7, #28]
        { .pdInt = fd },
        { .pdPtr = buf },
        { .pdInt = count }
    };

    return host_call(HOSTCALL_READ, semi_param);
    6a3e:	f04f 0006 	mov.w	r0, #6
    6a42:	f107 0314 	add.w	r3, r7, #20
    6a46:	4619      	mov	r1, r3
    6a48:	f7ff ffac 	bl	69a4 <host_call>
    6a4c:	4603      	mov	r3, r0
}
    6a4e:	4618      	mov	r0, r3
    6a50:	f107 0720 	add.w	r7, r7, #32
    6a54:	46bd      	mov	sp, r7
    6a56:	bd80      	pop	{r7, pc}

00006a58 <host_write>:

size_t host_write(int fd, const void *buf, size_t count)
{
    6a58:	b580      	push	{r7, lr}
    6a5a:	b088      	sub	sp, #32
    6a5c:	af00      	add	r7, sp, #0
    6a5e:	60f8      	str	r0, [r7, #12]
    6a60:	60b9      	str	r1, [r7, #8]
    6a62:	607a      	str	r2, [r7, #4]
    param semi_param[3] = {
    6a64:	f107 0314 	add.w	r3, r7, #20
    6a68:	f04f 0200 	mov.w	r2, #0
    6a6c:	601a      	str	r2, [r3, #0]
    6a6e:	f103 0304 	add.w	r3, r3, #4
    6a72:	f04f 0200 	mov.w	r2, #0
    6a76:	601a      	str	r2, [r3, #0]
    6a78:	f103 0304 	add.w	r3, r3, #4
    6a7c:	f04f 0200 	mov.w	r2, #0
    6a80:	601a      	str	r2, [r3, #0]
    6a82:	f103 0304 	add.w	r3, r3, #4
    6a86:	68fb      	ldr	r3, [r7, #12]
    6a88:	617b      	str	r3, [r7, #20]
    6a8a:	68bb      	ldr	r3, [r7, #8]
    6a8c:	61bb      	str	r3, [r7, #24]
    6a8e:	687b      	ldr	r3, [r7, #4]
    6a90:	61fb      	str	r3, [r7, #28]
        { .pdInt = fd },
        { .pdPtr = (void *) buf },
        { .pdInt = count }
    };

    return host_call(HOSTCALL_WRITE, semi_param);
    6a92:	f04f 0005 	mov.w	r0, #5
    6a96:	f107 0314 	add.w	r3, r7, #20
    6a9a:	4619      	mov	r1, r3
    6a9c:	f7ff ff82 	bl	69a4 <host_call>
    6aa0:	4603      	mov	r3, r0
}
    6aa2:	4618      	mov	r0, r3
    6aa4:	f107 0720 	add.w	r7, r7, #32
    6aa8:	46bd      	mov	sp, r7
    6aaa:	bd80      	pop	{r7, pc}

00006aac <host_close>:

int host_close(int fd)
{
    6aac:	b580      	push	{r7, lr}
    6aae:	b082      	sub	sp, #8
    6ab0:	af00      	add	r7, sp, #0
    6ab2:	6078      	str	r0, [r7, #4]
    return host_call(HOSTCALL_CLOSE, (void *)&fd);
    6ab4:	f04f 0002 	mov.w	r0, #2
    6ab8:	f107 0304 	add.w	r3, r7, #4
    6abc:	4619      	mov	r1, r3
    6abe:	f7ff ff71 	bl	69a4 <host_call>
    6ac2:	4603      	mov	r3, r0
}
    6ac4:	4618      	mov	r0, r3
    6ac6:	f107 0708 	add.w	r7, r7, #8
    6aca:	46bd      	mov	sp, r7
    6acc:	bd80      	pop	{r7, pc}
    6ace:	bf00      	nop

00006ad0 <host_system>:

int host_system(char *cmd, int str_len)
{
    6ad0:	b580      	push	{r7, lr}
    6ad2:	b086      	sub	sp, #24
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	6078      	str	r0, [r7, #4]
    6ad8:	6039      	str	r1, [r7, #0]
    param semi_param[3] = {
    6ada:	f107 030c 	add.w	r3, r7, #12
    6ade:	f04f 0200 	mov.w	r2, #0
    6ae2:	601a      	str	r2, [r3, #0]
    6ae4:	f103 0304 	add.w	r3, r3, #4
    6ae8:	f04f 0200 	mov.w	r2, #0
    6aec:	601a      	str	r2, [r3, #0]
    6aee:	f103 0304 	add.w	r3, r3, #4
    6af2:	f04f 0200 	mov.w	r2, #0
    6af6:	601a      	str	r2, [r3, #0]
    6af8:	f103 0304 	add.w	r3, r3, #4
    6afc:	687b      	ldr	r3, [r7, #4]
    6afe:	60fb      	str	r3, [r7, #12]
    6b00:	683b      	ldr	r3, [r7, #0]
    6b02:	613b      	str	r3, [r7, #16]
        { .pdPtr = (void *) cmd },
        { .pdInt = str_len }
    };
    return host_call(HOSTCALL_SYSTEM, semi_param);
    6b04:	f04f 0012 	mov.w	r0, #18
    6b08:	f107 030c 	add.w	r3, r7, #12
    6b0c:	4619      	mov	r1, r3
    6b0e:	f7ff ff49 	bl	69a4 <host_call>
    6b12:	4603      	mov	r3, r0
}
    6b14:	4618      	mov	r0, r3
    6b16:	f107 0718 	add.w	r7, r7, #24
    6b1a:	46bd      	mov	sp, r7
    6b1c:	bd80      	pop	{r7, pc}
    6b1e:	bf00      	nop

00006b20 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    6b20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    6b22:	f000 b804 	b.w	6b2e <LoopCopyDataInit>

00006b26 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    6b26:	4b0c      	ldr	r3, [pc, #48]	; (6b58 <LoopFillZerobss+0x12>)
	ldr	r3, [r3, r1]
    6b28:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    6b2a:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    6b2c:	3104      	adds	r1, #4

00006b2e <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    6b2e:	480b      	ldr	r0, [pc, #44]	; (6b5c <LoopFillZerobss+0x16>)
	ldr	r3, =_edata
    6b30:	4b0b      	ldr	r3, [pc, #44]	; (6b60 <LoopFillZerobss+0x1a>)
	adds	r2, r0, r1
    6b32:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    6b34:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    6b36:	f4ff aff6 	bcc.w	6b26 <CopyDataInit>
	ldr	r2, =_sbss
    6b3a:	4a0a      	ldr	r2, [pc, #40]	; (6b64 <LoopFillZerobss+0x1e>)
	b	LoopFillZerobss
    6b3c:	f000 b803 	b.w	6b46 <LoopFillZerobss>

00006b40 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    6b40:	2300      	movs	r3, #0
	str	r3, [r2], #4
    6b42:	f842 3b04 	str.w	r3, [r2], #4

00006b46 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    6b46:	4b08      	ldr	r3, [pc, #32]	; (6b68 <LoopFillZerobss+0x22>)
	cmp	r2, r3
    6b48:	429a      	cmp	r2, r3
	bcc	FillZerobss
    6b4a:	f4ff aff9 	bcc.w	6b40 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    6b4e:	f7f9 fc23 	bl	398 <SystemInit>
/* Call the application's entry point.*/
	bl	main
    6b52:	f7ff fec1 	bl	68d8 <main>
	bx	lr    
    6b56:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    6b58:	00007173 	.word	0x00007173
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    6b5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    6b60:	20000030 	.word	0x20000030
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    6b64:	20000038 	.word	0x20000038
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    6b68:	20004a48 	.word	0x20004a48

00006b6c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    6b6c:	f7ff bffe 	b.w	6b6c <ADC1_2_IRQHandler>

00006b70 <.LC0>:
    6b70:	454c4449 	.word	0x454c4449
    6b74:	00000000 	.word	0x00000000

00006b78 <.LC1>:
    6b78:	00000a0d 	.word	0x00000a0d

00006b7c <.LC2>:
    6b7c:	09097325 	.word	0x09097325
    6b80:	25096325 	.word	0x25096325
    6b84:	75250975 	.word	0x75250975
    6b88:	0d752509 	.word	0x0d752509
    6b8c:	0000000a 	.word	0x0000000a

00006b90 <ulKernelPriority>:
    6b90:	0000007f                                ....

00006b94 <.LC0>:
    6b94:	69676572 	.word	0x69676572
    6b98:	72657473 	.word	0x72657473
    6b9c:	2873665f 	.word	0x2873665f
    6ba0:	22732522 	.word	0x22732522
    6ba4:	7025202c 	.word	0x7025202c
    6ba8:	7025202c 	.word	0x7025202c
    6bac:	000a0d29 	.word	0x000a0d29

00006bb0 <.LC0>:
    6bb0:	69676552 	.word	0x69676552
    6bb4:	72657473 	.word	0x72657473
    6bb8:	20676e69 	.word	0x20676e69
    6bbc:	66766564 	.word	0x66766564
    6bc0:	0a0d2e73 	.word	0x0a0d2e73
    6bc4:	00000000 	.word	0x00000000

00006bc8 <.LC1>:
    6bc8:	00766564 	.word	0x00766564

00006bcc <.LC2>:
    6bcc:	00000d0a 	.word	0x00000d0a

00006bd0 <.LC0>:
    6bd0:	6c6c6568 	.word	0x6c6c6568
    6bd4:	0000006f 	.word	0x0000006f

00006bd8 <.LC1>:
    6bd8:	6c6c6548 	.word	0x6c6c6548
    6bdc:	6820216f 	.word	0x6820216f
    6be0:	6120776f 	.word	0x6120776f
    6be4:	79206572 	.word	0x79206572
    6be8:	003f756f 	.word	0x003f756f

00006bec <.LC2>:
    6bec:	6f686365 	.word	0x6f686365
    6bf0:	00000000 	.word	0x00000000

00006bf4 <.LC3>:
    6bf4:	00007370 	.word	0x00007370

00006bf8 <.LC5>:
    6bf8:	706c6568 	.word	0x706c6568
    6bfc:	00000000 	.word	0x00000000

00006c00 <.LC6>:
    6c00:	20756f59 	.word	0x20756f59
    6c04:	206e6163 	.word	0x206e6163
    6c08:	20657375 	.word	0x20657375
    6c0c:	6f632034 	.word	0x6f632034
    6c10:	6e616d6d 	.word	0x6e616d6d
    6c14:	6e692064 	.word	0x6e692064
    6c18:	65687420 	.word	0x65687420
    6c1c:	65726620 	.word	0x65726620
    6c20:	4f545265 	.word	0x4f545265
    6c24:	00000053 	.word	0x00000053

00006c28 <.LC7>:
    6c28:	6c6c6568 	.word	0x6c6c6568
    6c2c:	202c206f 	.word	0x202c206f
    6c30:	6f686365 	.word	0x6f686365
    6c34:	70202c20 	.word	0x70202c20
    6c38:	202c2073 	.word	0x202c2073
    6c3c:	706c6568 	.word	0x706c6568
    6c40:	00000000 	.word	0x00000000

00006c44 <.LC8>:
    6c44:	74736f68 	.word	0x74736f68
    6c48:	00000000 	.word	0x00000000

00006c4c <.LC9>:
    6c4c:	6d6d6f43 	.word	0x6d6d6f43
    6c50:	20646e61 	.word	0x20646e61
    6c54:	20746f6e 	.word	0x20746f6e
    6c58:	6e756f66 	.word	0x6e756f66
    6c5c:	70202c64 	.word	0x70202c64
    6c60:	7361656c 	.word	0x7361656c
    6c64:	6e692065 	.word	0x6e692065
    6c68:	20747570 	.word	0x20747570
    6c6c:	6c656827 	.word	0x6c656827
    6c70:	00002770 	.word	0x00002770

00006c74 <.LC4>:
    6c74:	656d614e 	.word	0x656d614e
    6c78:	08080909 	.word	0x08080909
    6c7c:	74617453 	.word	0x74617453
    6c80:	08080965 	.word	0x08080965
    6c84:	69725008 	.word	0x69725008
    6c88:	7469726f 	.word	0x7469726f
    6c8c:	53080979 	.word	0x53080979
    6c90:	6b636174 	.word	0x6b636174
    6c94:	754e0809 	.word	0x754e0809
    6c98:	0000006d 	.word	0x0000006d

00006c9c <.LC12>:
    6c9c:	00082008 	.word	0x00082008

00006ca0 <.LC10>:
    6ca0:	3263787a 	.word	0x3263787a
    6ca4:	27343936 	.word	0x27343936
    6ca8:	54522073 	.word	0x54522073
    6cac:	247e534f 	.word	0x247e534f
    6cb0:	00000020 	.word	0x00000020

00006cb4 <.LC11>:
    6cb4:	00000d0a 	.word	0x00000d0a

00006cb8 <.LC13>:
    6cb8:	6c656853 	.word	0x6c656853
    6cbc:	0000006c 	.word	0x0000006c

00006cc0 <_binary_test_romfs_bin_start>:
    6cc0:	e0643825 	.word	0xe0643825
    6cc4:	0000000c 	.word	0x0000000c
    6cc8:	666d6f52 	.word	0x666d6f52
    6ccc:	65542073 	.word	0x65542073
    6cd0:	0a217473 	.word	0x0a217473
    6cd4:	799400a6 	.word	0x799400a6
    6cd8:	0000018d 	.word	0x0000018d
    6cdc:	6d74683c 	.word	0x6d74683c
    6ce0:	3c0a3e6c 	.word	0x3c0a3e6c
    6ce4:	64616568 	.word	0x64616568
    6ce8:	69743c3e 	.word	0x69743c3e
    6cec:	3e656c74 	.word	0x3e656c74
    6cf0:	65626d45 	.word	0x65626d45
    6cf4:	64656464 	.word	0x64656464
    6cf8:	69742f3c 	.word	0x69742f3c
    6cfc:	3e656c74 	.word	0x3e656c74
    6d00:	65682f3c 	.word	0x65682f3c
    6d04:	0a3e6461 	.word	0x0a3e6461
    6d08:	646f623c 	.word	0x646f623c
    6d0c:	67622079 	.word	0x67622079
    6d10:	6f6c6f63 	.word	0x6f6c6f63
    6d14:	77223d72 	.word	0x77223d72
    6d18:	65746968 	.word	0x65746968
    6d1c:	65742022 	.word	0x65742022
    6d20:	223d7478 	.word	0x223d7478
    6d24:	63616c62 	.word	0x63616c62
    6d28:	0a3e226b 	.word	0x0a3e226b
    6d2c:	2020200a 	.word	0x2020200a
    6d30:	61743c20 	.word	0x61743c20
    6d34:	20656c62 	.word	0x20656c62
    6d38:	74646977 	.word	0x74646977
    6d3c:	31223d68 	.word	0x31223d68
    6d40:	22253030 	.word	0x22253030
    6d44:	20200a3e 	.word	0x20200a3e
    6d48:	20202020 	.word	0x20202020
    6d4c:	2072743c 	.word	0x2072743c
    6d50:	696c6176 	.word	0x696c6176
    6d54:	223d6e67 	.word	0x223d6e67
    6d58:	22706f74 	.word	0x22706f74
    6d5c:	64743c3e 	.word	0x64743c3e
    6d60:	64697720 	.word	0x64697720
    6d64:	223d6874 	.word	0x223d6874
    6d68:	3e223038 	.word	0x3e223038
    6d6c:	0a202009 	.word	0x0a202009
    6d70:	742f3c09 	.word	0x742f3c09
    6d74:	743c3e64 	.word	0x743c3e64
    6d78:	69772064 	.word	0x69772064
    6d7c:	3d687464 	.word	0x3d687464
    6d80:	30303522 	.word	0x30303522
    6d84:	20093e22 	.word	0x20093e22
    6d88:	20090a20 	.word	0x20090a20
    6d8c:	31683c20 	.word	0x31683c20
    6d90:	67694c3e 	.word	0x67694c3e
    6d94:	65777468 	.word	0x65777468
    6d98:	74686769 	.word	0x74686769
    6d9c:	62657720 	.word	0x62657720
    6da0:	72657320 	.word	0x72657320
    6da4:	3c726576 	.word	0x3c726576
    6da8:	3e31682f 	.word	0x3e31682f
    6dac:	2020090a 	.word	0x2020090a
    6db0:	3e32683c 	.word	0x3e32683c
    6db4:	20343034 	.word	0x20343034
    6db8:	6150202d 	.word	0x6150202d
    6dbc:	6e206567 	.word	0x6e206567
    6dc0:	6620746f 	.word	0x6620746f
    6dc4:	646e756f 	.word	0x646e756f
    6dc8:	32682f3c 	.word	0x32682f3c
    6dcc:	20090a3e 	.word	0x20090a3e
    6dd0:	3e703c20 	.word	0x3e703c20
    6dd4:	2020090a 	.word	0x2020090a
    6dd8:	6f532020 	.word	0x6f532020
    6ddc:	2c797272 	.word	0x2c797272
    6de0:	65687420 	.word	0x65687420
    6de4:	67617020 	.word	0x67617020
    6de8:	6f792065 	.word	0x6f792065
    6dec:	72612075 	.word	0x72612075
    6df0:	65722065 	.word	0x65722065
    6df4:	73657571 	.word	0x73657571
    6df8:	676e6974 	.word	0x676e6974
    6dfc:	73617720 	.word	0x73617720
    6e00:	746f6e20 	.word	0x746f6e20
    6e04:	756f6620 	.word	0x756f6620
    6e08:	6f20646e 	.word	0x6f20646e
    6e0c:	6874206e 	.word	0x6874206e
    6e10:	090a7369 	.word	0x090a7369
    6e14:	20202020 	.word	0x20202020
    6e18:	76726573 	.word	0x76726573
    6e1c:	202e7265 	.word	0x202e7265
    6e20:	2020090a 	.word	0x2020090a
    6e24:	3e702f3c 	.word	0x3e702f3c
    6e28:	2f3c090a 	.word	0x2f3c090a
    6e2c:	3c3e6474 	.word	0x3c3e6474
    6e30:	0a3e6474 	.word	0x0a3e6474
    6e34:	26202009 	.word	0x26202009
    6e38:	7073626e 	.word	0x7073626e
    6e3c:	3c090a3b 	.word	0x3c090a3b
    6e40:	3e64742f 	.word	0x3e64742f
    6e44:	72742f3c 	.word	0x72742f3c
    6e48:	20200a3e 	.word	0x20200a3e
    6e4c:	20202020 	.word	0x20202020
    6e50:	61742f3c 	.word	0x61742f3c
    6e54:	3e656c62 	.word	0x3e656c62
    6e58:	622f3c0a 	.word	0x622f3c0a
    6e5c:	3e79646f 	.word	0x3e79646f
    6e60:	682f3c0a 	.word	0x682f3c0a
    6e64:	3e6c6d74 	.word	0x3e6c6d74
    6e68:	fc80880a 	.word	0xfc80880a
    6e6c:	0002fa62 	.word	0x0002fa62
    6e70:	74683c00 	.word	0x74683c00
    6e74:	0a3e6c6d 	.word	0x0a3e6c6d
    6e78:	6165683c 	.word	0x6165683c
    6e7c:	743c3e64 	.word	0x743c3e64
    6e80:	656c7469 	.word	0x656c7469
    6e84:	626d453e 	.word	0x626d453e
    6e88:	65646465 	.word	0x65646465
    6e8c:	79532064 	.word	0x79532064
    6e90:	6d657473 	.word	0x6d657473
    6e94:	63654c20 	.word	0x63654c20
    6e98:	65727574 	.word	0x65727574
    6e9c:	206e6920 	.word	0x206e6920
    6ea0:	554b434e 	.word	0x554b434e
    6ea4:	31303220 	.word	0x31303220
    6ea8:	742f3c32 	.word	0x742f3c32
    6eac:	656c7469 	.word	0x656c7469
    6eb0:	682f3c3e 	.word	0x682f3c3e
    6eb4:	3e646165 	.word	0x3e646165
    6eb8:	6f623c0a 	.word	0x6f623c0a
    6ebc:	62207964 	.word	0x62207964
    6ec0:	6c6f6367 	.word	0x6c6f6367
    6ec4:	223d726f 	.word	0x223d726f
    6ec8:	74696877 	.word	0x74696877
    6ecc:	74202265 	.word	0x74202265
    6ed0:	3d747865 	.word	0x3d747865
    6ed4:	616c6222 	.word	0x616c6222
    6ed8:	3e226b63 	.word	0x3e226b63
    6edc:	20200a0a 	.word	0x20200a0a
    6ee0:	743c2020 	.word	0x743c2020
    6ee4:	656c6261 	.word	0x656c6261
    6ee8:	64697720 	.word	0x64697720
    6eec:	223d6874 	.word	0x223d6874
    6ef0:	25303031 	.word	0x25303031
    6ef4:	200a3e22 	.word	0x200a3e22
    6ef8:	20202020 	.word	0x20202020
    6efc:	72743c20 	.word	0x72743c20
    6f00:	6c617620 	.word	0x6c617620
    6f04:	3d6e6769 	.word	0x3d6e6769
    6f08:	706f7422 	.word	0x706f7422
    6f0c:	743c3e22 	.word	0x743c3e22
    6f10:	69772064 	.word	0x69772064
    6f14:	3d687464 	.word	0x3d687464
    6f18:	22303822 	.word	0x22303822
    6f1c:	2020093e 	.word	0x2020093e
    6f20:	2f3c090a 	.word	0x2f3c090a
    6f24:	3c3e6474 	.word	0x3c3e6474
    6f28:	77206474 	.word	0x77206474
    6f2c:	68746469 	.word	0x68746469
    6f30:	3035223d 	.word	0x3035223d
    6f34:	093e2230 	.word	0x093e2230
    6f38:	090a2020 	.word	0x090a2020
    6f3c:	683c2020 	.word	0x683c2020
    6f40:	6d453e31 	.word	0x6d453e31
    6f44:	64646562 	.word	0x64646562
    6f48:	2f3c6465 	.word	0x2f3c6465
    6f4c:	0a3e3168 	.word	0x0a3e3168
    6f50:	3c202009 	.word	0x3c202009
    6f54:	090a3e70 	.word	0x090a3e70
    6f58:	20202020 	.word	0x20202020
    6f5c:	20656854 	.word	0x20656854
    6f60:	20626577 	.word	0x20626577
    6f64:	65676170 	.word	0x65676170
    6f68:	756f7920 	.word	0x756f7920
    6f6c:	65726120 	.word	0x65726120
    6f70:	74617720 	.word	0x74617720
    6f74:	6e696863 	.word	0x6e696863
    6f78:	61772067 	.word	0x61772067
    6f7c:	65732073 	.word	0x65732073
    6f80:	64657672 	.word	0x64657672
    6f84:	20796220 	.word	0x20796220
    6f88:	69732061 	.word	0x69732061
    6f8c:	656c706d 	.word	0x656c706d
    6f90:	62657720 	.word	0x62657720
    6f94:	2020090a 	.word	0x2020090a
    6f98:	65732020 	.word	0x65732020
    6f9c:	72657672 	.word	0x72657672
    6fa0:	6e757220 	.word	0x6e757220
    6fa4:	676e696e 	.word	0x676e696e
    6fa8:	206e6f20 	.word	0x206e6f20
    6fac:	20706f74 	.word	0x20706f74
    6fb0:	7420666f 	.word	0x7420666f
    6fb4:	6c206568 	.word	0x6c206568
    6fb8:	74686769 	.word	0x74686769
    6fbc:	67696577 	.word	0x67696577
    6fc0:	54207468 	.word	0x54207468
    6fc4:	492f5043 	.word	0x492f5043
    6fc8:	74732050 	.word	0x74732050
    6fcc:	206b6361 	.word	0x206b6361
    6fd0:	090a613c 	.word	0x090a613c
    6fd4:	20202020 	.word	0x20202020
    6fd8:	66657268 	.word	0x66657268
    6fdc:	7468223d 	.word	0x7468223d
    6fe0:	2f3a7074 	.word	0x2f3a7074
    6fe4:	7777772f 	.word	0x7777772f
    6fe8:	6369732e 	.word	0x6369732e
    6fec:	65732e73 	.word	0x65732e73
    6ff0:	64617e2f 	.word	0x64617e2f
    6ff4:	6c2f6d61 	.word	0x6c2f6d61
    6ff8:	2f706977 	.word	0x2f706977
    6ffc:	776c3e22 	.word	0x776c3e22
    7000:	2f3c5049 	.word	0x2f3c5049
    7004:	0a2e3e61 	.word	0x0a2e3e61
    7008:	3c202009 	.word	0x3c202009
    700c:	0a3e702f 	.word	0x0a3e702f
    7010:	3c202009 	.word	0x3c202009
    7014:	090a3e70 	.word	0x090a3e70
    7018:	20202020 	.word	0x20202020
    701c:	20656854 	.word	0x20656854
    7020:	75636f66 	.word	0x75636f66
    7024:	666f2073 	.word	0x666f2073
    7028:	65687420 	.word	0x65687420
    702c:	49776c20 	.word	0x49776c20
    7030:	43542050 	.word	0x43542050
    7034:	50492f50 	.word	0x50492f50
    7038:	706d6920 	.word	0x706d6920
    703c:	656d656c 	.word	0x656d656c
    7040:	7461746e 	.word	0x7461746e
    7044:	206e6f69 	.word	0x206e6f69
    7048:	74207369 	.word	0x74207369
    704c:	6572206f 	.word	0x6572206f
    7050:	65637564 	.word	0x65637564
    7054:	2020090a 	.word	0x2020090a
    7058:	68742020 	.word	0x68742020
    705c:	41522065 	.word	0x41522065
    7060:	7375204d 	.word	0x7375204d
    7064:	20656761 	.word	0x20656761
    7068:	6c696877 	.word	0x6c696877
    706c:	74732065 	.word	0x74732065
    7070:	206c6c69 	.word	0x206c6c69
    7074:	69766168 	.word	0x69766168
    7078:	6120676e 	.word	0x6120676e
    707c:	6c756620 	.word	0x6c756620
    7080:	6373206c 	.word	0x6373206c
    7084:	20656c61 	.word	0x20656c61
    7088:	2e504354 	.word	0x2e504354
    708c:	69685420 	.word	0x69685420
    7090:	20090a73 	.word	0x20090a73
    7094:	6d202020 	.word	0x6d202020
    7098:	73656b61 	.word	0x73656b61
    709c:	49776c20 	.word	0x49776c20
    70a0:	75732050 	.word	0x75732050
    70a4:	62617469 	.word	0x62617469
    70a8:	6620656c 	.word	0x6620656c
    70ac:	7520726f 	.word	0x7520726f
    70b0:	69206573 	.word	0x69206573
    70b4:	6d65206e 	.word	0x6d65206e
    70b8:	64646562 	.word	0x64646562
    70bc:	73206465 	.word	0x73206465
    70c0:	65747379 	.word	0x65747379
    70c4:	7720736d 	.word	0x7720736d
    70c8:	20687469 	.word	0x20687469
    70cc:	736e6574 	.word	0x736e6574
    70d0:	2020090a 	.word	0x2020090a
    70d4:	666f2020 	.word	0x666f2020
    70d8:	6c696b20 	.word	0x6c696b20
    70dc:	7479626f 	.word	0x7479626f
    70e0:	6f207365 	.word	0x6f207365
    70e4:	72662066 	.word	0x72662066
    70e8:	52206565 	.word	0x52206565
    70ec:	61204d41 	.word	0x61204d41
    70f0:	7220646e 	.word	0x7220646e
    70f4:	206d6f6f 	.word	0x206d6f6f
    70f8:	20726f66 	.word	0x20726f66
    70fc:	756f7261 	.word	0x756f7261
    7100:	3420646e 	.word	0x3420646e
    7104:	696b2030 	.word	0x696b2030
    7108:	79626f6c 	.word	0x79626f6c
    710c:	0a736574 	.word	0x0a736574
    7110:	20202009 	.word	0x20202009
    7114:	20666f20 	.word	0x20666f20
    7118:	65646f63 	.word	0x65646f63
    711c:	4d4f5220 	.word	0x4d4f5220
    7120:	20090a2e 	.word	0x20090a2e
    7124:	702f3c20 	.word	0x702f3c20
    7128:	3c090a3e 	.word	0x3c090a3e
    712c:	3e64742f 	.word	0x3e64742f
    7130:	3e64743c 	.word	0x3e64743c
    7134:	2020090a 	.word	0x2020090a
    7138:	73626e26 	.word	0x73626e26
    713c:	090a3b70 	.word	0x090a3b70
    7140:	64742f3c 	.word	0x64742f3c
    7144:	742f3c3e 	.word	0x742f3c3e
    7148:	200a3e72 	.word	0x200a3e72
    714c:	20202020 	.word	0x20202020
    7150:	742f3c20 	.word	0x742f3c20
    7154:	656c6261 	.word	0x656c6261
    7158:	2f3c0a3e 	.word	0x2f3c0a3e
    715c:	79646f62 	.word	0x79646f62
    7160:	2f3c0a3e 	.word	0x2f3c0a3e
    7164:	6c6d7468 	.word	0x6c6d7468
    7168:	000a0a3e 	.word	0x000a0a3e
    716c:	00000000 	.word	0x00000000
    7170:	0000      	.short	0x0000
	...
